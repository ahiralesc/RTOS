
F767ZIV1_Unilateral_synchonization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004730  08004730  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004738  08004738  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004014  2000000c  0800474c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004020  0800474c  00024020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011843  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002689  00000000  00000000  0003187d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00033f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00034e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027934  00000000  00000000  00035c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc20  00000000  00000000  0005d574  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7374  00000000  00000000  00069194  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  00160584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004680 	.word	0x08004680

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	08004680 	.word	0x08004680

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f8f8 	bl	800073a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f003 ff86 	bl	800445c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f003 ff5c 	bl	800440c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x20>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x24>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_IncTick+0x24>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000
 8000580:	20003fc8 	.word	0x20003fc8

08000584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_GetTick+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20003fc8 	.word	0x20003fc8

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	f7ff ffee 	bl	8000584 <HAL_GetTick>
 80005a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b4:	d005      	beq.n	80005c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_Delay+0x40>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c2:	bf00      	nop
 80005c4:	f7ff ffde 	bl	8000584 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8f7      	bhi.n	80005c4 <HAL_Delay+0x28>
  {
  }
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <__NVIC_SetPriorityGrouping+0x40>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	4313      	orrs	r3, r2
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x40>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	05fa0000 	.word	0x05fa0000

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <__NVIC_EnableIRQ+0x38>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff4c 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000762:	f7ff ff61 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	6978      	ldr	r0, [r7, #20]
 800076e:	f7ff ffb1 	bl	80006d4 <NVIC_EncodePriority>
 8000772:	4602      	mov	r2, r0
 8000774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff80 	bl	8000680 <__NVIC_SetPriority>
}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff54 	bl	8000644 <__NVIC_EnableIRQ>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	e175      	b.n	8000ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007c4:	2201      	movs	r2, #1
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	429a      	cmp	r2, r3
 80007de:	f040 8164 	bne.w	8000aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x4e>
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b12      	cmp	r3, #18
 80007f0:	d123      	bne.n	800083a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3208      	adds	r2, #8
 80007fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	220f      	movs	r2, #15
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4013      	ands	r3, r2
 8000814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	691a      	ldr	r2, [r3, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4313      	orrs	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	08da      	lsrs	r2, r3, #3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3208      	adds	r2, #8
 8000834:	69b9      	ldr	r1, [r7, #24]
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4013      	ands	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0203 	and.w	r2, r3, #3
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d00b      	beq.n	800088e <HAL_GPIO_Init+0xea>
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d007      	beq.n	800088e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	2b11      	cmp	r3, #17
 8000884:	d003      	beq.n	800088e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b12      	cmp	r3, #18
 800088c:	d130      	bne.n	80008f0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2203      	movs	r2, #3
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c4:	2201      	movs	r2, #1
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	f003 0201 	and.w	r2, r3, #1
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4313      	orrs	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80be 	beq.w	8000aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a64      	ldr	r2, [pc, #400]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000946:	4a60      	ldr	r2, [pc, #384]	; (8000ac8 <HAL_GPIO_Init+0x324>)
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3302      	adds	r3, #2
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	220f      	movs	r2, #15
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a57      	ldr	r2, [pc, #348]	; (8000acc <HAL_GPIO_Init+0x328>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d037      	beq.n	80009e2 <HAL_GPIO_Init+0x23e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a56      	ldr	r2, [pc, #344]	; (8000ad0 <HAL_GPIO_Init+0x32c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d031      	beq.n	80009de <HAL_GPIO_Init+0x23a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a55      	ldr	r2, [pc, #340]	; (8000ad4 <HAL_GPIO_Init+0x330>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02b      	beq.n	80009da <HAL_GPIO_Init+0x236>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a54      	ldr	r2, [pc, #336]	; (8000ad8 <HAL_GPIO_Init+0x334>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d025      	beq.n	80009d6 <HAL_GPIO_Init+0x232>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a53      	ldr	r2, [pc, #332]	; (8000adc <HAL_GPIO_Init+0x338>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d01f      	beq.n	80009d2 <HAL_GPIO_Init+0x22e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a52      	ldr	r2, [pc, #328]	; (8000ae0 <HAL_GPIO_Init+0x33c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d019      	beq.n	80009ce <HAL_GPIO_Init+0x22a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <HAL_GPIO_Init+0x340>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0x226>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a50      	ldr	r2, [pc, #320]	; (8000ae8 <HAL_GPIO_Init+0x344>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d00d      	beq.n	80009c6 <HAL_GPIO_Init+0x222>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4f      	ldr	r2, [pc, #316]	; (8000aec <HAL_GPIO_Init+0x348>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d007      	beq.n	80009c2 <HAL_GPIO_Init+0x21e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d101      	bne.n	80009be <HAL_GPIO_Init+0x21a>
 80009ba:	2309      	movs	r3, #9
 80009bc:	e012      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009be:	230a      	movs	r3, #10
 80009c0:	e010      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009c2:	2308      	movs	r3, #8
 80009c4:	e00e      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009c6:	2307      	movs	r3, #7
 80009c8:	e00c      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00a      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x324>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a33      	ldr	r2, [pc, #204]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f ae86 	bls.w	80007c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40022000 	.word	0x40022000
 8000af0:	40022400 	.word	0x40022400
 8000af4:	40013c00 	.word	0x40013c00

08000af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b14:	e003      	b.n	8000b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	041a      	lsls	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	619a      	str	r2, [r3, #24]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d104      	bne.n	8000b4e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	041a      	lsls	r2, r3, #16
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e25e      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8087 	beq.w	8000c92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b84:	4b96      	ldr	r3, [pc, #600]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 030c 	and.w	r3, r3, #12
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d00c      	beq.n	8000baa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b90:	4b93      	ldr	r3, [pc, #588]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d112      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x62>
 8000b9c:	4b90      	ldr	r3, [pc, #576]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000baa:	4b8d      	ldr	r3, [pc, #564]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d06c      	beq.n	8000c90 <HAL_RCC_OscConfig+0x130>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d168      	bne.n	8000c90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e238      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bca:	d106      	bne.n	8000bda <HAL_RCC_OscConfig+0x7a>
 8000bcc:	4b84      	ldr	r3, [pc, #528]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a83      	ldr	r2, [pc, #524]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e02e      	b.n	8000c38 <HAL_RCC_OscConfig+0xd8>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x9c>
 8000be2:	4b7f      	ldr	r3, [pc, #508]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a7e      	ldr	r2, [pc, #504]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a7b      	ldr	r2, [pc, #492]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e01d      	b.n	8000c38 <HAL_RCC_OscConfig+0xd8>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0xc0>
 8000c06:	4b76      	ldr	r3, [pc, #472]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a75      	ldr	r2, [pc, #468]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a72      	ldr	r2, [pc, #456]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e00b      	b.n	8000c38 <HAL_RCC_OscConfig+0xd8>
 8000c20:	4b6f      	ldr	r3, [pc, #444]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a6e      	ldr	r2, [pc, #440]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a6b      	ldr	r2, [pc, #428]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c40:	f7ff fca0 	bl	8000584 <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c48:	f7ff fc9c 	bl	8000584 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b64      	cmp	r3, #100	; 0x64
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e1ec      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f0      	beq.n	8000c48 <HAL_RCC_OscConfig+0xe8>
 8000c66:	e014      	b.n	8000c92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c68:	f7ff fc8c 	bl	8000584 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fc88 	bl	8000584 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e1d8      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x110>
 8000c8e:	e000      	b.n	8000c92 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d069      	beq.n	8000d72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00b      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d11c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x190>
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d116      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc2:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <HAL_RCC_OscConfig+0x17a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d001      	beq.n	8000cda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e1ac      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	493d      	ldr	r1, [pc, #244]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	e040      	b.n	8000d72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d023      	beq.n	8000d40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a38      	ldr	r2, [pc, #224]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc3e 	bl	8000584 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fc3a 	bl	8000584 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e18a      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f0      	beq.n	8000d0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4929      	ldr	r1, [pc, #164]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
 8000d3e:	e018      	b.n	8000d72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d46:	f023 0301 	bic.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fc1a 	bl	8000584 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fc16 	bl	8000584 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e166      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d038      	beq.n	8000df0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d019      	beq.n	8000dba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d92:	f7ff fbf7 	bl	8000584 <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fbf3 	bl	8000584 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e143      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f0      	beq.n	8000d9a <HAL_RCC_OscConfig+0x23a>
 8000db8:	e01a      	b.n	8000df0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fbdd 	bl	8000584 <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	e00a      	b.n	8000de4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fbd9 	bl	8000584 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d903      	bls.n	8000de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e129      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
 8000de0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	4b95      	ldr	r3, [pc, #596]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ee      	bne.n	8000dce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80a4 	beq.w	8000f46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10d      	bne.n	8000e26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b8c      	ldr	r3, [pc, #560]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a8b      	ldr	r2, [pc, #556]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b89      	ldr	r3, [pc, #548]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e26:	4b86      	ldr	r3, [pc, #536]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d118      	bne.n	8000e64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000e32:	4b83      	ldr	r3, [pc, #524]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a82      	ldr	r2, [pc, #520]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fba1 	bl	8000584 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e46:	f7ff fb9d 	bl	8000584 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b64      	cmp	r3, #100	; 0x64
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e0ed      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e58:	4b79      	ldr	r3, [pc, #484]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d106      	bne.n	8000e7a <HAL_RCC_OscConfig+0x31a>
 8000e6c:	4b73      	ldr	r3, [pc, #460]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e70:	4a72      	ldr	r2, [pc, #456]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6713      	str	r3, [r2, #112]	; 0x70
 8000e78:	e02d      	b.n	8000ed6 <HAL_RCC_OscConfig+0x376>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x33c>
 8000e82:	4b6e      	ldr	r3, [pc, #440]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	4a6d      	ldr	r2, [pc, #436]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a6a      	ldr	r2, [pc, #424]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9a:	e01c      	b.n	8000ed6 <HAL_RCC_OscConfig+0x376>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x35e>
 8000ea4:	4b65      	ldr	r3, [pc, #404]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	4a64      	ldr	r2, [pc, #400]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb0:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	4a61      	ldr	r2, [pc, #388]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebc:	e00b      	b.n	8000ed6 <HAL_RCC_OscConfig+0x376>
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eca:	4b5c      	ldr	r3, [pc, #368]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	4a5b      	ldr	r2, [pc, #364]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d015      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ede:	f7ff fb51 	bl	8000584 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	e00a      	b.n	8000efc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fb4d 	bl	8000584 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e09b      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	4b4f      	ldr	r3, [pc, #316]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0ee      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x386>
 8000f08:	e014      	b.n	8000f34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb3b 	bl	8000584 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fb37 	bl	8000584 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e085      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ee      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a3f      	ldr	r2, [pc, #252]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d071      	beq.n	8001032 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d069      	beq.n	800102e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d14b      	bne.n	8000ffa <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fb09 	bl	8000584 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f76:	f7ff fb05 	bl	8000584 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e055      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	019b      	lsls	r3, r3, #6
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	3b01      	subs	r3, #1
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	061b      	lsls	r3, r3, #24
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	071b      	lsls	r3, r3, #28
 8000fc0:	491e      	ldr	r1, [pc, #120]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fad7 	bl	8000584 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fda:	f7ff fad3 	bl	8000584 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e023      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x47a>
 8000ff8:	e01b      	b.n	8001032 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8001000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fabd 	bl	8000584 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff fab9 	bl	8000584 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e009      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x4ae>
 800102c:	e001      	b.n	8001032 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0ce      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d910      	bls.n	800108c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 020f 	bic.w	r2, r3, #15
 8001072:	4964      	ldr	r1, [pc, #400]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0b6      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	494c      	ldr	r1, [pc, #304]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d040      	beq.n	8001168 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d115      	bne.n	8001126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e07d      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e071      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e069      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f023 0203 	bic.w	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001138:	f7ff fa24 	bl	8000584 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	e00a      	b.n	8001156 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff fa20 	bl	8000584 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e051      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 020c 	and.w	r2, r3, #12
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	429a      	cmp	r2, r3
 8001166:	d1eb      	bne.n	8001140 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d210      	bcs.n	8001198 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 020f 	bic.w	r2, r3, #15
 800117e:	4921      	ldr	r1, [pc, #132]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e030      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4915      	ldr	r1, [pc, #84]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	490d      	ldr	r1, [pc, #52]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011d6:	f000 f81d 	bl	8001214 <HAL_RCC_GetSysClockFreq>
 80011da:	4601      	mov	r1, r0
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	fa21 f303 	lsr.w	r3, r1, r3
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_RCC_ClockConfig+0x1cc>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f003 f932 	bl	800445c <HAL_InitTick>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00
 8001208:	40023800 	.word	0x40023800
 800120c:	08004718 	.word	0x08004718
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d007      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x32>
 8001236:	2b08      	cmp	r3, #8
 8001238:	d008      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x38>
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80b4 	bne.w	80013a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001242:	60bb      	str	r3, [r7, #8]
       break;
 8001244:	e0b3      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001248:	60bb      	str	r3, [r7, #8]
      break;
 800124a:	e0b0      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001254:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d04a      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	099b      	lsrs	r3, r3, #6
 8001268:	f04f 0400 	mov.w	r4, #0
 800126c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	ea03 0501 	and.w	r5, r3, r1
 8001278:	ea04 0602 	and.w	r6, r4, r2
 800127c:	4629      	mov	r1, r5
 800127e:	4632      	mov	r2, r6
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	f04f 0400 	mov.w	r4, #0
 8001288:	0154      	lsls	r4, r2, #5
 800128a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800128e:	014b      	lsls	r3, r1, #5
 8001290:	4619      	mov	r1, r3
 8001292:	4622      	mov	r2, r4
 8001294:	1b49      	subs	r1, r1, r5
 8001296:	eb62 0206 	sbc.w	r2, r2, r6
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	f04f 0400 	mov.w	r4, #0
 80012a2:	0194      	lsls	r4, r2, #6
 80012a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012a8:	018b      	lsls	r3, r1, #6
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	eb64 0402 	sbc.w	r4, r4, r2
 80012b0:	f04f 0100 	mov.w	r1, #0
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	00e2      	lsls	r2, r4, #3
 80012ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012be:	00d9      	lsls	r1, r3, #3
 80012c0:	460b      	mov	r3, r1
 80012c2:	4614      	mov	r4, r2
 80012c4:	195b      	adds	r3, r3, r5
 80012c6:	eb44 0406 	adc.w	r4, r4, r6
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	02a2      	lsls	r2, r4, #10
 80012d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012d8:	0299      	lsls	r1, r3, #10
 80012da:	460b      	mov	r3, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0400 	mov.w	r4, #0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4623      	mov	r3, r4
 80012ec:	f7fe ffa8 	bl	8000240 <__aeabi_uldivmod>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e049      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	f04f 0400 	mov.w	r4, #0
 8001302:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	ea03 0501 	and.w	r5, r3, r1
 800130e:	ea04 0602 	and.w	r6, r4, r2
 8001312:	4629      	mov	r1, r5
 8001314:	4632      	mov	r2, r6
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	f04f 0400 	mov.w	r4, #0
 800131e:	0154      	lsls	r4, r2, #5
 8001320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001324:	014b      	lsls	r3, r1, #5
 8001326:	4619      	mov	r1, r3
 8001328:	4622      	mov	r2, r4
 800132a:	1b49      	subs	r1, r1, r5
 800132c:	eb62 0206 	sbc.w	r2, r2, r6
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	0194      	lsls	r4, r2, #6
 800133a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800133e:	018b      	lsls	r3, r1, #6
 8001340:	1a5b      	subs	r3, r3, r1
 8001342:	eb64 0402 	sbc.w	r4, r4, r2
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	00e2      	lsls	r2, r4, #3
 8001350:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001354:	00d9      	lsls	r1, r3, #3
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	195b      	adds	r3, r3, r5
 800135c:	eb44 0406 	adc.w	r4, r4, r6
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	02a2      	lsls	r2, r4, #10
 800136a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800136e:	0299      	lsls	r1, r3, #10
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	461a      	mov	r2, r3
 8001380:	4623      	mov	r3, r4
 8001382:	f7fe ff5d 	bl	8000240 <__aeabi_uldivmod>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	3301      	adds	r3, #1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	60bb      	str	r3, [r7, #8]
      break;
 80013a6:	e002      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013aa:	60bb      	str	r3, [r7, #8]
      break;
 80013ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ae:	68bb      	ldr	r3, [r7, #8]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	00f42400 	.word	0x00f42400

080013c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013dc:	f7ff fff0 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 80013e0:	4601      	mov	r1, r0
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	0b5b      	lsrs	r3, r3, #13
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	08004728 	.word	0x08004728

08001400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	220f      	movs	r2, #15
 800140e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_RCC_GetClockConfig+0x60>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 020f 	and.w	r2, r3, #15
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e01d      	b.n	80014b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f815 	bl	80014ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f000 f986 	bl	80017b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_TIM_Base_Start_IT+0x50>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d00b      	beq.n	8001512 <HAL_TIM_Base_Start_IT+0x42>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d007      	beq.n	8001512 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	00010007 	.word	0x00010007

08001524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d122      	bne.n	8001580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b02      	cmp	r3, #2
 8001546:	d11b      	bne.n	8001580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0202 	mvn.w	r2, #2
 8001550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f905 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 800156c:	e005      	b.n	800157a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8f7 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f908 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b04      	cmp	r3, #4
 800158c:	d122      	bne.n	80015d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d11b      	bne.n	80015d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f06f 0204 	mvn.w	r2, #4
 80015a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8db 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 80015c0:	e005      	b.n	80015ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8cd 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8de 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d122      	bne.n	8001628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d11b      	bne.n	8001628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0208 	mvn.w	r2, #8
 80015f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2204      	movs	r2, #4
 80015fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8b1 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 8001614:	e005      	b.n	8001622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f8a3 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f8b4 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b10      	cmp	r3, #16
 8001634:	d122      	bne.n	800167c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b10      	cmp	r3, #16
 8001642:	d11b      	bne.n	800167c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0210 	mvn.w	r2, #16
 800164c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2208      	movs	r2, #8
 8001652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f887 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 8001668:	e005      	b.n	8001676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f879 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f88a 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d10e      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0201 	mvn.w	r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f002 fe98 	bl	80043d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	2b80      	cmp	r3, #128	; 0x80
 80016b4:	d10e      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b80      	cmp	r3, #128	; 0x80
 80016c2:	d107      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f91a 	bl	8001908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e2:	d10e      	bne.n	8001702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	2b80      	cmp	r3, #128	; 0x80
 80016f0:	d107      	bne.n	8001702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f90d 	bl	800191c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	2b40      	cmp	r3, #64	; 0x40
 800170e:	d10e      	bne.n	800172e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	d107      	bne.n	800172e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f838 	bl	800179e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b20      	cmp	r3, #32
 800173a:	d10e      	bne.n	800175a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b20      	cmp	r3, #32
 8001748:	d107      	bne.n	800175a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0220 	mvn.w	r2, #32
 8001752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8cd 	bl	80018f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <TIM_Base_SetConfig+0x114>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d00f      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <TIM_Base_SetConfig+0x118>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00b      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <TIM_Base_SetConfig+0x11c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <TIM_Base_SetConfig+0x120>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d003      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <TIM_Base_SetConfig+0x124>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d108      	bne.n	8001806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <TIM_Base_SetConfig+0x114>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02b      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d027      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <TIM_Base_SetConfig+0x118>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d023      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <TIM_Base_SetConfig+0x11c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01f      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <TIM_Base_SetConfig+0x120>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01b      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <TIM_Base_SetConfig+0x124>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d017      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a28      	ldr	r2, [pc, #160]	; (80018dc <TIM_Base_SetConfig+0x128>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <TIM_Base_SetConfig+0x12c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00f      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <TIM_Base_SetConfig+0x130>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00b      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <TIM_Base_SetConfig+0x134>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <TIM_Base_SetConfig+0x138>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d003      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <TIM_Base_SetConfig+0x13c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d108      	bne.n	8001878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800186c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <TIM_Base_SetConfig+0x114>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d003      	beq.n	80018ac <TIM_Base_SetConfig+0xf8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <TIM_Base_SetConfig+0x124>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d103      	bne.n	80018b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	615a      	str	r2, [r3, #20]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40000800 	.word	0x40000800
 80018d4:	40000c00 	.word	0x40000c00
 80018d8:	40010400 	.word	0x40010400
 80018dc:	40014000 	.word	0x40014000
 80018e0:	40014400 	.word	0x40014400
 80018e4:	40014800 	.word	0x40014800
 80018e8:	40001800 	.word	0x40001800
 80018ec:	40001c00 	.word	0x40001c00
 80018f0:	40002000 	.word	0x40002000

080018f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001942:	2b84      	cmp	r3, #132	; 0x84
 8001944:	d005      	beq.n	8001952 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001946:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	3303      	adds	r3, #3
 8001950:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001966:	f3ef 8305 	mrs	r3, IPSR
 800196a:	607b      	str	r3, [r7, #4]
  return(result);
 800196c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001988:	f001 f8dc 	bl	8002b44 <vTaskStartScheduler>
  
  return osOK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}

08001992 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001994:	b089      	sub	sp, #36	; 0x24
 8001996:	af04      	add	r7, sp, #16
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <osThreadCreate+0x54>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01c      	beq.n	80019e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685c      	ldr	r4, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681d      	ldr	r5, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691e      	ldr	r6, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffb6 	bl	8001930 <makeFreeRtosPriority>
 80019c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019ce:	9202      	str	r2, [sp, #8]
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	9100      	str	r1, [sp, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4632      	mov	r2, r6
 80019d8:	4629      	mov	r1, r5
 80019da:	4620      	mov	r0, r4
 80019dc:	f000 ff23 	bl	8002826 <xTaskCreateStatic>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e01c      	b.n	8001a20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685c      	ldr	r4, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019f2:	b29e      	uxth	r6, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff98 	bl	8001930 <makeFreeRtosPriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4632      	mov	r2, r6
 8001a0e:	4629      	mov	r1, r5
 8001a10:	4620      	mov	r0, r4
 8001a12:	f000 ff67 	bl	80028e4 <xTaskCreate>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d001      	beq.n	8001a20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a2a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af02      	add	r7, sp, #8
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <osSemaphoreCreate+0x34>
    if (count == 1) {
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10b      	bne.n	8001a5a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	2303      	movs	r3, #3
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2001      	movs	r0, #1
 8001a52:	f000 f9bf 	bl	8001dd4 <xQueueGenericCreateStatic>
 8001a56:	4603      	mov	r3, r0
 8001a58:	e016      	b.n	8001a88 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e014      	b.n	8001a88 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d110      	bne.n	8001a86 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8001a64:	2203      	movs	r2, #3
 8001a66:	2100      	movs	r1, #0
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f000 fa2f 	bl	8001ecc <xQueueGenericCreate>
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <osSemaphoreCreate+0x58>
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fa83 	bl	8001f88 <xQueueGenericSend>
      return sema;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	e000      	b.n	8001a88 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001a86:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	e03a      	b.n	8001b1e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab2:	d103      	bne.n	8001abc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e009      	b.n	8001ad0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <osSemaphoreWait+0x40>
      ticks = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001ad0:	f7ff ff46 	bl	8001960 <inHandlerMode>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d017      	beq.n	8001b0a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fcf4 	bl	80024d0 <xQueueReceiveFromISR>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001aee:	23ff      	movs	r3, #255	; 0xff
 8001af0:	e015      	b.n	8001b1e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d011      	beq.n	8001b1c <osSemaphoreWait+0x8c>
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <osSemaphoreWait+0x98>)
 8001afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	e008      	b.n	8001b1c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fbcf 	bl	80022b0 <xQueueSemaphoreTake>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d001      	beq.n	8001b1c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001b18:	23ff      	movs	r3, #255	; 0xff
 8001b1a:	e000      	b.n	8001b1e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000ed04 	.word	0xe000ed04

08001b2c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001b3c:	f7ff ff10 	bl	8001960 <inHandlerMode>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d016      	beq.n	8001b74 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb1d 	bl	800218c <xQueueGiveFromISR>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d001      	beq.n	8001b5c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001b58:	23ff      	movs	r3, #255	; 0xff
 8001b5a:	e017      	b.n	8001b8c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d013      	beq.n	8001b8a <osSemaphoreRelease+0x5e>
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <osSemaphoreRelease+0x68>)
 8001b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f3bf 8f4f 	dsb	sy
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	e00a      	b.n	8001b8a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fa04 	bl	8001f88 <xQueueGenericSend>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001b86:	23ff      	movs	r3, #255	; 0xff
 8001b88:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	e000ed04 	.word	0xe000ed04

08001b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f103 0208 	add.w	r2, r3, #8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f103 0208 	add.w	r2, r3, #8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f103 0208 	add.w	r2, r3, #8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d103      	bne.n	8001c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e00c      	b.n	8001c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3308      	adds	r3, #8
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e002      	b.n	8001c68 <vListInsert+0x2e>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d2f6      	bcs.n	8001c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6852      	ldr	r2, [r2, #4]
 8001ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d103      	bne.n	8001ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10b      	bne.n	8001d2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	b672      	cpsid	i
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	b662      	cpsie	i
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	e7fe      	b.n	8001d2a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8001d2c:	f001 fe7c 	bl	8003a28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	441a      	add	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	441a      	add	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	22ff      	movs	r2, #255	; 0xff
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	22ff      	movs	r2, #255	; 0xff
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d114      	bne.n	8001dac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01a      	beq.n	8001dc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3310      	adds	r3, #16
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 f936 	bl	8003000 <xTaskRemoveFromEventList>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <xQueueGenericReset+0xd0>)
 8001d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	e009      	b.n	8001dc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3310      	adds	r3, #16
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fef1 	bl	8001b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3324      	adds	r3, #36	; 0x24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff feec 	bl	8001b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dc0:	f001 fe64 	bl	8003a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000ed04 	.word	0xe000ed04

08001dd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10b      	bne.n	8001e00 <xQueueGenericCreateStatic+0x2c>
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	b672      	cpsid	i
 8001dee:	f383 8811 	msr	BASEPRI, r3
 8001df2:	f3bf 8f6f 	isb	sy
 8001df6:	f3bf 8f4f 	dsb	sy
 8001dfa:	b662      	cpsie	i
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dfe:	e7fe      	b.n	8001dfe <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <xQueueGenericCreateStatic+0x4a>
 8001e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0a:	b672      	cpsid	i
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	b662      	cpsie	i
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e7fe      	b.n	8001e1c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <xQueueGenericCreateStatic+0x56>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <xQueueGenericCreateStatic+0x5a>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <xQueueGenericCreateStatic+0x5c>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <xQueueGenericCreateStatic+0x78>
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	b672      	cpsid	i
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	b662      	cpsie	i
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	e7fe      	b.n	8001e4a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <xQueueGenericCreateStatic+0x84>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <xQueueGenericCreateStatic+0x88>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <xQueueGenericCreateStatic+0x8a>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <xQueueGenericCreateStatic+0xa6>
 8001e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e66:	b672      	cpsid	i
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	b662      	cpsie	i
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e7fe      	b.n	8001e78 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e7a:	2348      	movs	r3, #72	; 0x48
 8001e7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b48      	cmp	r3, #72	; 0x48
 8001e82:	d00b      	beq.n	8001e9c <xQueueGenericCreateStatic+0xc8>
 8001e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e88:	b672      	cpsid	i
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	b662      	cpsie	i
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	e7fe      	b.n	8001e9a <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f844 	bl	8001f4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <xQueueGenericCreate+0x2c>
 8001ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee4:	b672      	cpsid	i
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	b662      	cpsie	i
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e7fe      	b.n	8001ef6 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e004      	b.n	8001f0e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3348      	adds	r3, #72	; 0x48
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 feaa 	bl	8003c6c <pvPortMalloc>
 8001f18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00f      	beq.n	8001f40 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3348      	adds	r3, #72	; 0x48
 8001f24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f805 	bl	8001f4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f40:	69bb      	ldr	r3, [r7, #24]
	}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e002      	b.n	8001f6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f78:	2101      	movs	r1, #1
 8001f7a:	69b8      	ldr	r0, [r7, #24]
 8001f7c:	f7ff fec0 	bl	8001d00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08e      	sub	sp, #56	; 0x38
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <xQueueGenericSend+0x34>
 8001fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa8:	b672      	cpsid	i
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	b662      	cpsie	i
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fba:	e7fe      	b.n	8001fba <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <xQueueGenericSend+0x42>
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <xQueueGenericSend+0x46>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <xQueueGenericSend+0x48>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <xQueueGenericSend+0x64>
 8001fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd8:	b672      	cpsid	i
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	b662      	cpsie	i
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e7fe      	b.n	8001fea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d103      	bne.n	8001ffa <xQueueGenericSend+0x72>
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <xQueueGenericSend+0x76>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <xQueueGenericSend+0x78>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <xQueueGenericSend+0x94>
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	b672      	cpsid	i
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	b662      	cpsie	i
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	e7fe      	b.n	800201a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800201c:	f001 f9b4 	bl	8003388 <xTaskGetSchedulerState>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <xQueueGenericSend+0xa4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <xQueueGenericSend+0xa8>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <xQueueGenericSend+0xaa>
 8002030:	2300      	movs	r3, #0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <xQueueGenericSend+0xc6>
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	b672      	cpsid	i
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	b662      	cpsie	i
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e7fe      	b.n	800204c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800204e:	f001 fceb 	bl	8003a28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <xQueueGenericSend+0xdc>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d129      	bne.n	80020b8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800206a:	f000 facc 	bl	8002606 <prvCopyDataToQueue>
 800206e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	3324      	adds	r3, #36	; 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f000 ffbf 	bl	8003000 <xTaskRemoveFromEventList>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <xQueueGenericSend+0x200>)
 800208a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	e00a      	b.n	80020b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <xQueueGenericSend+0x200>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020b0:	f001 fcec 	bl	8003a8c <vPortExitCritical>
				return pdPASS;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e063      	b.n	8002180 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020be:	f001 fce5 	bl	8003a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e05c      	b.n	8002180 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fff9 	bl	80030c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020da:	f001 fcd7 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020de:	f000 fd93 	bl	8002c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020e2:	f001 fca1 	bl	8003a28 <vPortEnterCritical>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d103      	bne.n	80020fc <xQueueGenericSend+0x174>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002102:	b25b      	sxtb	r3, r3
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x18a>
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002112:	f001 fcbb 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002116:	1d3a      	adds	r2, r7, #4
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 ffe8 	bl	80030f4 <xTaskCheckForTimeOut>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d124      	bne.n	8002174 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800212a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212c:	f000 fb63 	bl	80027f6 <prvIsQueueFull>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d018      	beq.n	8002168 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	3310      	adds	r3, #16
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f000 ff38 	bl	8002fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002146:	f000 faee 	bl	8002726 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800214a:	f000 fd6b 	bl	8002c24 <xTaskResumeAll>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f af7c 	bne.w	800204e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <xQueueGenericSend+0x200>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	e772      	b.n	800204e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800216a:	f000 fadc 	bl	8002726 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800216e:	f000 fd59 	bl	8002c24 <xTaskResumeAll>
 8002172:	e76c      	b.n	800204e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002176:	f000 fad6 	bl	8002726 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800217a:	f000 fd53 	bl	8002c24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800217e:	2300      	movs	r3, #0
		}
	}
}
 8002180:	4618      	mov	r0, r3
 8002182:	3738      	adds	r7, #56	; 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000ed04 	.word	0xe000ed04

0800218c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <xQueueGiveFromISR+0x2c>
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	b672      	cpsid	i
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	b662      	cpsie	i
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	e7fe      	b.n	80021b6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <xQueueGiveFromISR+0x4c>
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	b672      	cpsid	i
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	b662      	cpsie	i
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e7fe      	b.n	80021d6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <xQueueGiveFromISR+0x5c>
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <xQueueGiveFromISR+0x60>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <xQueueGiveFromISR+0x62>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10b      	bne.n	800220a <xQueueGiveFromISR+0x7e>
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	b672      	cpsid	i
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	b662      	cpsie	i
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e7fe      	b.n	8002208 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800220a:	f001 fced 	bl	8003be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800220e:	f3ef 8211 	mrs	r2, BASEPRI
 8002212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002216:	b672      	cpsid	i
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	b662      	cpsie	i
 8002226:	617a      	str	r2, [r7, #20]
 8002228:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800222a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800223a:	429a      	cmp	r2, r3
 800223c:	d22b      	bcs.n	8002296 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002250:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d112      	bne.n	8002280 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	3324      	adds	r3, #36	; 0x24
 8002266:	4618      	mov	r0, r3
 8002268:	f000 feca 	bl	8003000 <xTaskRemoveFromEventList>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e007      	b.n	8002290 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002284:	3301      	adds	r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	b25a      	sxtb	r2, r3
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002290:	2301      	movs	r3, #1
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
 8002294:	e001      	b.n	800229a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3738      	adds	r7, #56	; 0x38
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	; 0x38
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	b672      	cpsid	i
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	b662      	cpsie	i
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	e7fe      	b.n	80022e2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <xQueueSemaphoreTake+0x54>
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	b672      	cpsid	i
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	b662      	cpsie	i
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e7fe      	b.n	8002302 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002304:	f001 f840 	bl	8003388 <xTaskGetSchedulerState>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <xQueueSemaphoreTake+0x64>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <xQueueSemaphoreTake+0x68>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <xQueueSemaphoreTake+0x6a>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10b      	bne.n	8002336 <xQueueSemaphoreTake+0x86>
 800231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002322:	b672      	cpsid	i
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	b662      	cpsie	i
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e7fe      	b.n	8002334 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002336:	f001 fb77 	bl	8003a28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d024      	beq.n	8002390 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002356:	f001 f9e5 	bl	8003724 <pvTaskIncrementMutexHeldCount>
 800235a:	4602      	mov	r2, r0
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00f      	beq.n	8002388 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	3310      	adds	r3, #16
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fe47 	bl	8003000 <xTaskRemoveFromEventList>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002378:	4b54      	ldr	r3, [pc, #336]	; (80024cc <xQueueSemaphoreTake+0x21c>)
 800237a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002388:	f001 fb80 	bl	8003a8c <vPortExitCritical>
				return pdPASS;
 800238c:	2301      	movs	r3, #1
 800238e:	e098      	b.n	80024c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d112      	bne.n	80023bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <xQueueSemaphoreTake+0x104>
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	b672      	cpsid	i
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	b662      	cpsie	i
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e7fe      	b.n	80023b2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80023b4:	f001 fb6a 	bl	8003a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e082      	b.n	80024c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fe7e 	bl	80030c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023d0:	f001 fb5c 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023d4:	f000 fc18 	bl	8002c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023d8:	f001 fb26 	bl	8003a28 <vPortEnterCritical>
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d103      	bne.n	80023f2 <xQueueSemaphoreTake+0x142>
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d103      	bne.n	8002408 <xQueueSemaphoreTake+0x158>
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002408:	f001 fb40 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800240c:	463a      	mov	r2, r7
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fe6d 	bl	80030f4 <xTaskCheckForTimeOut>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d132      	bne.n	8002486 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002422:	f000 f9d2 	bl	80027ca <prvIsQueueEmpty>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d026      	beq.n	800247a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002434:	f001 faf8 	bl	8003a28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 ffc1 	bl	80033c4 <xTaskPriorityInherit>
 8002442:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002444:	f001 fb22 	bl	8003a8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	3324      	adds	r3, #36	; 0x24
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fdaf 	bl	8002fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002458:	f000 f965 	bl	8002726 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800245c:	f000 fbe2 	bl	8002c24 <xTaskResumeAll>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f47f af67 	bne.w	8002336 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <xQueueSemaphoreTake+0x21c>)
 800246a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	e75d      	b.n	8002336 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800247a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800247c:	f000 f953 	bl	8002726 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002480:	f000 fbd0 	bl	8002c24 <xTaskResumeAll>
 8002484:	e757      	b.n	8002336 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002488:	f000 f94d 	bl	8002726 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800248c:	f000 fbca 	bl	8002c24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002492:	f000 f99a 	bl	80027ca <prvIsQueueEmpty>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f43f af4c 	beq.w	8002336 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80024a4:	f001 fac0 	bl	8003a28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80024a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024aa:	f000 f894 	bl	80025d6 <prvGetDisinheritPriorityAfterTimeout>
 80024ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 f892 	bl	80035e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80024bc:	f001 fae6 	bl	8003a8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3738      	adds	r7, #56	; 0x38
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <xQueueReceiveFromISR+0x2e>
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	b672      	cpsid	i
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	b662      	cpsie	i
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	e7fe      	b.n	80024fc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <xQueueReceiveFromISR+0x3c>
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <xQueueReceiveFromISR+0x40>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <xQueueReceiveFromISR+0x42>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <xQueueReceiveFromISR+0x5e>
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	b672      	cpsid	i
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	b662      	cpsie	i
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e7fe      	b.n	800252c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800252e:	f001 fb5b 	bl	8003be8 <vPortValidateInterruptPriority>
	__asm volatile
 8002532:	f3ef 8211 	mrs	r2, BASEPRI
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	b672      	cpsid	i
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	b662      	cpsie	i
 800254a:	61ba      	str	r2, [r7, #24]
 800254c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800254e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02f      	beq.n	80025be <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256c:	f000 f8b5 	bl	80026da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002578:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d112      	bne.n	80025a8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	3310      	adds	r3, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fd36 	bl	8003000 <xTaskRemoveFromEventList>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00e      	beq.n	80025b8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e007      	b.n	80025b8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80025a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ac:	3301      	adds	r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	b25a      	sxtb	r2, r3
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80025b8:	2301      	movs	r3, #1
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
 80025bc:	e001      	b.n	80025c2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3738      	adds	r7, #56	; 0x38
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1c3 0307 	rsb	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e001      	b.n	80025f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80025f8:	68fb      	ldr	r3, [r7, #12]
	}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d14d      	bne.n	80026c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 ff4d 	bl	80034d0 <xTaskPriorityDisinherit>
 8002636:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e043      	b.n	80026c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6898      	ldr	r0, [r3, #8]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	461a      	mov	r2, r3
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	f002 f801 	bl	8004658 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	441a      	add	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d32b      	bcc.n	80026c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e026      	b.n	80026c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68d8      	ldr	r0, [r3, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	461a      	mov	r2, r3
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	f001 ffe7 	bl	8004658 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	425b      	negs	r3, r3
 8002694:	441a      	add	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d207      	bcs.n	80026b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	425b      	negs	r3, r3
 80026b0:	441a      	add	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d105      	bne.n	80026c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026d0:	697b      	ldr	r3, [r7, #20]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	441a      	add	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d303      	bcc.n	800270e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	461a      	mov	r2, r3
 8002718:	6838      	ldr	r0, [r7, #0]
 800271a:	f001 ff9d 	bl	8004658 <memcpy>
	}
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800272e:	f001 f97b 	bl	8003a28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002738:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800273a:	e011      	b.n	8002760 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d012      	beq.n	800276a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3324      	adds	r3, #36	; 0x24
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fc59 	bl	8003000 <xTaskRemoveFromEventList>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002754:	f000 fd32 	bl	80031bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	3b01      	subs	r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	dce9      	bgt.n	800273c <prvUnlockQueue+0x16>
 8002768:	e000      	b.n	800276c <prvUnlockQueue+0x46>
					break;
 800276a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	22ff      	movs	r2, #255	; 0xff
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002774:	f001 f98a 	bl	8003a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002778:	f001 f956 	bl	8003a28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002782:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002784:	e011      	b.n	80027aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3310      	adds	r3, #16
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fc34 	bl	8003000 <xTaskRemoveFromEventList>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800279e:	f000 fd0d 	bl	80031bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dce9      	bgt.n	8002786 <prvUnlockQueue+0x60>
 80027b2:	e000      	b.n	80027b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027be:	f001 f965 	bl	8003a8c <vPortExitCritical>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027d2:	f001 f929 	bl	8003a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027de:	2301      	movs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e001      	b.n	80027e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027e8:	f001 f950 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 80027ec:	68fb      	ldr	r3, [r7, #12]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027fe:	f001 f913 	bl	8003a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	429a      	cmp	r2, r3
 800280c:	d102      	bne.n	8002814 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800280e:	2301      	movs	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e001      	b.n	8002818 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002818:	f001 f938 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 800281c:	68fb      	ldr	r3, [r7, #12]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08e      	sub	sp, #56	; 0x38
 800282a:	af04      	add	r7, sp, #16
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <xTaskCreateStatic+0x2c>
	__asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	b672      	cpsid	i
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	b662      	cpsie	i
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	e7fe      	b.n	8002850 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <xTaskCreateStatic+0x4a>
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	b672      	cpsid	i
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	b662      	cpsie	i
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e7fe      	b.n	800286e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002870:	2354      	movs	r3, #84	; 0x54
 8002872:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b54      	cmp	r3, #84	; 0x54
 8002878:	d00b      	beq.n	8002892 <xTaskCreateStatic+0x6c>
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	b672      	cpsid	i
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	b662      	cpsie	i
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e7fe      	b.n	8002890 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01e      	beq.n	80028d6 <xTaskCreateStatic+0xb0>
 8002898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01b      	beq.n	80028d6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028b0:	2300      	movs	r3, #0
 80028b2:	9303      	str	r3, [sp, #12]
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f850 	bl	800296e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028d0:	f000 f8ce 	bl	8002a70 <prvAddNewTaskToReadyList>
 80028d4:	e001      	b.n	80028da <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80028da:	697b      	ldr	r3, [r7, #20]
	}
 80028dc:	4618      	mov	r0, r3
 80028de:	3728      	adds	r7, #40	; 0x28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af04      	add	r7, sp, #16
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 f9b7 	bl	8003c6c <pvPortMalloc>
 80028fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00e      	beq.n	8002924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002906:	2054      	movs	r0, #84	; 0x54
 8002908:	f001 f9b0 	bl	8003c6c <pvPortMalloc>
 800290c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
 800291a:	e005      	b.n	8002928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800291c:	6978      	ldr	r0, [r7, #20]
 800291e:	f001 fa6d 	bl	8003dfc <vPortFree>
 8002922:	e001      	b.n	8002928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d017      	beq.n	800295e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	2300      	movs	r3, #0
 800293a:	9303      	str	r3, [sp, #12]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f80e 	bl	800296e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002952:	69f8      	ldr	r0, [r7, #28]
 8002954:	f000 f88c 	bl	8002a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002958:	2301      	movs	r3, #1
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e002      	b.n	8002964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002964:	69bb      	ldr	r3, [r7, #24]
	}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002986:	440b      	add	r3, r1
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f023 0307 	bic.w	r3, r3, #7
 8002994:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <prvInitialiseNewTask+0x4a>
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	b672      	cpsid	i
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	b662      	cpsie	i
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e7fe      	b.n	80029b6 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	e012      	b.n	80029e4 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	7819      	ldrb	r1, [r3, #0]
 80029c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	3334      	adds	r3, #52	; 0x34
 80029ce:	460a      	mov	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	d9e9      	bls.n	80029be <prvInitialiseNewTask+0x50>
 80029ea:	e000      	b.n	80029ee <prvInitialiseNewTask+0x80>
		{
			break;
 80029ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d901      	bls.n	8002a00 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029fc:	2306      	movs	r3, #6
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	2200      	movs	r2, #0
 8002a10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	3304      	adds	r3, #4
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f8de 	bl	8001bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	3318      	adds	r3, #24
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff f8d9 	bl	8001bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	f1c3 0207 	rsb	r2, r3, #7
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	2200      	movs	r2, #0
 8002a40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	f000 fee2 	bl	8003818 <pxPortInitialiseStack>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a66:	bf00      	nop
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a78:	f000 ffd6 	bl	8003a28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <prvAddNewTaskToReadyList+0xb8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <prvAddNewTaskToReadyList+0xb8>)
 8002a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a86:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <prvAddNewTaskToReadyList+0xbc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <prvAddNewTaskToReadyList+0xbc>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <prvAddNewTaskToReadyList+0xb8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d110      	bne.n	8002abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a9c:	f000 fbb2 	bl	8003204 <prvInitialiseTaskLists>
 8002aa0:	e00d      	b.n	8002abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <prvAddNewTaskToReadyList+0xc0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <prvAddNewTaskToReadyList+0xbc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d802      	bhi.n	8002abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <prvAddNewTaskToReadyList+0xbc>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <prvAddNewTaskToReadyList+0xc4>)
 8002ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <prvAddNewTaskToReadyList+0xc8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <prvAddNewTaskToReadyList+0xc8>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <prvAddNewTaskToReadyList+0xcc>)
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7ff f87e 	bl	8001bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002af6:	f000 ffc9 	bl	8003a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <prvAddNewTaskToReadyList+0xc0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00e      	beq.n	8002b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <prvAddNewTaskToReadyList+0xbc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d207      	bcs.n	8002b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <prvAddNewTaskToReadyList+0xd0>)
 8002b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000128 	.word	0x20000128
 8002b2c:	20000028 	.word	0x20000028
 8002b30:	20000134 	.word	0x20000134
 8002b34:	20000144 	.word	0x20000144
 8002b38:	20000130 	.word	0x20000130
 8002b3c:	2000002c 	.word	0x2000002c
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b52:	463a      	mov	r2, r7
 8002b54:	1d39      	adds	r1, r7, #4
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fa66 	bl	800402c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b60:	6839      	ldr	r1, [r7, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	9202      	str	r2, [sp, #8]
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	460a      	mov	r2, r1
 8002b72:	491f      	ldr	r1, [pc, #124]	; (8002bf0 <vTaskStartScheduler+0xac>)
 8002b74:	481f      	ldr	r0, [pc, #124]	; (8002bf4 <vTaskStartScheduler+0xb0>)
 8002b76:	f7ff fe56 	bl	8002826 <xTaskCreateStatic>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <vTaskStartScheduler+0xb4>)
 8002b7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <vTaskStartScheduler+0xb4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e001      	b.n	8002b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d117      	bne.n	8002bc8 <vTaskStartScheduler+0x84>
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	b672      	cpsid	i
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	b662      	cpsie	i
 8002bac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <vTaskStartScheduler+0xb8>)
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <vTaskStartScheduler+0xbc>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <vTaskStartScheduler+0xc0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bc2:	f000 feb5 	bl	8003930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bc6:	e00f      	b.n	8002be8 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d10b      	bne.n	8002be8 <vTaskStartScheduler+0xa4>
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	b672      	cpsid	i
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	b662      	cpsie	i
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e7fe      	b.n	8002be6 <vTaskStartScheduler+0xa2>
}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	08004698 	.word	0x08004698
 8002bf4:	080031d5 	.word	0x080031d5
 8002bf8:	2000014c 	.word	0x2000014c
 8002bfc:	20000148 	.word	0x20000148
 8002c00:	20000134 	.word	0x20000134
 8002c04:	2000012c 	.word	0x2000012c

08002c08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <vTaskSuspendAll+0x18>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <vTaskSuspendAll+0x18>)
 8002c14:	6013      	str	r3, [r2, #0]
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	20000150 	.word	0x20000150

08002c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <xTaskResumeAll+0x118>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <xTaskResumeAll+0x2e>
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	b672      	cpsid	i
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	b662      	cpsie	i
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	e7fe      	b.n	8002c50 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c52:	f000 fee9 	bl	8003a28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <xTaskResumeAll+0x118>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	4a37      	ldr	r2, [pc, #220]	; (8002d3c <xTaskResumeAll+0x118>)
 8002c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <xTaskResumeAll+0x118>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d161      	bne.n	8002d2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <xTaskResumeAll+0x11c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d05d      	beq.n	8002d2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c70:	e02e      	b.n	8002cd0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <xTaskResumeAll+0x120>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3318      	adds	r3, #24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f814 	bl	8001cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff f80f 	bl	8001cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	2201      	movs	r2, #1
 8002c94:	409a      	lsls	r2, r3
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <xTaskResumeAll+0x124>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <xTaskResumeAll+0x124>)
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <xTaskResumeAll+0x128>)
 8002cae:	441a      	add	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f7fe ff9b 	bl	8001bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <xTaskResumeAll+0x12c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <xTaskResumeAll+0x130>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <xTaskResumeAll+0x120>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1cc      	bne.n	8002c72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cde:	f000 fb2d 	bl	800333c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <xTaskResumeAll+0x134>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cee:	f000 f847 	bl	8002d80 <xTaskIncrementTick>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <xTaskResumeAll+0x130>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f1      	bne.n	8002cee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <xTaskResumeAll+0x134>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <xTaskResumeAll+0x130>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <xTaskResumeAll+0x138>)
 8002d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d2c:	f000 feae 	bl	8003a8c <vPortExitCritical>

	return xAlreadyYielded;
 8002d30:	68bb      	ldr	r3, [r7, #8]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000150 	.word	0x20000150
 8002d40:	20000128 	.word	0x20000128
 8002d44:	200000e8 	.word	0x200000e8
 8002d48:	20000130 	.word	0x20000130
 8002d4c:	2000002c 	.word	0x2000002c
 8002d50:	20000028 	.word	0x20000028
 8002d54:	2000013c 	.word	0x2000013c
 8002d58:	20000138 	.word	0x20000138
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <xTaskGetTickCount+0x1c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	2000012c 	.word	0x2000012c

08002d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d8a:	4b51      	ldr	r3, [pc, #324]	; (8002ed0 <xTaskIncrementTick+0x150>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 808e 	bne.w	8002eb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <xTaskIncrementTick+0x154>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d9c:	4a4d      	ldr	r2, [pc, #308]	; (8002ed4 <xTaskIncrementTick+0x154>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d121      	bne.n	8002dec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002da8:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <xTaskIncrementTick+0x4a>
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	b672      	cpsid	i
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	b662      	cpsie	i
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	e7fe      	b.n	8002dc8 <xTaskIncrementTick+0x48>
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	4b42      	ldr	r3, [pc, #264]	; (8002edc <xTaskIncrementTick+0x15c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a40      	ldr	r2, [pc, #256]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4a40      	ldr	r2, [pc, #256]	; (8002edc <xTaskIncrementTick+0x15c>)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <xTaskIncrementTick+0x160>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	4a3e      	ldr	r2, [pc, #248]	; (8002ee0 <xTaskIncrementTick+0x160>)
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	f000 faa8 	bl	800333c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dec:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <xTaskIncrementTick+0x164>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d34d      	bcc.n	8002e92 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <xTaskIncrementTick+0x84>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <xTaskIncrementTick+0x86>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <xTaskIncrementTick+0x164>)
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e10:	601a      	str	r2, [r3, #0]
					break;
 8002e12:	e03e      	b.n	8002e92 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d203      	bcs.n	8002e34 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ee4 <xTaskIncrementTick+0x164>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
						break;
 8002e32:	e02e      	b.n	8002e92 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe ff37 	bl	8001cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ff2e 	bl	8001cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <xTaskIncrementTick+0x168>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <xTaskIncrementTick+0x168>)
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <xTaskIncrementTick+0x16c>)
 8002e70:	441a      	add	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3304      	adds	r3, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe feba 	bl	8001bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <xTaskIncrementTick+0x170>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d3b4      	bcc.n	8002df6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e90:	e7b1      	b.n	8002df6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <xTaskIncrementTick+0x170>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	4914      	ldr	r1, [pc, #80]	; (8002eec <xTaskIncrementTick+0x16c>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d907      	bls.n	8002eba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e004      	b.n	8002eba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <xTaskIncrementTick+0x174>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <xTaskIncrementTick+0x174>)
 8002eb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <xTaskIncrementTick+0x178>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ec6:	697b      	ldr	r3, [r7, #20]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000150 	.word	0x20000150
 8002ed4:	2000012c 	.word	0x2000012c
 8002ed8:	200000e0 	.word	0x200000e0
 8002edc:	200000e4 	.word	0x200000e4
 8002ee0:	20000140 	.word	0x20000140
 8002ee4:	20000148 	.word	0x20000148
 8002ee8:	20000130 	.word	0x20000130
 8002eec:	2000002c 	.word	0x2000002c
 8002ef0:	20000028 	.word	0x20000028
 8002ef4:	20000138 	.word	0x20000138
 8002ef8:	2000013c 	.word	0x2000013c

08002efc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <vTaskSwitchContext+0xa4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <vTaskSwitchContext+0xa8>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f10:	e040      	b.n	8002f94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <vTaskSwitchContext+0xa8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <vTaskSwitchContext+0xac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	f1c3 031f 	rsb	r3, r3, #31
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	491f      	ldr	r1, [pc, #124]	; (8002fac <vTaskSwitchContext+0xb0>)
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	b672      	cpsid	i
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	b662      	cpsie	i
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	e7fe      	b.n	8002f58 <vTaskSwitchContext+0x5c>
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <vTaskSwitchContext+0xb0>)
 8002f66:	4413      	add	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d104      	bne.n	8002f8a <vTaskSwitchContext+0x8e>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <vTaskSwitchContext+0xb4>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	20000150 	.word	0x20000150
 8002fa4:	2000013c 	.word	0x2000013c
 8002fa8:	20000130 	.word	0x20000130
 8002fac:	2000002c 	.word	0x2000002c
 8002fb0:	20000028 	.word	0x20000028

08002fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <vTaskPlaceOnEventList+0x28>
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	b672      	cpsid	i
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	b662      	cpsie	i
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e7fe      	b.n	8002fda <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <vTaskPlaceOnEventList+0x48>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe fe28 	bl	8001c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fea:	2101      	movs	r1, #1
 8002fec:	6838      	ldr	r0, [r7, #0]
 8002fee:	f000 fbad 	bl	800374c <prvAddCurrentTaskToDelayedList>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000028 	.word	0x20000028

08003000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <xTaskRemoveFromEventList+0x2e>
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	b672      	cpsid	i
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	b662      	cpsie	i
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e7fe      	b.n	800302c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3318      	adds	r3, #24
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fe3a 	bl	8001cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <xTaskRemoveFromEventList+0xb0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11c      	bne.n	800307a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fe31 	bl	8001cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	2201      	movs	r2, #1
 8003050:	409a      	lsls	r2, r3
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <xTaskRemoveFromEventList+0xb4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <xTaskRemoveFromEventList+0xb4>)
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <xTaskRemoveFromEventList+0xb8>)
 800306a:	441a      	add	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3304      	adds	r3, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7fe fdbd 	bl	8001bf2 <vListInsertEnd>
 8003078:	e005      	b.n	8003086 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	3318      	adds	r3, #24
 800307e:	4619      	mov	r1, r3
 8003080:	480e      	ldr	r0, [pc, #56]	; (80030bc <xTaskRemoveFromEventList+0xbc>)
 8003082:	f7fe fdb6 	bl	8001bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <xTaskRemoveFromEventList+0xc0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d905      	bls.n	80030a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <xTaskRemoveFromEventList+0xc4>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e001      	b.n	80030a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80030a4:	697b      	ldr	r3, [r7, #20]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000150 	.word	0x20000150
 80030b4:	20000130 	.word	0x20000130
 80030b8:	2000002c 	.word	0x2000002c
 80030bc:	200000e8 	.word	0x200000e8
 80030c0:	20000028 	.word	0x20000028
 80030c4:	2000013c 	.word	0x2000013c

080030c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <vTaskInternalSetTimeOutState+0x24>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <vTaskInternalSetTimeOutState+0x28>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000140 	.word	0x20000140
 80030f0:	2000012c 	.word	0x2000012c

080030f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <xTaskCheckForTimeOut+0x28>
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	b672      	cpsid	i
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	b662      	cpsie	i
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e7fe      	b.n	800311a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <xTaskCheckForTimeOut+0x46>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	b672      	cpsid	i
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	b662      	cpsie	i
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e7fe      	b.n	8003138 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800313a:	f000 fc75 	bl	8003a28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800313e:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <xTaskCheckForTimeOut+0xc0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d102      	bne.n	800315e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e023      	b.n	80031a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <xTaskCheckForTimeOut+0xc4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d007      	beq.n	800317a <xTaskCheckForTimeOut+0x86>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003174:	2301      	movs	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	e015      	b.n	80031a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	429a      	cmp	r2, r3
 8003182:	d20b      	bcs.n	800319c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff99 	bl	80030c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e004      	b.n	80031a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80031a6:	f000 fc71 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 80031aa:	69fb      	ldr	r3, [r7, #28]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	2000012c 	.word	0x2000012c
 80031b8:	20000140 	.word	0x20000140

080031bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <vTaskMissedYield+0x14>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	2000013c 	.word	0x2000013c

080031d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031dc:	f000 f852 	bl	8003284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <prvIdleTask+0x28>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d9f9      	bls.n	80031dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <prvIdleTask+0x2c>)
 80031ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031f8:	e7f0      	b.n	80031dc <prvIdleTask+0x8>
 80031fa:	bf00      	nop
 80031fc:	2000002c 	.word	0x2000002c
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	e00c      	b.n	800322a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <prvInitialiseTaskLists+0x60>)
 800321c:	4413      	add	r3, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fcba 	bl	8001b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3301      	adds	r3, #1
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d9ef      	bls.n	8003210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003230:	480d      	ldr	r0, [pc, #52]	; (8003268 <prvInitialiseTaskLists+0x64>)
 8003232:	f7fe fcb1 	bl	8001b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003236:	480d      	ldr	r0, [pc, #52]	; (800326c <prvInitialiseTaskLists+0x68>)
 8003238:	f7fe fcae 	bl	8001b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800323c:	480c      	ldr	r0, [pc, #48]	; (8003270 <prvInitialiseTaskLists+0x6c>)
 800323e:	f7fe fcab 	bl	8001b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003242:	480c      	ldr	r0, [pc, #48]	; (8003274 <prvInitialiseTaskLists+0x70>)
 8003244:	f7fe fca8 	bl	8001b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003248:	480b      	ldr	r0, [pc, #44]	; (8003278 <prvInitialiseTaskLists+0x74>)
 800324a:	f7fe fca5 	bl	8001b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <prvInitialiseTaskLists+0x78>)
 8003250:	4a05      	ldr	r2, [pc, #20]	; (8003268 <prvInitialiseTaskLists+0x64>)
 8003252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <prvInitialiseTaskLists+0x7c>)
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <prvInitialiseTaskLists+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000002c 	.word	0x2000002c
 8003268:	200000b8 	.word	0x200000b8
 800326c:	200000cc 	.word	0x200000cc
 8003270:	200000e8 	.word	0x200000e8
 8003274:	200000fc 	.word	0x200000fc
 8003278:	20000114 	.word	0x20000114
 800327c:	200000e0 	.word	0x200000e0
 8003280:	200000e4 	.word	0x200000e4

08003284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800328a:	e019      	b.n	80032c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800328c:	f000 fbcc 	bl	8003a28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <prvCheckTasksWaitingTermination+0x4c>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fd05 	bl	8001cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <prvCheckTasksWaitingTermination+0x50>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <prvCheckTasksWaitingTermination+0x50>)
 80032aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <prvCheckTasksWaitingTermination+0x54>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <prvCheckTasksWaitingTermination+0x54>)
 80032b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032b6:	f000 fbe9 	bl	8003a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f80e 	bl	80032dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <prvCheckTasksWaitingTermination+0x54>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e1      	bne.n	800328c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200000fc 	.word	0x200000fc
 80032d4:	20000128 	.word	0x20000128
 80032d8:	20000110 	.word	0x20000110

080032dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fd82 	bl	8003dfc <vPortFree>
				vPortFree( pxTCB );
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fd7f 	bl	8003dfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032fe:	e019      	b.n	8003334 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003306:	2b01      	cmp	r3, #1
 8003308:	d103      	bne.n	8003312 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fd76 	bl	8003dfc <vPortFree>
	}
 8003310:	e010      	b.n	8003334 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003318:	2b02      	cmp	r3, #2
 800331a:	d00b      	beq.n	8003334 <prvDeleteTCB+0x58>
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	b672      	cpsid	i
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	b662      	cpsie	i
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e7fe      	b.n	8003332 <prvDeleteTCB+0x56>
	}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <prvResetNextTaskUnblockTime+0x44>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <prvResetNextTaskUnblockTime+0x14>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <prvResetNextTaskUnblockTime+0x16>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <prvResetNextTaskUnblockTime+0x48>)
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800335e:	e008      	b.n	8003372 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <prvResetNextTaskUnblockTime+0x44>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <prvResetNextTaskUnblockTime+0x48>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200000e0 	.word	0x200000e0
 8003384:	20000148 	.word	0x20000148

08003388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <xTaskGetSchedulerState+0x34>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003396:	2301      	movs	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	e008      	b.n	80033ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <xTaskGetSchedulerState+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033a4:	2302      	movs	r3, #2
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	e001      	b.n	80033ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033ae:	687b      	ldr	r3, [r7, #4]
	}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000134 	.word	0x20000134
 80033c0:	20000150 	.word	0x20000150

080033c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d06e      	beq.n	80034b8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033de:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <xTaskPriorityInherit+0x100>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d25e      	bcs.n	80034a6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db06      	blt.n	80033fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <xTaskPriorityInherit+0x100>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f1c3 0207 	rsb	r2, r3, #7
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6959      	ldr	r1, [r3, #20]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a2e      	ldr	r2, [pc, #184]	; (80034c8 <xTaskPriorityInherit+0x104>)
 8003410:	4413      	add	r3, r2
 8003412:	4299      	cmp	r1, r3
 8003414:	d101      	bne.n	800341a <xTaskPriorityInherit+0x56>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xTaskPriorityInherit+0x58>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d03a      	beq.n	8003496 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fc41 	bl	8001cac <uxListRemove>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d115      	bne.n	800345c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	4924      	ldr	r1, [pc, #144]	; (80034c8 <xTaskPriorityInherit+0x104>)
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <xTaskPriorityInherit+0x98>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	2201      	movs	r2, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43da      	mvns	r2, r3
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <xTaskPriorityInherit+0x108>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4013      	ands	r3, r2
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <xTaskPriorityInherit+0x108>)
 800345a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <xTaskPriorityInherit+0x100>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	2201      	movs	r2, #1
 800346c:	409a      	lsls	r2, r3
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <xTaskPriorityInherit+0x108>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	4a15      	ldr	r2, [pc, #84]	; (80034cc <xTaskPriorityInherit+0x108>)
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <xTaskPriorityInherit+0x104>)
 8003486:	441a      	add	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7fe fbaf 	bl	8001bf2 <vListInsertEnd>
 8003494:	e004      	b.n	80034a0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003496:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <xTaskPriorityInherit+0x100>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e008      	b.n	80034b8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <xTaskPriorityInherit+0x100>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d201      	bcs.n	80034b8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034b8:	68fb      	ldr	r3, [r7, #12]
	}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000028 	.word	0x20000028
 80034c8:	2000002c 	.word	0x2000002c
 80034cc:	20000130 	.word	0x20000130

080034d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d070      	beq.n	80035c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <xTaskPriorityDisinherit+0x104>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d00b      	beq.n	8003508 <xTaskPriorityDisinherit+0x38>
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	b672      	cpsid	i
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	b662      	cpsie	i
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e7fe      	b.n	8003506 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <xTaskPriorityDisinherit+0x58>
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	b672      	cpsid	i
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	b662      	cpsie	i
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	e7fe      	b.n	8003526 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	429a      	cmp	r2, r3
 800353c:	d044      	beq.n	80035c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d140      	bne.n	80035c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fbae 	bl	8001cac <uxListRemove>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d115      	bne.n	8003582 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355a:	491f      	ldr	r1, [pc, #124]	; (80035d8 <xTaskPriorityDisinherit+0x108>)
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <xTaskPriorityDisinherit+0xb2>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	2201      	movs	r2, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <xTaskPriorityDisinherit+0x10c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4013      	ands	r3, r2
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <xTaskPriorityDisinherit+0x10c>)
 8003580:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	f1c3 0207 	rsb	r2, r3, #7
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <xTaskPriorityDisinherit+0x10c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <xTaskPriorityDisinherit+0x10c>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <xTaskPriorityDisinherit+0x108>)
 80035b6:	441a      	add	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7fe fb17 	bl	8001bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035c8:	697b      	ldr	r3, [r7, #20]
	}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000028 	.word	0x20000028
 80035d8:	2000002c 	.word	0x2000002c
 80035dc:	20000130 	.word	0x20000130

080035e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 808a 	beq.w	800370e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	b672      	cpsid	i
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	b662      	cpsie	i
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e7fe      	b.n	8003618 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d902      	bls.n	800362a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	e002      	b.n	8003630 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	429a      	cmp	r2, r3
 8003638:	d069      	beq.n	800370e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	d164      	bne.n	800370e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10b      	bne.n	8003666 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	b672      	cpsid	i
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	b662      	cpsie	i
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	e7fe      	b.n	8003664 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db04      	blt.n	8003684 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f1c3 0207 	rsb	r2, r3, #7
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6959      	ldr	r1, [r3, #20]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003694:	4413      	add	r3, r2
 8003696:	4299      	cmp	r1, r3
 8003698:	d101      	bne.n	800369e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d034      	beq.n	800370e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe faff 	bl	8001cac <uxListRemove>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d115      	bne.n	80036e0 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4918      	ldr	r1, [pc, #96]	; (800371c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43da      	mvns	r2, r3
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4013      	ands	r3, r2
 80036dc:	4a10      	ldr	r2, [pc, #64]	; (8003720 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80036de:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2201      	movs	r2, #1
 80036e6:	409a      	lsls	r2, r3
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003700:	441a      	add	r2, r3
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3304      	adds	r3, #4
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fe fa72 	bl	8001bf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000028 	.word	0x20000028
 800371c:	2000002c 	.word	0x2000002c
 8003720:	20000130 	.word	0x20000130

08003724 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <pvTaskIncrementMutexHeldCount+0x24>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <pvTaskIncrementMutexHeldCount+0x24>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003736:	3201      	adds	r2, #1
 8003738:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800373a:	4b03      	ldr	r3, [pc, #12]	; (8003748 <pvTaskIncrementMutexHeldCount+0x24>)
 800373c:	681b      	ldr	r3, [r3, #0]
	}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000028 	.word	0x20000028

0800374c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe faa2 	bl	8001cac <uxListRemove>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2201      	movs	r2, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	4b21      	ldr	r3, [pc, #132]	; (8003804 <prvAddCurrentTaskToDelayedList+0xb8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4013      	ands	r3, r2
 8003782:	4a20      	ldr	r2, [pc, #128]	; (8003804 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003784:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d10a      	bne.n	80037a4 <prvAddCurrentTaskToDelayedList+0x58>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3304      	adds	r3, #4
 800379a:	4619      	mov	r1, r3
 800379c:	481a      	ldr	r0, [pc, #104]	; (8003808 <prvAddCurrentTaskToDelayedList+0xbc>)
 800379e:	f7fe fa28 	bl	8001bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037a2:	e026      	b.n	80037f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d209      	bcs.n	80037d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <prvAddCurrentTaskToDelayedList+0xc0>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe fa36 	bl	8001c3a <vListInsert>
}
 80037ce:	e010      	b.n	80037f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fe fa2c 	bl	8001c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d202      	bcs.n	80037f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6013      	str	r3, [r2, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2000012c 	.word	0x2000012c
 8003800:	20000028 	.word	0x20000028
 8003804:	20000130 	.word	0x20000130
 8003808:	20000114 	.word	0x20000114
 800380c:	200000e4 	.word	0x200000e4
 8003810:	200000e0 	.word	0x200000e0
 8003814:	20000148 	.word	0x20000148

08003818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3b04      	subs	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3b04      	subs	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f023 0201 	bic.w	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3b04      	subs	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <pxPortInitialiseStack+0x64>)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3b14      	subs	r3, #20
 8003852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b04      	subs	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f06f 0202 	mvn.w	r2, #2
 8003866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3b20      	subs	r3, #32
 800386c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	08003881 	.word	0x08003881

08003880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <prvTaskExitError+0x58>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d00b      	beq.n	80038ac <prvTaskExitError+0x2c>
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	b672      	cpsid	i
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	b662      	cpsie	i
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e7fe      	b.n	80038aa <prvTaskExitError+0x2a>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	b672      	cpsid	i
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	b662      	cpsie	i
 80038c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038c2:	bf00      	nop
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0fc      	beq.n	80038c4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000004 	.word	0x20000004
 80038dc:	00000000 	.word	0x00000000

080038e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <pxCurrentTCBConst2>)
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	6808      	ldr	r0, [r1, #0]
 80038e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ea:	f380 8809 	msr	PSP, r0
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f380 8811 	msr	BASEPRI, r0
 80038fa:	4770      	bx	lr
 80038fc:	f3af 8000 	nop.w

08003900 <pxCurrentTCBConst2>:
 8003900:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop

08003908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <prvPortStartFirstTask+0x24>)
 800390a:	6800      	ldr	r0, [r0, #0]
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f380 8808 	msr	MSP, r0
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f380 8814 	msr	CONTROL, r0
 800391a:	b662      	cpsie	i
 800391c:	b661      	cpsie	f
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	df00      	svc	0
 8003928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800392a:	bf00      	nop
 800392c:	e000ed08 	.word	0xe000ed08

08003930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <xPortStartScheduler+0xe0>)
 8003938:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <xPortStartScheduler+0xe4>)
 800395c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800395e:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <xPortStartScheduler+0xe8>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003964:	e009      	b.n	800397a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003966:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <xPortStartScheduler+0xe8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3b01      	subs	r3, #1
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <xPortStartScheduler+0xe8>)
 800396e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b80      	cmp	r3, #128	; 0x80
 8003984:	d0ef      	beq.n	8003966 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <xPortStartScheduler+0xe8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1c3 0307 	rsb	r3, r3, #7
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00b      	beq.n	80039aa <xPortStartScheduler+0x7a>
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	b672      	cpsid	i
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	b662      	cpsie	i
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	e7fe      	b.n	80039a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <xPortStartScheduler+0xe8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <xPortStartScheduler+0xe8>)
 80039b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <xPortStartScheduler+0xe8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <xPortStartScheduler+0xe8>)
 80039be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <xPortStartScheduler+0xec>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <xPortStartScheduler+0xec>)
 80039ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <xPortStartScheduler+0xec>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <xPortStartScheduler+0xec>)
 80039da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039e0:	f000 f8d4 	bl	8003b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <xPortStartScheduler+0xf0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80039ea:	f000 f8f3 	bl	8003bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <xPortStartScheduler+0xf4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <xPortStartScheduler+0xf4>)
 80039f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039fa:	f7ff ff85 	bl	8003908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039fe:	f7ff fa7d 	bl	8002efc <vTaskSwitchContext>
	prvTaskExitError();
 8003a02:	f7ff ff3d 	bl	8003880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	e000e400 	.word	0xe000e400
 8003a14:	20000154 	.word	0x20000154
 8003a18:	20000158 	.word	0x20000158
 8003a1c:	e000ed20 	.word	0xe000ed20
 8003a20:	20000004 	.word	0x20000004
 8003a24:	e000ef34 	.word	0xe000ef34

08003a28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	b672      	cpsid	i
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	b662      	cpsie	i
 8003a42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <vPortEnterCritical+0x5c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <vPortEnterCritical+0x5c>)
 8003a4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <vPortEnterCritical+0x5c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d110      	bne.n	8003a78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <vPortEnterCritical+0x60>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <vPortEnterCritical+0x50>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	b672      	cpsid	i
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	b662      	cpsie	i
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	e7fe      	b.n	8003a76 <vPortEnterCritical+0x4e>
	}
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	20000004 	.word	0x20000004
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <vPortExitCritical+0x50>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <vPortExitCritical+0x26>
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	b672      	cpsid	i
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	b662      	cpsie	i
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	e7fe      	b.n	8003ab0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <vPortExitCritical+0x50>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	4a08      	ldr	r2, [pc, #32]	; (8003adc <vPortExitCritical+0x50>)
 8003aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <vPortExitCritical+0x50>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <vPortExitCritical+0x42>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000004 	.word	0x20000004

08003ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ae0:	f3ef 8009 	mrs	r0, PSP
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <pxCurrentTCBConst>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	f01e 0f10 	tst.w	lr, #16
 8003af0:	bf08      	it	eq
 8003af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	6010      	str	r0, [r2, #0]
 8003afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b04:	b672      	cpsid	i
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	b662      	cpsie	i
 8003b14:	f7ff f9f2 	bl	8002efc <vTaskSwitchContext>
 8003b18:	f04f 0000 	mov.w	r0, #0
 8003b1c:	f380 8811 	msr	BASEPRI, r0
 8003b20:	bc09      	pop	{r0, r3}
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	6808      	ldr	r0, [r1, #0]
 8003b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2a:	f01e 0f10 	tst.w	lr, #16
 8003b2e:	bf08      	it	eq
 8003b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b34:	f380 8809 	msr	PSP, r0
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <pxCurrentTCBConst>:
 8003b40:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop

08003b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	b672      	cpsid	i
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	b662      	cpsie	i
 8003b62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b64:	f7ff f90c 	bl	8002d80 <xTaskIncrementTick>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <SysTick_Handler+0x40>)
 8003b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <vPortSetupTimerInterrupt+0x34>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <vPortSetupTimerInterrupt+0x38>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <vPortSetupTimerInterrupt+0x3c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <vPortSetupTimerInterrupt+0x40>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	4a09      	ldr	r2, [pc, #36]	; (8003bd0 <vPortSetupTimerInterrupt+0x44>)
 8003baa:	3b01      	subs	r3, #1
 8003bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <vPortSetupTimerInterrupt+0x34>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000e010 	.word	0xe000e010
 8003bc4:	e000e018 	.word	0xe000e018
 8003bc8:	20000008 	.word	0x20000008
 8003bcc:	10624dd3 	.word	0x10624dd3
 8003bd0:	e000e014 	.word	0xe000e014

08003bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003be4 <vPortEnableVFP+0x10>
 8003bd8:	6801      	ldr	r1, [r0, #0]
 8003bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bde:	6001      	str	r1, [r0, #0]
 8003be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003be2:	bf00      	nop
 8003be4:	e000ed88 	.word	0xe000ed88

08003be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003bee:	f3ef 8305 	mrs	r3, IPSR
 8003bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	d915      	bls.n	8003c26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <vPortValidateInterruptPriority+0x74>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c04:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <vPortValidateInterruptPriority+0x78>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	7afa      	ldrb	r2, [r7, #11]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d20b      	bcs.n	8003c26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	b672      	cpsid	i
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	b662      	cpsie	i
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	e7fe      	b.n	8003c24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <vPortValidateInterruptPriority+0x7c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <vPortValidateInterruptPriority+0x80>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d90b      	bls.n	8003c4e <vPortValidateInterruptPriority+0x66>
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	b672      	cpsid	i
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	b662      	cpsie	i
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	e7fe      	b.n	8003c4c <vPortValidateInterruptPriority+0x64>
	}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e3f0 	.word	0xe000e3f0
 8003c60:	20000154 	.word	0x20000154
 8003c64:	e000ed0c 	.word	0xe000ed0c
 8003c68:	20000158 	.word	0x20000158

08003c6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c78:	f7fe ffc6 	bl	8002c08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c7c:	4b5a      	ldr	r3, [pc, #360]	; (8003de8 <pvPortMalloc+0x17c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c84:	f000 f916 	bl	8003eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c88:	4b58      	ldr	r3, [pc, #352]	; (8003dec <pvPortMalloc+0x180>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f040 8090 	bne.w	8003db6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01e      	beq.n	8003cda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d015      	beq.n	8003cda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <pvPortMalloc+0x6e>
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	b672      	cpsid	i
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	b662      	cpsie	i
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e7fe      	b.n	8003cd8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d06a      	beq.n	8003db6 <pvPortMalloc+0x14a>
 8003ce0:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <pvPortMalloc+0x184>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d865      	bhi.n	8003db6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cea:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <pvPortMalloc+0x188>)
 8003cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <pvPortMalloc+0x188>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf4:	e004      	b.n	8003d00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d903      	bls.n	8003d12 <pvPortMalloc+0xa6>
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f1      	bne.n	8003cf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d12:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <pvPortMalloc+0x17c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d04c      	beq.n	8003db6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2208      	movs	r2, #8
 8003d22:	4413      	add	r3, r2
 8003d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	2308      	movs	r3, #8
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d920      	bls.n	8003d80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <pvPortMalloc+0xfc>
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	b672      	cpsid	i
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	b662      	cpsie	i
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e7fe      	b.n	8003d66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d7a:	69b8      	ldr	r0, [r7, #24]
 8003d7c:	f000 f8fc 	bl	8003f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <pvPortMalloc+0x184>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <pvPortMalloc+0x184>)
 8003d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <pvPortMalloc+0x184>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <pvPortMalloc+0x18c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d203      	bcs.n	8003da2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <pvPortMalloc+0x184>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <pvPortMalloc+0x18c>)
 8003da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <pvPortMalloc+0x180>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003db6:	f7fe ff35 	bl	8002c24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <pvPortMalloc+0x170>
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	b672      	cpsid	i
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	b662      	cpsie	i
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e7fe      	b.n	8003dda <pvPortMalloc+0x16e>
	return pvReturn;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	; 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20003d64 	.word	0x20003d64
 8003dec:	20003d70 	.word	0x20003d70
 8003df0:	20003d68 	.word	0x20003d68
 8003df4:	20003d5c 	.word	0x20003d5c
 8003df8:	20003d6c 	.word	0x20003d6c

08003dfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04a      	beq.n	8003ea4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e0e:	2308      	movs	r3, #8
 8003e10:	425b      	negs	r3, r3
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4413      	add	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4b22      	ldr	r3, [pc, #136]	; (8003eac <vPortFree+0xb0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <vPortFree+0x46>
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	b672      	cpsid	i
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	b662      	cpsie	i
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e7fe      	b.n	8003e40 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <vPortFree+0x66>
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	b672      	cpsid	i
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	b662      	cpsie	i
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	e7fe      	b.n	8003e60 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <vPortFree+0xb0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d019      	beq.n	8003ea4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d115      	bne.n	8003ea4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <vPortFree+0xb0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e88:	f7fe febe 	bl	8002c08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <vPortFree+0xb4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <vPortFree+0xb4>)
 8003e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e9a:	6938      	ldr	r0, [r7, #16]
 8003e9c:	f000 f86c 	bl	8003f78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ea0:	f7fe fec0 	bl	8002c24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20003d70 	.word	0x20003d70
 8003eb0:	20003d68 	.word	0x20003d68

08003eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <prvHeapInit+0xac>)
 8003ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <prvHeapInit+0xac>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <prvHeapInit+0xb0>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <prvHeapInit+0xb0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4413      	add	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f00:	2208      	movs	r2, #8
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0307 	bic.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <prvHeapInit+0xb4>)
 8003f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <prvHeapInit+0xb4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <prvHeapInit+0xb4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	1ad2      	subs	r2, r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <prvHeapInit+0xb4>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <prvHeapInit+0xb8>)
 8003f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <prvHeapInit+0xbc>)
 8003f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <prvHeapInit+0xc0>)
 8003f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f52:	601a      	str	r2, [r3, #0]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	2000015c 	.word	0x2000015c
 8003f64:	20003d5c 	.word	0x20003d5c
 8003f68:	20003d64 	.word	0x20003d64
 8003f6c:	20003d6c 	.word	0x20003d6c
 8003f70:	20003d68 	.word	0x20003d68
 8003f74:	20003d70 	.word	0x20003d70

08003f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <prvInsertBlockIntoFreeList+0xac>)
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e002      	b.n	8003f8c <prvInsertBlockIntoFreeList+0x14>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d8f7      	bhi.n	8003f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d108      	bne.n	8003fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d118      	bne.n	8004000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <prvInsertBlockIntoFreeList+0xb0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d00d      	beq.n	8003ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e008      	b.n	8004008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <prvInsertBlockIntoFreeList+0xb0>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e003      	b.n	8004008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d002      	beq.n	8004016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20003d5c 	.word	0x20003d5c
 8004028:	20003d64 	.word	0x20003d64

0800402c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a07      	ldr	r2, [pc, #28]	; (8004058 <vApplicationGetIdleTaskMemory+0x2c>)
 800403c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4a06      	ldr	r2, [pc, #24]	; (800405c <vApplicationGetIdleTaskMemory+0x30>)
 8004042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20003d74 	.word	0x20003d74
 800405c:	20003dc8 	.word	0x20003dc8

08004060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b09a      	sub	sp, #104	; 0x68
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004066:	f7fc fa6b 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800406a:	f000 f875 	bl	8004158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800406e:	f000 f8cf 	bl	8004210 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of blue2greenEventFlag */
  osSemaphoreDef(blue2greenEventFlag);
 8004072:	2300      	movs	r3, #0
 8004074:	663b      	str	r3, [r7, #96]	; 0x60
 8004076:	2300      	movs	r3, #0
 8004078:	667b      	str	r3, [r7, #100]	; 0x64
  blue2greenEventFlagHandle = osSemaphoreCreate(osSemaphore(blue2greenEventFlag), 1);
 800407a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800407e:	2101      	movs	r1, #1
 8004080:	4618      	mov	r0, r3
 8004082:	f7fd fcd2 	bl	8001a2a <osSemaphoreCreate>
 8004086:	4602      	mov	r2, r0
 8004088:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <main+0xd8>)
 800408a:	601a      	str	r2, [r3, #0]

  /* definition and creation of blue2redEventFlag */
  osSemaphoreDef(blue2redEventFlag);
 800408c:	2300      	movs	r3, #0
 800408e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004090:	2300      	movs	r3, #0
 8004092:	65fb      	str	r3, [r7, #92]	; 0x5c
  blue2redEventFlagHandle = osSemaphoreCreate(osSemaphore(blue2redEventFlag), 1);
 8004094:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd fcc5 	bl	8001a2a <osSemaphoreCreate>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <main+0xdc>)
 80040a4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreWait(blue2greenEventFlagHandle, portMAX_DELAY);
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <main+0xd8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f04f 31ff 	mov.w	r1, #4294967295
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fcee 	bl	8001a90 <osSemaphoreWait>
  osSemaphoreWait(blue2redEventFlagHandle, portMAX_DELAY);
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <main+0xdc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f04f 31ff 	mov.w	r1, #4294967295
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd fce7 	bl	8001a90 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ToggleGreen */
  osThreadDef(ToggleGreen, StartToggleGreen, osPriorityNormal, 0, 128);
 80040c2:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <main+0xe0>)
 80040c4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80040c8:	461d      	mov	r5, r3
 80040ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToggleGreenHandle = osThreadCreate(osThread(ToggleGreen), NULL);
 80040d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fc58 	bl	8001992 <osThreadCreate>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <main+0xe4>)
 80040e6:	601a      	str	r2, [r3, #0]

  /* definition and creation of ToggleRed */
  osThreadDef(ToggleRed, StartToggleRed, osPriorityNormal, 0, 128);
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <main+0xe8>)
 80040ea:	f107 0420 	add.w	r4, r7, #32
 80040ee:	461d      	mov	r5, r3
 80040f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToggleRedHandle = osThreadCreate(osThread(ToggleRed), NULL);
 80040fc:	f107 0320 	add.w	r3, r7, #32
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd fc45 	bl	8001992 <osThreadCreate>
 8004108:	4602      	mov	r2, r0
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <main+0xec>)
 800410c:	601a      	str	r2, [r3, #0]

  /* definition and creation of ToggleBlue */
  osThreadDef(ToggleBlue, StartToggleBlue, osPriorityNormal, 0, 128);
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <main+0xf0>)
 8004110:	1d3c      	adds	r4, r7, #4
 8004112:	461d      	mov	r5, r3
 8004114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800411c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToggleBlueHandle = osThreadCreate(osThread(ToggleBlue), NULL);
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd fc34 	bl	8001992 <osThreadCreate>
 800412a:	4602      	mov	r2, r0
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <main+0xf4>)
 800412e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004130:	f7fd fc28 	bl	8001984 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004134:	e7fe      	b.n	8004134 <main+0xd4>
 8004136:	bf00      	nop
 8004138:	20003fdc 	.word	0x20003fdc
 800413c:	20003fd8 	.word	0x20003fd8
 8004140:	080046ac 	.word	0x080046ac
 8004144:	20003fd4 	.word	0x20003fd4
 8004148:	080046d4 	.word	0x080046d4
 800414c:	20003fd0 	.word	0x20003fd0
 8004150:	080046fc 	.word	0x080046fc
 8004154:	20003fcc 	.word	0x20003fcc

08004158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b094      	sub	sp, #80	; 0x50
 800415c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800415e:	f107 031c 	add.w	r3, r7, #28
 8004162:	2234      	movs	r2, #52	; 0x34
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fa81 	bl	800466e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <SystemClock_Config+0xb0>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <SystemClock_Config+0xb0>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	6413      	str	r3, [r2, #64]	; 0x40
 8004188:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <SystemClock_Config+0xb0>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <SystemClock_Config+0xb4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <SystemClock_Config+0xb4>)
 800419e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <SystemClock_Config+0xb4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041b0:	2302      	movs	r3, #2
 80041b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041b4:	2301      	movs	r3, #1
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041b8:	2310      	movs	r3, #16
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041bc:	2300      	movs	r3, #0
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041c0:	f107 031c 	add.w	r3, r7, #28
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc fccb 	bl	8000b60 <HAL_RCC_OscConfig>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80041d0:	f000 f914 	bl	80043fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041d4:	230f      	movs	r3, #15
 80041d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc ff27 	bl	8001044 <HAL_RCC_ClockConfig>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80041fc:	f000 f8fe 	bl	80043fc <Error_Handler>
  }
}
 8004200:	bf00      	nop
 8004202:	3750      	adds	r7, #80	; 0x50
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	40007000 	.word	0x40007000

08004210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004216:	f107 030c 	add.w	r3, r7, #12
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <MX_GPIO_Init+0xd8>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <MX_GPIO_Init+0xd8>)
 800422c:	f043 0320 	orr.w	r3, r3, #32
 8004230:	6313      	str	r3, [r2, #48]	; 0x30
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <MX_GPIO_Init+0xd8>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800423e:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <MX_GPIO_Init+0xd8>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <MX_GPIO_Init+0xd8>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6313      	str	r3, [r2, #48]	; 0x30
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <MX_GPIO_Init+0xd8>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <MX_GPIO_Init+0xd8>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a23      	ldr	r2, [pc, #140]	; (80042e8 <MX_GPIO_Init+0xd8>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <MX_GPIO_Init+0xd8>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EYellow_GPIO_Port, EYellow_Pin, GPIO_PIN_RESET);
 800426e:	2200      	movs	r2, #0
 8004270:	2108      	movs	r1, #8
 8004272:	481e      	ldr	r0, [pc, #120]	; (80042ec <MX_GPIO_Init+0xdc>)
 8004274:	f7fc fc40 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EBlue_Pin|ERed_Pin, GPIO_PIN_RESET);
 8004278:	2200      	movs	r2, #0
 800427a:	2109      	movs	r1, #9
 800427c:	481c      	ldr	r0, [pc, #112]	; (80042f0 <MX_GPIO_Init+0xe0>)
 800427e:	f7fc fc3b 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 8004282:	2200      	movs	r2, #0
 8004284:	2108      	movs	r1, #8
 8004286:	481b      	ldr	r0, [pc, #108]	; (80042f4 <MX_GPIO_Init+0xe4>)
 8004288:	f7fc fc36 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EYellow_Pin */
  GPIO_InitStruct.Pin = EYellow_Pin;
 800428c:	2308      	movs	r3, #8
 800428e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004290:	2301      	movs	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EYellow_GPIO_Port, &GPIO_InitStruct);
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	4619      	mov	r1, r3
 80042a2:	4812      	ldr	r0, [pc, #72]	; (80042ec <MX_GPIO_Init+0xdc>)
 80042a4:	f7fc fa7e 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EBlue_Pin ERed_Pin */
  GPIO_InitStruct.Pin = EBlue_Pin|ERed_Pin;
 80042a8:	2309      	movs	r3, #9
 80042aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	4619      	mov	r1, r3
 80042be:	480c      	ldr	r0, [pc, #48]	; (80042f0 <MX_GPIO_Init+0xe0>)
 80042c0:	f7fc fa70 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EGreen_Pin */
  GPIO_InitStruct.Pin = EGreen_Pin;
 80042c4:	2308      	movs	r3, #8
 80042c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042c8:	2301      	movs	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EGreen_GPIO_Port, &GPIO_InitStruct);
 80042d4:	f107 030c 	add.w	r3, r7, #12
 80042d8:	4619      	mov	r1, r3
 80042da:	4806      	ldr	r0, [pc, #24]	; (80042f4 <MX_GPIO_Init+0xe4>)
 80042dc:	f7fc fa62 	bl	80007a4 <HAL_GPIO_Init>

}
 80042e0:	bf00      	nop
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40021400 	.word	0x40021400
 80042f0:	40020800 	.word	0x40020800
 80042f4:	40020000 	.word	0x40020000

080042f8 <toggle>:

/* USER CODE BEGIN 4 */
void toggle(GPIO_TypeDef*  GPIOx, uint16_t GPIO_Pin, uint32_t frequency, int duration)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	460b      	mov	r3, r1
 8004306:	817b      	strh	r3, [r7, #10]
	TickType_t start = xTaskGetTickCount();
 8004308:	f7fe fd2a 	bl	8002d60 <xTaskGetTickCount>
 800430c:	6178      	str	r0, [r7, #20]

	do {
		HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	4619      	mov	r1, r3
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7fc fc09 	bl	8000b2a <HAL_GPIO_TogglePin>
		HAL_Delay(frequency);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc f93f 	bl	800059c <HAL_Delay>
	} while((xTaskGetTickCount() - start) <= duration);
 800431e:	f7fe fd1f 	bl	8002d60 <xTaskGetTickCount>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d9ef      	bls.n	800430e <toggle+0x16>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <StartToggleGreen>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartToggleGreen */
void StartToggleGreen(void const * argument)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreWait(blue2greenEventFlagHandle, portMAX_DELAY);
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <StartToggleGreen+0x28>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fba1 	bl	8001a90 <osSemaphoreWait>
		toggle(EGreen_GPIO_Port, EGreen_Pin, (uint32_t) 100, 5000);
 800434e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004352:	2264      	movs	r2, #100	; 0x64
 8004354:	2108      	movs	r1, #8
 8004356:	4803      	ldr	r0, [pc, #12]	; (8004364 <StartToggleGreen+0x2c>)
 8004358:	f7ff ffce 	bl	80042f8 <toggle>
		osSemaphoreWait(blue2greenEventFlagHandle, portMAX_DELAY);
 800435c:	e7f0      	b.n	8004340 <StartToggleGreen+0x8>
 800435e:	bf00      	nop
 8004360:	20003fdc 	.word	0x20003fdc
 8004364:	40020000 	.word	0x40020000

08004368 <StartToggleRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartToggleRed */
void StartToggleRed(void const * argument)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreWait(blue2redEventFlagHandle, portMAX_DELAY);
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <StartToggleRed+0x28>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f04f 31ff 	mov.w	r1, #4294967295
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd fb89 	bl	8001a90 <osSemaphoreWait>
		toggle(ERed_GPIO_Port, ERed_Pin, (uint32_t) 100, 5000);
 800437e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004382:	2264      	movs	r2, #100	; 0x64
 8004384:	2108      	movs	r1, #8
 8004386:	4803      	ldr	r0, [pc, #12]	; (8004394 <StartToggleRed+0x2c>)
 8004388:	f7ff ffb6 	bl	80042f8 <toggle>
		osSemaphoreWait(blue2redEventFlagHandle, portMAX_DELAY);
 800438c:	e7f0      	b.n	8004370 <StartToggleRed+0x8>
 800438e:	bf00      	nop
 8004390:	20003fd8 	.word	0x20003fd8
 8004394:	40020800 	.word	0x40020800

08004398 <StartToggleBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartToggleBlue */
void StartToggleBlue(void const * argument)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	for(;;){
		toggle(EBlue_GPIO_Port, EBlue_Pin, (uint32_t) 100, 2000);
 80043a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80043a4:	2264      	movs	r2, #100	; 0x64
 80043a6:	2101      	movs	r1, #1
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <StartToggleBlue+0x34>)
 80043aa:	f7ff ffa5 	bl	80042f8 <toggle>
		osSemaphoreRelease(blue2greenEventFlagHandle);
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <StartToggleBlue+0x38>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fbba 	bl	8001b2c <osSemaphoreRelease>
		HAL_Delay(6000);
 80043b8:	f241 7070 	movw	r0, #6000	; 0x1770
 80043bc:	f7fc f8ee 	bl	800059c <HAL_Delay>
		osSemaphoreRelease(blue2redEventFlagHandle);
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <StartToggleBlue+0x3c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fbb1 	bl	8001b2c <osSemaphoreRelease>
		toggle(EBlue_GPIO_Port, EBlue_Pin, (uint32_t) 100, 2000);
 80043ca:	e7e9      	b.n	80043a0 <StartToggleBlue+0x8>
 80043cc:	40020800 	.word	0x40020800
 80043d0:	20003fdc 	.word	0x20003fdc
 80043d4:	20003fd8 	.word	0x20003fd8

080043d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043ea:	f7fc f8b7 	bl	800055c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000

080043fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <HAL_MspInit+0x4c>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <HAL_MspInit+0x4c>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_MspInit+0x4c>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_MspInit+0x4c>)
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_MspInit+0x4c>)
 8004430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004434:	6453      	str	r3, [r2, #68]	; 0x44
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_MspInit+0x4c>)
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004442:	2200      	movs	r2, #0
 8004444:	210f      	movs	r1, #15
 8004446:	f06f 0001 	mvn.w	r0, #1
 800444a:	f7fc f981 	bl	8000750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800

0800445c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800446c:	2200      	movs	r2, #0
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	2019      	movs	r0, #25
 8004472:	f7fc f96d 	bl	8000750 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004476:	2019      	movs	r0, #25
 8004478:	f7fc f986 	bl	8000788 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_InitTick+0x9c>)
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_InitTick+0x9c>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6453      	str	r3, [r2, #68]	; 0x44
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_InitTick+0x9c>)
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004494:	f107 0210 	add.w	r2, r7, #16
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc ffae 	bl	8001400 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fc ff98 	bl	80013d8 <HAL_RCC_GetPCLK2Freq>
 80044a8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	4a13      	ldr	r2, [pc, #76]	; (80044fc <HAL_InitTick+0xa0>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0c9b      	lsrs	r3, r3, #18
 80044b4:	3b01      	subs	r3, #1
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_InitTick+0xa4>)
 80044ba:	4a12      	ldr	r2, [pc, #72]	; (8004504 <HAL_InitTick+0xa8>)
 80044bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <HAL_InitTick+0xa4>)
 80044c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <HAL_InitTick+0xa4>)
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_InitTick+0xa4>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_InitTick+0xa4>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80044d8:	4809      	ldr	r0, [pc, #36]	; (8004500 <HAL_InitTick+0xa4>)
 80044da:	f7fc ffc3 	bl	8001464 <HAL_TIM_Base_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80044e4:	4806      	ldr	r0, [pc, #24]	; (8004500 <HAL_InitTick+0xa4>)
 80044e6:	f7fc fff3 	bl	80014d0 <HAL_TIM_Base_Start_IT>
 80044ea:	4603      	mov	r3, r0
 80044ec:	e000      	b.n	80044f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3730      	adds	r7, #48	; 0x30
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	431bde83 	.word	0x431bde83
 8004500:	20003fe0 	.word	0x20003fe0
 8004504:	40010000 	.word	0x40010000

08004508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800451a:	e7fe      	b.n	800451a <HardFault_Handler+0x4>

0800451c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004520:	e7fe      	b.n	8004520 <MemManage_Handler+0x4>

08004522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004526:	e7fe      	b.n	8004526 <BusFault_Handler+0x4>

08004528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800452c:	e7fe      	b.n	800452c <UsageFault_Handler+0x4>

0800452e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004542:	f7fc ffef 	bl	8001524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20003fe0 	.word	0x20003fe0

08004550 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <SystemInit+0x5c>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	4a14      	ldr	r2, [pc, #80]	; (80045ac <SystemInit+0x5c>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <SystemInit+0x60>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <SystemInit+0x60>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <SystemInit+0x60>)
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <SystemInit+0x60>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	490d      	ldr	r1, [pc, #52]	; (80045b0 <SystemInit+0x60>)
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <SystemInit+0x64>)
 800457e:	4013      	ands	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <SystemInit+0x60>)
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <SystemInit+0x68>)
 8004586:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <SystemInit+0x60>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <SystemInit+0x60>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004592:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <SystemInit+0x60>)
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <SystemInit+0x5c>)
 800459c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045a0:	609a      	str	r2, [r3, #8]
#endif
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	fef6ffff 	.word	0xfef6ffff
 80045b8:	24003010 	.word	0x24003010

080045bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045c2:	e003      	b.n	80045cc <LoopCopyDataInit>

080045c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045ca:	3104      	adds	r1, #4

080045cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045cc:	480b      	ldr	r0, [pc, #44]	; (80045fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045d4:	d3f6      	bcc.n	80045c4 <CopyDataInit>
  ldr  r2, =_sbss
 80045d6:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045d8:	e002      	b.n	80045e0 <LoopFillZerobss>

080045da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045dc:	f842 3b04 	str.w	r3, [r2], #4

080045e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045e4:	d3f9      	bcc.n	80045da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045e6:	f7ff ffb3 	bl	8004550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ea:	f000 f811 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ee:	f7ff fd37 	bl	8004060 <main>
  bx  lr    
 80045f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045f4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80045f8:	08004740 	.word	0x08004740
  ldr  r0, =_sdata
 80045fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004600:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004604:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004608:	20004020 	.word	0x20004020

0800460c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800460c:	e7fe      	b.n	800460c <ADC_IRQHandler>
	...

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4e0d      	ldr	r6, [pc, #52]	; (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	; (800464c <__libc_init_array+0x3c>)
 8004616:	1ba4      	subs	r4, r4, r6
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2500      	movs	r5, #0
 800461c:	42a5      	cmp	r5, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4e0b      	ldr	r6, [pc, #44]	; (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	; (8004654 <__libc_init_array+0x44>)
 8004624:	f000 f82c 	bl	8004680 <_init>
 8004628:	1ba4      	subs	r4, r4, r6
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2500      	movs	r5, #0
 800462e:	42a5      	cmp	r5, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004638:	4798      	blx	r3
 800463a:	3501      	adds	r5, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004642:	4798      	blx	r3
 8004644:	3501      	adds	r5, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	08004738 	.word	0x08004738
 800464c:	08004738 	.word	0x08004738
 8004650:	08004738 	.word	0x08004738
 8004654:	0800473c 	.word	0x0800473c

08004658 <memcpy>:
 8004658:	b510      	push	{r4, lr}
 800465a:	1e43      	subs	r3, r0, #1
 800465c:	440a      	add	r2, r1
 800465e:	4291      	cmp	r1, r2
 8004660:	d100      	bne.n	8004664 <memcpy+0xc>
 8004662:	bd10      	pop	{r4, pc}
 8004664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800466c:	e7f7      	b.n	800465e <memcpy+0x6>

0800466e <memset>:
 800466e:	4402      	add	r2, r0
 8004670:	4603      	mov	r3, r0
 8004672:	4293      	cmp	r3, r2
 8004674:	d100      	bne.n	8004678 <memset+0xa>
 8004676:	4770      	bx	lr
 8004678:	f803 1b01 	strb.w	r1, [r3], #1
 800467c:	e7f9      	b.n	8004672 <memset+0x4>
	...

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
