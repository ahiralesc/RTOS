
SEN_T6713_C02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb8  08004eb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec0  08004ec0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08004f38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004f38  00020228  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010551  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  000305ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00032670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f51  00000000  00000000  00034008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108d0  00000000  00000000  0005bf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb90c  00000000  00000000  0006c829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b08  00000000  00000000  00168188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c48 	.word	0x08004c48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004c48 	.word	0x08004c48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80005f0:	23ff      	movs	r3, #255	; 0xff
 80005f2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80005f4:	23ff      	movs	r3, #255	; 0xff
 80005f6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80005f8:	e013      	b.n	8000622 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	4053      	eors	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <crc16+0x64>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4413      	add	r3, r2
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4053      	eors	r3, r2
 8000616:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <crc16+0x68>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000622:	887b      	ldrh	r3, [r7, #2]
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	807a      	strh	r2, [r7, #2]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1e6      	bne.n	80005fa <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21a      	sxth	r2, r3
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	b29b      	uxth	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	08004c6c 	.word	0x08004c6c
 800064c:	08004d6c 	.word	0x08004d6c

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000656:	f000 f94d 	bl	80008f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb7e 	bl	8000d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f867 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f923 	bl	80008ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000666:	f000 f8f1 	bl	800084c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800066a:	f000 f8bd 	bl	80007e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rcv_buff, 8);
 800066e:	2208      	movs	r2, #8
 8000670:	4928      	ldr	r1, [pc, #160]	; (8000714 <main+0xc4>)
 8000672:	4829      	ldr	r0, [pc, #164]	; (8000718 <main+0xc8>)
 8000674:	f002 fbfd 	bl	8002e72 <HAL_UART_Receive_IT>
  cmd[0] = 0x15;
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <main+0xcc>)
 800067a:	2215      	movs	r2, #21
 800067c:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x04;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <main+0xcc>)
 8000680:	2204      	movs	r2, #4
 8000682:	705a      	strb	r2, [r3, #1]
  cmd[2] = 0x13;
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <main+0xcc>)
 8000686:	2213      	movs	r2, #19
 8000688:	709a      	strb	r2, [r3, #2]
  cmd[3] = 0x8B;
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <main+0xcc>)
 800068c:	228b      	movs	r2, #139	; 0x8b
 800068e:	70da      	strb	r2, [r3, #3]
  cmd[4] = 0x00;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <main+0xcc>)
 8000692:	2200      	movs	r2, #0
 8000694:	711a      	strb	r2, [r3, #4]
  cmd[5] = 0x01;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <main+0xcc>)
 8000698:	2201      	movs	r2, #1
 800069a:	715a      	strb	r2, [r3, #5]
  uint16_t crc = crc16(cmd, 6);
 800069c:	2106      	movs	r1, #6
 800069e:	481f      	ldr	r0, [pc, #124]	; (800071c <main+0xcc>)
 80006a0:	f7ff ffa0 	bl	80005e4 <crc16>
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
  cmd[6] = crc&0xFF;
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <main+0xcc>)
 80006ae:	719a      	strb	r2, [r3, #6]
  cmd[7] = (crc>>8)&0xFF;
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <main+0xcc>)
 80006ba:	71da      	strb	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, cmd, 8, 1000);
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	2208      	movs	r2, #8
 80006c2:	4916      	ldr	r1, [pc, #88]	; (800071c <main+0xcc>)
 80006c4:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0xc8>)
 80006c6:	f002 fb51 	bl	8002d6c <HAL_UART_Transmit>
	  HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f000 fb72 	bl	8000db4 <HAL_Delay>
	  //if(rcv_buff[0] == 0x15 && rcv_buff[1] == 0x04 && rcv_buff[2] == 0x02) {
		//  if (rcv_buff[3]*256 + rcv_buff[4] != rawco) {
	  HAL_UART_Receive_IT(&huart2, rcv_buff, 8);
 80006d0:	2208      	movs	r2, #8
 80006d2:	4910      	ldr	r1, [pc, #64]	; (8000714 <main+0xc4>)
 80006d4:	4810      	ldr	r0, [pc, #64]	; (8000718 <main+0xc8>)
 80006d6:	f002 fbcc 	bl	8002e72 <HAL_UART_Receive_IT>
			  rawco = rcv_buff[3]*256 + rcv_buff[4];
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <main+0xc4>)
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <main+0xc4>)
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4413      	add	r3, r2
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <main+0xd0>)
 80006f0:	801a      	strh	r2, [r3, #0]
			  sprintf(snd_buff,"CO2: %d\r\n",rawco);
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <main+0xd0>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	490a      	ldr	r1, [pc, #40]	; (8000724 <main+0xd4>)
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <main+0xd8>)
 80006fc:	f003 fe36 	bl	800436c <siprintf>
			  HAL_UART_Transmit(&huart3, snd_buff, sizeof(snd_buff), 10);
 8000700:	230a      	movs	r3, #10
 8000702:	2214      	movs	r2, #20
 8000704:	4908      	ldr	r1, [pc, #32]	; (8000728 <main+0xd8>)
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <main+0xdc>)
 8000708:	f002 fb30 	bl	8002d6c <HAL_UART_Transmit>
		  //}
	  //}

	  HAL_Delay(50);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f000 fb51 	bl	8000db4 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, cmd, 8, 1000);
 8000712:	e7d3      	b.n	80006bc <main+0x6c>
 8000714:	20000094 	.word	0x20000094
 8000718:	200000b4 	.word	0x200000b4
 800071c:	2000008c 	.word	0x2000008c
 8000720:	200000b0 	.word	0x200000b0
 8000724:	08004c60 	.word	0x08004c60
 8000728:	2000009c 	.word	0x2000009c
 800072c:	2000013c 	.word	0x2000013c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fe0c 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <SystemClock_Config+0xb0>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <SystemClock_Config+0xb0>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SystemClock_Config+0xb0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <SystemClock_Config+0xb4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <SystemClock_Config+0xb4>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <SystemClock_Config+0xb4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fec9 	bl	8001534 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007a8:	f000 f8e2 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f962 	bl	8001a90 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d2:	f000 f8cd 	bl	8000970 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <MX_USART2_UART_Init+0x60>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 80007f4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 80007fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000800:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 800080a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 8000830:	f002 fa4e 	bl	8002cd0 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800083a:	f000 f899 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000b4 	.word	0x200000b4
 8000848:	40004400 	.word	0x40004400

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f002 fa1e 	bl	8002cd0 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f869 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000013c 	.word	0x2000013c
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x44>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <MX_GPIO_Init+0x44>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_GPIO_Init+0x44>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_GPIO_Init+0x44>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <MX_GPIO_Init+0x44>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_GPIO_Init+0x44>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000906:	f000 fb5b 	bl	8000fc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800090a:	2301      	movs	r3, #1
 800090c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800090e:	2300      	movs	r3, #0
 8000910:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000916:	231f      	movs	r3, #31
 8000918:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800091a:	2387      	movs	r3, #135	; 0x87
 800091c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800091e:	2300      	movs	r3, #0
 8000920:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000922:	2300      	movs	r3, #0
 8000924:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000926:	2301      	movs	r3, #1
 8000928:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000936:	463b      	mov	r3, r7
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fb79 	bl	8001030 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800093e:	2004      	movs	r0, #4
 8000940:	f000 fb56 	bl	8000ff0 <HAL_MPU_Enable>

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 fa09 	bl	8000d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010000 	.word	0x40010000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x44>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x44>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x44>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b0      	sub	sp, #192	; 0xc0
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2290      	movs	r2, #144	; 0x90
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fcb9 	bl	800435c <memset>
  if(huart->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a46      	ldr	r2, [pc, #280]	; (8000b08 <HAL_UART_MspInit+0x144>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d143      	bne.n	8000a7c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fa5d 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a0c:	f7ff ffb0 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a37      	ldr	r2, [pc, #220]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a40:	2360      	movs	r3, #96	; 0x60
 8000a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a62:	4619      	mov	r1, r3
 8000a64:	482a      	ldr	r0, [pc, #168]	; (8000b10 <HAL_UART_MspInit+0x14c>)
 8000a66:	f000 fbb9 	bl	80011dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2026      	movs	r0, #38	; 0x26
 8000a70:	f000 fa7c 	bl	8000f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a74:	2026      	movs	r0, #38	; 0x26
 8000a76:	f000 fa95 	bl	8000fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a7a:	e041      	b.n	8000b00 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <HAL_UART_MspInit+0x150>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d13c      	bne.n	8000b00 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fa13 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000aa0:	f7ff ff66 	bl	8000970 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_UART_MspInit+0x148>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aee:	2307      	movs	r3, #7
 8000af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_UART_MspInit+0x14c>)
 8000afc:	f000 fb6e 	bl	80011dc <HAL_GPIO_Init>
}
 8000b00:	bf00      	nop
 8000b02:	37c0      	adds	r7, #192	; 0xc0
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40004800 	.word	0x40004800

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <HAL_InitTick+0xcc>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <HAL_InitTick+0xcc>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6453      	str	r3, [r2, #68]	; 0x44
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <HAL_InitTick+0xcc>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f986 	bl	8001e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b50:	f001 f970 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 8000b54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b58:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_InitTick+0xd0>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3b01      	subs	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_InitTick+0xd4>)
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_InitTick+0xd4>)
 8000b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_InitTick+0xd4>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xd4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_InitTick+0xd4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_InitTick+0xd4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <HAL_InitTick+0xd4>)
 8000b8c:	f001 fdc0 	bl	8002710 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11b      	bne.n	8000bd6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <HAL_InitTick+0xd4>)
 8000ba0:	f001 fe18 	bl	80027d4 <HAL_TIM_Base_Start_IT>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d111      	bne.n	8000bd6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 f9f6 	bl	8000fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d808      	bhi.n	8000bd0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	2019      	movs	r0, #25
 8000bc4:	f000 f9d2 	bl	8000f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0xdc>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e002      	b.n	8000bd6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	200001c4 	.word	0x200001c4
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c56:	f001 fe35 	bl	80028c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200001c4 	.word	0x200001c4

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f002 f947 	bl	8002efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000b4 	.word	0x200000b4

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f003 fb2e 	bl	8004308 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20080000 	.word	0x20080000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	20000210 	.word	0x20000210
 8000ce0:	20000228 	.word	0x20000228

08000ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ffd7 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f003 faed 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fc89 	bl	8000650 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d4c:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d54:	20000228 	.word	0x20000228

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>

08000d5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f000 f8f9 	bl	8000f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d64:	200f      	movs	r0, #15
 8000d66:	f7ff fed7 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6a:	f7ff fe07 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000214 	.word	0x20000214

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000214 	.word	0x20000214

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	05fa0000 	.word	0x05fa0000

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff4c 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7e:	f7ff ff61 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f7ff ffb1 	bl	8000ef0 <NVIC_EncodePriority>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff80 	bl	8000e9c <__NVIC_SetPriority>
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff54 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000fc4:	f3bf 8f5f 	dmb	sy
}
 8000fc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_MPU_Disable+0x28>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_MPU_Disable+0x28>)
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_MPU_Disable+0x2c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	e000ed90 	.word	0xe000ed90

08000ff0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_MPU_Enable+0x38>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MPU_Enable+0x3c>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_MPU_Enable+0x3c>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800100e:	f3bf 8f4f 	dsb	sy
}
 8001012:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001014:	f3bf 8f6f 	isb	sy
}
 8001018:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed90 	.word	0xe000ed90
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	785a      	ldrb	r2, [r3, #1]
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_MPU_ConfigRegion+0x84>)
 800103e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d029      	beq.n	800109c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001048:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <HAL_MPU_ConfigRegion+0x84>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7adb      	ldrb	r3, [r3, #11]
 800105a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800105c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7a9b      	ldrb	r3, [r3, #10]
 8001062:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001064:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7b5b      	ldrb	r3, [r3, #13]
 800106a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800106c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7b9b      	ldrb	r3, [r3, #14]
 8001072:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001074:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7bdb      	ldrb	r3, [r3, #15]
 800107a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800107c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7a5b      	ldrb	r3, [r3, #9]
 8001082:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001084:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a1b      	ldrb	r3, [r3, #8]
 800108a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800108c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001096:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001098:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800109a:	e005      	b.n	80010a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_MPU_ConfigRegion+0x84>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_MPU_ConfigRegion+0x84>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed90 	.word	0xe000ed90

080010b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010c6:	f7ff fe69 	bl	8000d9c <HAL_GetTick>
 80010ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d008      	beq.n	80010ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e052      	b.n	8001190 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0216 	bic.w	r2, r2, #22
 80010f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001108:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <HAL_DMA_Abort+0x62>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0208 	bic.w	r2, r2, #8
 8001128:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113a:	e013      	b.n	8001164 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800113c:	f7ff fe2e 	bl	8000d9c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b05      	cmp	r3, #5
 8001148:	d90c      	bls.n	8001164 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2220      	movs	r2, #32
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e015      	b.n	8001190 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1e4      	bne.n	800113c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	223f      	movs	r2, #63	; 0x3f
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d004      	beq.n	80011b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00c      	b.n	80011d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2205      	movs	r2, #5
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e175      	b.n	80014e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8164 	bne.w	80014e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_GPIO_Init+0x56>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d130      	bne.n	8001294 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d017      	beq.n	80012d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80be 	beq.w	80014e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_GPIO_Init+0x324>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800137e:	4a61      	ldr	r2, [pc, #388]	; (8001504 <HAL_GPIO_Init+0x328>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_GPIO_Init+0x32c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d037      	beq.n	800141a <HAL_GPIO_Init+0x23e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_GPIO_Init+0x330>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d031      	beq.n	8001416 <HAL_GPIO_Init+0x23a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x334>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x236>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x338>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x232>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_GPIO_Init+0x33c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x22e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_GPIO_Init+0x340>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x22a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_GPIO_Init+0x344>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x226>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a51      	ldr	r2, [pc, #324]	; (8001524 <HAL_GPIO_Init+0x348>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x222>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a50      	ldr	r2, [pc, #320]	; (8001528 <HAL_GPIO_Init+0x34c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x21e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <HAL_GPIO_Init+0x350>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013f2:	2309      	movs	r3, #9
 80013f4:	e012      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013f6:	230a      	movs	r3, #10
 80013f8:	e010      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013fe:	2307      	movs	r3, #7
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x240>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x240>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x240>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x328>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_GPIO_Init+0x354>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_GPIO_Init+0x354>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_GPIO_Init+0x354>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_GPIO_Init+0x354>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_GPIO_Init+0x354>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x354>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_GPIO_Init+0x354>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_GPIO_Init+0x354>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae86 	bls.w	80011fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40022000 	.word	0x40022000
 800152c:	40022400 	.word	0x40022400
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e29b      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00c      	beq.n	800157e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001564:	4b93      	ldr	r3, [pc, #588]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d112      	bne.n	8001596 <HAL_RCC_OscConfig+0x62>
 8001570:	4b90      	ldr	r3, [pc, #576]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157c:	d10b      	bne.n	8001596 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	4b8d      	ldr	r3, [pc, #564]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06c      	beq.n	8001664 <HAL_RCC_OscConfig+0x130>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d168      	bne.n	8001664 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e275      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x7a>
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a83      	ldr	r2, [pc, #524]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e02e      	b.n	800160c <HAL_RCC_OscConfig+0xd8>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x9c>
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7b      	ldr	r2, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xd8>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0xc0>
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xd8>
 80015f4:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6e      	ldr	r2, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6b      	ldr	r2, [pc, #428]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fbc2 	bl	8000d9c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fbbe 	bl	8000d9c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e229      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xe8>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fbae 	bl	8000d9c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fbaa 	bl	8000d9c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e215      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b57      	ldr	r3, [pc, #348]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x110>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d069      	beq.n	8001746 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001672:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x190>
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x17a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1e9      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	493d      	ldr	r1, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e040      	b.n	8001746 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a38      	ldr	r2, [pc, #224]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb60 	bl	8000d9c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fb5c 	bl	8000d9c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1c7      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4929      	ldr	r1, [pc, #164]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
 8001712:	e018      	b.n	8001746 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fb3c 	bl	8000d9c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fb38 	bl	8000d9c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1a3      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d038      	beq.n	80017c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d019      	beq.n	800178e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 800175c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fb19 	bl	8000d9c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fb15 	bl	8000d9c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e180      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x23a>
 800178c:	e01a      	b.n	80017c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_RCC_OscConfig+0x280>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff faff 	bl	8000d9c <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fafb 	bl	8000d9c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d903      	bls.n	80017b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e166      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
 80017b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ee      	bne.n	80017a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a4 	beq.w	800191a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b89      	ldr	r3, [pc, #548]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a88      	ldr	r2, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	4b83      	ldr	r3, [pc, #524]	; (8001a08 <HAL_RCC_OscConfig+0x4d4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001806:	4b80      	ldr	r3, [pc, #512]	; (8001a08 <HAL_RCC_OscConfig+0x4d4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7f      	ldr	r2, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x4d4>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fac3 	bl	8000d9c <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fabf 	bl	8000d9c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e12a      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x4d4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x31a>
 8001840:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	4a6f      	ldr	r2, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6713      	str	r3, [r2, #112]	; 0x70
 800184c:	e02d      	b.n	80018aa <HAL_RCC_OscConfig+0x376>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x33c>
 8001856:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a6a      	ldr	r2, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a67      	ldr	r2, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x376>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x35e>
 8001878:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a61      	ldr	r2, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x376>
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a5b      	ldr	r2, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff fa73 	bl	8000d9c <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fa6f 	bl	8000d9c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0d8      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x386>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa5d 	bl	8000d9c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa59 	bl	8000d9c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0c2      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80ae 	beq.w	8001a80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d06d      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d14b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fa2a 	bl	8000d9c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fa26 	bl	8000d9c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e091      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	071b      	lsls	r3, r3, #28
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f9f8 	bl	8000d9c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f9f4 	bl	8000d9c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e05f      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x47c>
 80019ce:	e057      	b.n	8001a80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f9de 	bl	8000d9c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f9da 	bl	8000d9c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e045      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4b0>
 8001a02:	e03d      	b.n	8001a80 <HAL_RCC_OscConfig+0x54c>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_RCC_OscConfig+0x558>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d030      	beq.n	8001a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d129      	bne.n	8001a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d122      	bne.n	8001a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d119      	bne.n	8001a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	3b01      	subs	r3, #1
 8001a56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d10f      	bne.n	8001a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0d0      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 020f 	bic.w	r2, r3, #15
 8001abe:	4965      	ldr	r1, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d040      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e073      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b84:	f7ff f90a 	bl	8000d9c <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff f906 	bl	8000d9c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e053      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d210      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	490a      	ldr	r1, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1cc>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1d0>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1d4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe ff68 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08004e6c 	.word	0x08004e6c
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c6c:	b090      	sub	sp, #64	; 0x40
 8001c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
 8001c74:	2300      	movs	r3, #0
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c78:	2300      	movs	r3, #0
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	f200 80a1 	bhi.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x34>
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9a:	e09b      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_GetSysClockFreq+0x184>)
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ca0:	e09b      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca2:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ca6:	e098      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca8:	4b4f      	ldr	r3, [pc, #316]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cb2:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d028      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	099b      	lsrs	r3, r3, #6
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd4:	fb03 f201 	mul.w	r2, r3, r1
 8001cd8:	2300      	movs	r3, #0
 8001cda:	fb00 f303 	mul.w	r3, r0, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce8:	460a      	mov	r2, r1
 8001cea:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cee:	4413      	add	r3, r2
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	61fa      	str	r2, [r7, #28]
 8001cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d02:	f7fe faed 	bl	80002e0 <__aeabi_uldivmod>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d0e:	e053      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	2200      	movs	r2, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	617a      	str	r2, [r7, #20]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d22:	f04f 0b00 	mov.w	fp, #0
 8001d26:	4652      	mov	r2, sl
 8001d28:	465b      	mov	r3, fp
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	0159      	lsls	r1, r3, #5
 8001d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d38:	0150      	lsls	r0, r2, #5
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d42:	eb63 090b 	sbc.w	r9, r3, fp
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d5a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d5e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	00eb      	lsls	r3, r5, #3
 8001d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d70:	00e2      	lsls	r2, r4, #3
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	eb14 030a 	adds.w	r3, r4, sl
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	eb45 030b 	adc.w	r3, r5, fp
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	028b      	lsls	r3, r1, #10
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d98:	4621      	mov	r1, r4
 8001d9a:	028a      	lsls	r2, r1, #10
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	2200      	movs	r2, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	60fa      	str	r2, [r7, #12]
 8001da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dac:	f7fe fa98 	bl	80002e0 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetSysClockFreq+0x184>)
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3740      	adds	r7, #64	; 0x40
 8001de0:	46bd      	mov	sp, r7
 8001de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	017d7840 	.word	0x017d7840

08001df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4903      	ldr	r1, [pc, #12]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08004e7c 	.word	0x08004e7c

08001e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e38:	f7ff ffdc 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0b5b      	lsrs	r3, r3, #13
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	08004e7c 	.word	0x08004e7c

08001e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	220f      	movs	r2, #15
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_RCC_GetClockConfig+0x60>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 020f 	and.w	r2, r3, #15
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d012      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ef2:	6093      	str	r3, [r2, #8]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	4964      	ldr	r1, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d017      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	4959      	ldr	r1, [pc, #356]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d017      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	494a      	ldr	r1, [pc, #296]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 808b 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fee8 	bl	8000d9c <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe fee4 	bl	8000d9c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e38f      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d035      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d02e      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d114      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe feac 	bl	8000d9c <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe fea8 	bl	8000d9c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e351      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002076:	d111      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002086:	400b      	ands	r3, r1
 8002088:	4901      	ldr	r1, [pc, #4]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
 800208e:	e00b      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002090:	40023800 	.word	0x40023800
 8002094:	40007000 	.word	0x40007000
 8002098:	0ffffcff 	.word	0x0ffffcff
 800209c:	4bac      	ldr	r3, [pc, #688]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4aab      	ldr	r2, [pc, #684]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	4ba9      	ldr	r3, [pc, #676]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	49a6      	ldr	r1, [pc, #664]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020c6:	4ba2      	ldr	r3, [pc, #648]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020cc:	4aa0      	ldr	r2, [pc, #640]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020d6:	4b9e      	ldr	r3, [pc, #632]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	499b      	ldr	r1, [pc, #620]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f4:	4b96      	ldr	r3, [pc, #600]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002102:	4993      	ldr	r1, [pc, #588]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002116:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002124:	498a      	ldr	r1, [pc, #552]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002138:	4b85      	ldr	r3, [pc, #532]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	4982      	ldr	r1, [pc, #520]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4979      	ldr	r1, [pc, #484]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217c:	4b74      	ldr	r3, [pc, #464]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4971      	ldr	r1, [pc, #452]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219e:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	f023 020c 	bic.w	r2, r3, #12
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	4968      	ldr	r1, [pc, #416]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4960      	ldr	r1, [pc, #384]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	4957      	ldr	r1, [pc, #348]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002204:	4b52      	ldr	r3, [pc, #328]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	494f      	ldr	r1, [pc, #316]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4946      	ldr	r1, [pc, #280]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	493e      	ldr	r1, [pc, #248]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229a:	492d      	ldr	r1, [pc, #180]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022bc:	4924      	ldr	r1, [pc, #144]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022cc:	d101      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	4914      	ldr	r1, [pc, #80]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00b      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002320:	490b      	ldr	r1, [pc, #44]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00f      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002344:	4902      	ldr	r1, [pc, #8]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800234c:	e002      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00b      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002360:	4b8a      	ldr	r3, [pc, #552]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	4986      	ldr	r1, [pc, #536]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002394:	497d      	ldr	r1, [pc, #500]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d006      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80d6 	beq.w	800255c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023b0:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a75      	ldr	r2, [pc, #468]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023bc:	f7fe fcee 	bl	8000d9c <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023c4:	f7fe fcea 	bl	8000d9c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e195      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d021      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11d      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002404:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240a:	0e1b      	lsrs	r3, r3, #24
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	019a      	lsls	r2, r3, #6
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	071b      	lsls	r3, r3, #28
 800242a:	4958      	ldr	r1, [pc, #352]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002450:	2b00      	cmp	r3, #0
 8002452:	d02e      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245c:	d129      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002472:	0f1b      	lsrs	r3, r3, #28
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	019a      	lsls	r2, r3, #6
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	061b      	lsls	r3, r3, #24
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	071b      	lsls	r3, r3, #28
 8002492:	493e      	ldr	r1, [pc, #248]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a0:	f023 021f 	bic.w	r2, r3, #31
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	3b01      	subs	r3, #1
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01d      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	0e1b      	lsrs	r3, r3, #24
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d2:	0f1b      	lsrs	r3, r3, #28
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	019a      	lsls	r2, r3, #6
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	431a      	orrs	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	4926      	ldr	r1, [pc, #152]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d011      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	071b      	lsls	r3, r3, #28
 8002522:	491a      	ldr	r1, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002536:	f7fe fc31 	bl	8000d9c <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800253e:	f7fe fc2d 	bl	8000d9c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0d8      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 80ce 	bne.w	8002700 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002570:	f7fe fc14 	bl	8000d9c <HAL_GetTick>
 8002574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002576:	e00b      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002578:	f7fe fc10 	bl	8000d9c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d904      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0bb      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002590:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259c:	d0ec      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d02e      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d12a      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	0f1b      	lsrs	r3, r3, #28
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4944      	ldr	r1, [pc, #272]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002602:	4b42      	ldr	r3, [pc, #264]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002608:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	493d      	ldr	r1, [pc, #244]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d022      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002630:	d11d      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	0e1b      	lsrs	r3, r3, #24
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	0f1b      	lsrs	r3, r3, #28
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	019a      	lsls	r2, r3, #6
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	431a      	orrs	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	061b      	lsls	r3, r3, #24
 8002660:	431a      	orrs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	071b      	lsls	r3, r3, #28
 8002666:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d028      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	0e1b      	lsrs	r3, r3, #24
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	019a      	lsls	r2, r3, #6
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	4917      	ldr	r1, [pc, #92]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4911      	ldr	r1, [pc, #68]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fb60 	bl	8000d9c <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026e0:	f7fe fb5c 	bl	8000d9c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e007      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026fe:	d1ef      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e049      	b.n	80027b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f841 	bl	80027be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 fa00 	bl	8002b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d001      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e054      	b.n	8002896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d022      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d01d      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d018      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00e      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x80>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_TIM_Base_Start_IT+0xe8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d115      	bne.n	8002880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_TIM_Base_Start_IT+0xec>)
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b06      	cmp	r3, #6
 8002864:	d015      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0xbe>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d011      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	e008      	b.n	8002892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e000      	b.n	8002894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40000c00 	.word	0x40000c00
 80028b4:	40010400 	.word	0x40010400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40001800 	.word	0x40001800
 80028c0:	00010007 	.word	0x00010007

080028c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0202 	mvn.w	r2, #2
 80028f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f905 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8f7 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f908 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b04      	cmp	r3, #4
 800292c:	d122      	bne.n	8002974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d11b      	bne.n	8002974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0204 	mvn.w	r2, #4
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8db 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8cd 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f8de 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b08      	cmp	r3, #8
 8002980:	d122      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b08      	cmp	r3, #8
 800298e:	d11b      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0208 	mvn.w	r2, #8
 8002998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2204      	movs	r2, #4
 800299e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8b1 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 80029b4:	e005      	b.n	80029c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8a3 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f8b4 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d122      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d11b      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0210 	mvn.w	r2, #16
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2208      	movs	r2, #8
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f887 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f879 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f88a 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0201 	mvn.w	r2, #1
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd ff82 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b80      	cmp	r3, #128	; 0x80
 8002a54:	d10e      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d107      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f91a 	bl	8002ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a82:	d10e      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d107      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f90d 	bl	8002cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d10e      	bne.n	8002ace <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d107      	bne.n	8002ace <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f838 	bl	8002b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d10e      	bne.n	8002afa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d107      	bne.n	8002afa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0220 	mvn.w	r2, #32
 8002af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8cd 	bl	8002c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <TIM_Base_SetConfig+0x114>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <TIM_Base_SetConfig+0x118>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <TIM_Base_SetConfig+0x11c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <TIM_Base_SetConfig+0x120>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <TIM_Base_SetConfig+0x124>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <TIM_Base_SetConfig+0x114>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d027      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	; (8002c6c <TIM_Base_SetConfig+0x118>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d023      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <TIM_Base_SetConfig+0x11c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <TIM_Base_SetConfig+0x120>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <TIM_Base_SetConfig+0x124>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d017      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a28      	ldr	r2, [pc, #160]	; (8002c7c <TIM_Base_SetConfig+0x128>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <TIM_Base_SetConfig+0x130>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <TIM_Base_SetConfig+0x134>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <TIM_Base_SetConfig+0x138>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <TIM_Base_SetConfig+0x13c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <TIM_Base_SetConfig+0x114>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0xf8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <TIM_Base_SetConfig+0x124>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	615a      	str	r2, [r3, #20]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40010400 	.word	0x40010400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800
 8002c88:	40001800 	.word	0x40001800
 8002c8c:	40001c00 	.word	0x40001c00
 8002c90:	40002000 	.word	0x40002000

08002c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e040      	b.n	8002d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd fe66 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fc10 	bl	8003534 <UART_SetConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fe68 	bl	80039fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 feef 	bl	8003b40 <UART_CheckIdleState>
 8002d62:	4603      	mov	r3, r0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d171      	bne.n	8002e68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Transmit+0x24>
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e06a      	b.n	8002e6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2221      	movs	r2, #33	; 0x21
 8002da0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da2:	f7fd fffb 	bl	8000d9c <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_UART_Transmit+0x68>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e003      	b.n	8002ddc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ddc:	e02c      	b.n	8002e38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fef6 	bl	8003bda <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e038      	b.n	8002e6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3302      	adds	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e007      	b.n	8002e26 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3301      	adds	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1cc      	bne.n	8002dde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fec3 	bl	8003bda <UART_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e005      	b.n	8002e6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08a      	sub	sp, #40	; 0x28
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d132      	bne.n	8002ef0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_Receive_IT+0x24>
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e02b      	b.n	8002ef2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	613b      	str	r3, [r7, #16]
   return(result);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	69f9      	ldr	r1, [r7, #28]
 8002ed2:	6a3a      	ldr	r2, [r7, #32]
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e6      	bne.n	8002eae <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 ff3e 	bl	8003d68 <UART_Start_Receive_IT>
 8002eec:	4603      	mov	r3, r0
 8002eee:	e000      	b.n	8002ef2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3728      	adds	r7, #40	; 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b0ba      	sub	sp, #232	; 0xe8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f26:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00f      	beq.n	8002f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 82ac 	beq.w	80034b2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
      }
      return;
 8002f62:	e2a6      	b.n	80034b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8117 	beq.w	800319c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f7e:	4b85      	ldr	r3, [pc, #532]	; (8003194 <HAL_UART_IRQHandler+0x298>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 810a 	beq.w	800319c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xbc>
 8002f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_UART_IRQHandler+0xec>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d011      	beq.n	8003018 <HAL_UART_IRQHandler+0x11c>
 8002ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2204      	movs	r2, #4
 8003006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	f043 0202 	orr.w	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d017      	beq.n	8003054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2208      	movs	r2, #8
 8003042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <HAL_UART_IRQHandler+0x18a>
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8212 	beq.w	80034b6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d005      	beq.n	80030de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d04f      	beq.n	800317e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 ff08 	bl	8003ef4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d141      	bne.n	8003176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3308      	adds	r3, #8
 80030f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800310c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3308      	adds	r3, #8
 800311a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800311e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800312a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1d9      	bne.n	80030f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <HAL_UART_IRQHandler+0x29c>)
 800314c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe f820 	bl	8001198 <HAL_DMA_Abort_IT>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d017      	beq.n	800318e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003168:	4610      	mov	r0, r2
 800316a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316c:	e00f      	b.n	800318e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f9c0 	bl	80034f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	e00b      	b.n	800318e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9bc 	bl	80034f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e007      	b.n	800318e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f9b8 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800318c:	e193      	b.n	80034b6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318e:	bf00      	nop
    return;
 8003190:	e191      	b.n	80034b6 <HAL_UART_IRQHandler+0x5ba>
 8003192:	bf00      	nop
 8003194:	04000120 	.word	0x04000120
 8003198:	08003fbd 	.word	0x08003fbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 814c 	bne.w	800343e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8145 	beq.w	800343e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 813e 	beq.w	800343e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2210      	movs	r2, #16
 80031c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	f040 80b6 	bne.w	8003346 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8165 	beq.w	80034ba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031fa:	429a      	cmp	r2, r3
 80031fc:	f080 815d 	bcs.w	80034ba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003214:	f000 8086 	beq.w	8003324 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800322c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003246:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800324e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800325a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1da      	bne.n	8003218 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3308      	adds	r3, #8
 8003268:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3308      	adds	r3, #8
 8003282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003286:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800328a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800328e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e1      	bne.n	8003262 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3308      	adds	r3, #8
 80032a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3308      	adds	r3, #8
 80032be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e3      	bne.n	800329e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f4:	f023 0310 	bic.w	r3, r3, #16
 80032f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003306:	65bb      	str	r3, [r7, #88]	; 0x58
 8003308:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800330c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e4      	bne.n	80032e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd feca 	bl	80010b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003336:	b29b      	uxth	r3, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	b29b      	uxth	r3, r3
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8e2 	bl	8003508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003344:	e0b9      	b.n	80034ba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003352:	b29b      	uxth	r3, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80ab 	beq.w	80034be <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a6 	beq.w	80034be <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003394:	647b      	str	r3, [r7, #68]	; 0x44
 8003396:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800339a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e4      	bne.n	8003372 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	623b      	str	r3, [r7, #32]
   return(result);
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033cc:	633a      	str	r2, [r7, #48]	; 0x30
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e3      	bne.n	80033a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	60fb      	str	r3, [r7, #12]
   return(result);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0310 	bic.w	r3, r3, #16
 8003408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	617b      	str	r3, [r7, #20]
   return(result);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e4      	bne.n	80033f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f866 	bl	8003508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800343c:	e03f      	b.n	80034be <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00e      	beq.n	8003468 <HAL_UART_IRQHandler+0x56c>
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800345e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f85d 	bl	8003520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003466:	e02d      	b.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01c      	beq.n	80034c2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
    }
    return;
 8003490:	e017      	b.n	80034c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fd9c 	bl	8003fe8 <UART_EndTransmit_IT>
    return;
 80034b0:	e008      	b.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80034b2:	bf00      	nop
 80034b4:	e006      	b.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80034b6:	bf00      	nop
 80034b8:	e004      	b.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80034ba:	bf00      	nop
 80034bc:	e002      	b.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80034c2:	bf00      	nop
  }

}
 80034c4:	37e8      	adds	r7, #232	; 0xe8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop

080034cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4ba6      	ldr	r3, [pc, #664]	; (80037f8 <UART_SetConfig+0x2c4>)
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	430b      	orrs	r3, r1
 800356a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a94      	ldr	r2, [pc, #592]	; (80037fc <UART_SetConfig+0x2c8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d120      	bne.n	80035f2 <UART_SetConfig+0xbe>
 80035b0:	4b93      	ldr	r3, [pc, #588]	; (8003800 <UART_SetConfig+0x2cc>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d816      	bhi.n	80035ec <UART_SetConfig+0xb8>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x90>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	080035e1 	.word	0x080035e1
 80035cc:	080035db 	.word	0x080035db
 80035d0:	080035e7 	.word	0x080035e7
 80035d4:	2301      	movs	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e150      	b.n	800387c <UART_SetConfig+0x348>
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e14d      	b.n	800387c <UART_SetConfig+0x348>
 80035e0:	2304      	movs	r3, #4
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e14a      	b.n	800387c <UART_SetConfig+0x348>
 80035e6:	2308      	movs	r3, #8
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e147      	b.n	800387c <UART_SetConfig+0x348>
 80035ec:	2310      	movs	r3, #16
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e144      	b.n	800387c <UART_SetConfig+0x348>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a83      	ldr	r2, [pc, #524]	; (8003804 <UART_SetConfig+0x2d0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d132      	bne.n	8003662 <UART_SetConfig+0x12e>
 80035fc:	4b80      	ldr	r3, [pc, #512]	; (8003800 <UART_SetConfig+0x2cc>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d828      	bhi.n	800365c <UART_SetConfig+0x128>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0xdc>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003645 	.word	0x08003645
 8003614:	0800365d 	.word	0x0800365d
 8003618:	0800365d 	.word	0x0800365d
 800361c:	0800365d 	.word	0x0800365d
 8003620:	08003651 	.word	0x08003651
 8003624:	0800365d 	.word	0x0800365d
 8003628:	0800365d 	.word	0x0800365d
 800362c:	0800365d 	.word	0x0800365d
 8003630:	0800364b 	.word	0x0800364b
 8003634:	0800365d 	.word	0x0800365d
 8003638:	0800365d 	.word	0x0800365d
 800363c:	0800365d 	.word	0x0800365d
 8003640:	08003657 	.word	0x08003657
 8003644:	2300      	movs	r3, #0
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e118      	b.n	800387c <UART_SetConfig+0x348>
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e115      	b.n	800387c <UART_SetConfig+0x348>
 8003650:	2304      	movs	r3, #4
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e112      	b.n	800387c <UART_SetConfig+0x348>
 8003656:	2308      	movs	r3, #8
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e10f      	b.n	800387c <UART_SetConfig+0x348>
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e10c      	b.n	800387c <UART_SetConfig+0x348>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a68      	ldr	r2, [pc, #416]	; (8003808 <UART_SetConfig+0x2d4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d120      	bne.n	80036ae <UART_SetConfig+0x17a>
 800366c:	4b64      	ldr	r3, [pc, #400]	; (8003800 <UART_SetConfig+0x2cc>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d013      	beq.n	80036a2 <UART_SetConfig+0x16e>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d814      	bhi.n	80036a8 <UART_SetConfig+0x174>
 800367e:	2b20      	cmp	r3, #32
 8003680:	d009      	beq.n	8003696 <UART_SetConfig+0x162>
 8003682:	2b20      	cmp	r3, #32
 8003684:	d810      	bhi.n	80036a8 <UART_SetConfig+0x174>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <UART_SetConfig+0x15c>
 800368a:	2b10      	cmp	r3, #16
 800368c:	d006      	beq.n	800369c <UART_SetConfig+0x168>
 800368e:	e00b      	b.n	80036a8 <UART_SetConfig+0x174>
 8003690:	2300      	movs	r3, #0
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e0f2      	b.n	800387c <UART_SetConfig+0x348>
 8003696:	2302      	movs	r3, #2
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e0ef      	b.n	800387c <UART_SetConfig+0x348>
 800369c:	2304      	movs	r3, #4
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e0ec      	b.n	800387c <UART_SetConfig+0x348>
 80036a2:	2308      	movs	r3, #8
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e0e9      	b.n	800387c <UART_SetConfig+0x348>
 80036a8:	2310      	movs	r3, #16
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e0e6      	b.n	800387c <UART_SetConfig+0x348>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a56      	ldr	r2, [pc, #344]	; (800380c <UART_SetConfig+0x2d8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d120      	bne.n	80036fa <UART_SetConfig+0x1c6>
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <UART_SetConfig+0x2cc>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036c2:	2bc0      	cmp	r3, #192	; 0xc0
 80036c4:	d013      	beq.n	80036ee <UART_SetConfig+0x1ba>
 80036c6:	2bc0      	cmp	r3, #192	; 0xc0
 80036c8:	d814      	bhi.n	80036f4 <UART_SetConfig+0x1c0>
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d009      	beq.n	80036e2 <UART_SetConfig+0x1ae>
 80036ce:	2b80      	cmp	r3, #128	; 0x80
 80036d0:	d810      	bhi.n	80036f4 <UART_SetConfig+0x1c0>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <UART_SetConfig+0x1a8>
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d006      	beq.n	80036e8 <UART_SetConfig+0x1b4>
 80036da:	e00b      	b.n	80036f4 <UART_SetConfig+0x1c0>
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e0cc      	b.n	800387c <UART_SetConfig+0x348>
 80036e2:	2302      	movs	r3, #2
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e0c9      	b.n	800387c <UART_SetConfig+0x348>
 80036e8:	2304      	movs	r3, #4
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e0c6      	b.n	800387c <UART_SetConfig+0x348>
 80036ee:	2308      	movs	r3, #8
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e0c3      	b.n	800387c <UART_SetConfig+0x348>
 80036f4:	2310      	movs	r3, #16
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e0c0      	b.n	800387c <UART_SetConfig+0x348>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a44      	ldr	r2, [pc, #272]	; (8003810 <UART_SetConfig+0x2dc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d125      	bne.n	8003750 <UART_SetConfig+0x21c>
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <UART_SetConfig+0x2cc>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003712:	d017      	beq.n	8003744 <UART_SetConfig+0x210>
 8003714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003718:	d817      	bhi.n	800374a <UART_SetConfig+0x216>
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d00b      	beq.n	8003738 <UART_SetConfig+0x204>
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d811      	bhi.n	800374a <UART_SetConfig+0x216>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <UART_SetConfig+0x1fe>
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d006      	beq.n	800373e <UART_SetConfig+0x20a>
 8003730:	e00b      	b.n	800374a <UART_SetConfig+0x216>
 8003732:	2300      	movs	r3, #0
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e0a1      	b.n	800387c <UART_SetConfig+0x348>
 8003738:	2302      	movs	r3, #2
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e09e      	b.n	800387c <UART_SetConfig+0x348>
 800373e:	2304      	movs	r3, #4
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e09b      	b.n	800387c <UART_SetConfig+0x348>
 8003744:	2308      	movs	r3, #8
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e098      	b.n	800387c <UART_SetConfig+0x348>
 800374a:	2310      	movs	r3, #16
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e095      	b.n	800387c <UART_SetConfig+0x348>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <UART_SetConfig+0x2e0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d125      	bne.n	80037a6 <UART_SetConfig+0x272>
 800375a:	4b29      	ldr	r3, [pc, #164]	; (8003800 <UART_SetConfig+0x2cc>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003768:	d017      	beq.n	800379a <UART_SetConfig+0x266>
 800376a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376e:	d817      	bhi.n	80037a0 <UART_SetConfig+0x26c>
 8003770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003774:	d00b      	beq.n	800378e <UART_SetConfig+0x25a>
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d811      	bhi.n	80037a0 <UART_SetConfig+0x26c>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <UART_SetConfig+0x254>
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d006      	beq.n	8003794 <UART_SetConfig+0x260>
 8003786:	e00b      	b.n	80037a0 <UART_SetConfig+0x26c>
 8003788:	2301      	movs	r3, #1
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e076      	b.n	800387c <UART_SetConfig+0x348>
 800378e:	2302      	movs	r3, #2
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e073      	b.n	800387c <UART_SetConfig+0x348>
 8003794:	2304      	movs	r3, #4
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e070      	b.n	800387c <UART_SetConfig+0x348>
 800379a:	2308      	movs	r3, #8
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e06d      	b.n	800387c <UART_SetConfig+0x348>
 80037a0:	2310      	movs	r3, #16
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e06a      	b.n	800387c <UART_SetConfig+0x348>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <UART_SetConfig+0x2e4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d138      	bne.n	8003822 <UART_SetConfig+0x2ee>
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <UART_SetConfig+0x2cc>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037be:	d017      	beq.n	80037f0 <UART_SetConfig+0x2bc>
 80037c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037c4:	d82a      	bhi.n	800381c <UART_SetConfig+0x2e8>
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	d00b      	beq.n	80037e4 <UART_SetConfig+0x2b0>
 80037cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d0:	d824      	bhi.n	800381c <UART_SetConfig+0x2e8>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <UART_SetConfig+0x2aa>
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037da:	d006      	beq.n	80037ea <UART_SetConfig+0x2b6>
 80037dc:	e01e      	b.n	800381c <UART_SetConfig+0x2e8>
 80037de:	2300      	movs	r3, #0
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e04b      	b.n	800387c <UART_SetConfig+0x348>
 80037e4:	2302      	movs	r3, #2
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e048      	b.n	800387c <UART_SetConfig+0x348>
 80037ea:	2304      	movs	r3, #4
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e045      	b.n	800387c <UART_SetConfig+0x348>
 80037f0:	2308      	movs	r3, #8
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e042      	b.n	800387c <UART_SetConfig+0x348>
 80037f6:	bf00      	nop
 80037f8:	efff69f3 	.word	0xefff69f3
 80037fc:	40011000 	.word	0x40011000
 8003800:	40023800 	.word	0x40023800
 8003804:	40004400 	.word	0x40004400
 8003808:	40004800 	.word	0x40004800
 800380c:	40004c00 	.word	0x40004c00
 8003810:	40005000 	.word	0x40005000
 8003814:	40011400 	.word	0x40011400
 8003818:	40007800 	.word	0x40007800
 800381c:	2310      	movs	r3, #16
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e02c      	b.n	800387c <UART_SetConfig+0x348>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a72      	ldr	r2, [pc, #456]	; (80039f0 <UART_SetConfig+0x4bc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d125      	bne.n	8003878 <UART_SetConfig+0x344>
 800382c:	4b71      	ldr	r3, [pc, #452]	; (80039f4 <UART_SetConfig+0x4c0>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003836:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800383a:	d017      	beq.n	800386c <UART_SetConfig+0x338>
 800383c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003840:	d817      	bhi.n	8003872 <UART_SetConfig+0x33e>
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003846:	d00b      	beq.n	8003860 <UART_SetConfig+0x32c>
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d811      	bhi.n	8003872 <UART_SetConfig+0x33e>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <UART_SetConfig+0x326>
 8003852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003856:	d006      	beq.n	8003866 <UART_SetConfig+0x332>
 8003858:	e00b      	b.n	8003872 <UART_SetConfig+0x33e>
 800385a:	2300      	movs	r3, #0
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e00d      	b.n	800387c <UART_SetConfig+0x348>
 8003860:	2302      	movs	r3, #2
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e00a      	b.n	800387c <UART_SetConfig+0x348>
 8003866:	2304      	movs	r3, #4
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e007      	b.n	800387c <UART_SetConfig+0x348>
 800386c:	2308      	movs	r3, #8
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e004      	b.n	800387c <UART_SetConfig+0x348>
 8003872:	2310      	movs	r3, #16
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e001      	b.n	800387c <UART_SetConfig+0x348>
 8003878:	2310      	movs	r3, #16
 800387a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003884:	d15b      	bne.n	800393e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d828      	bhi.n	80038de <UART_SetConfig+0x3aa>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x360>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038df 	.word	0x080038df
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038df 	.word	0x080038df
 80038b0:	080038df 	.word	0x080038df
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe faa8 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e013      	b.n	80038e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe fab8 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 80038c4:	61b8      	str	r0, [r7, #24]
        break;
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <UART_SetConfig+0x4c4>)
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e00c      	b.n	80038e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe f9cb 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 80038d2:	61b8      	str	r0, [r7, #24]
        break;
 80038d4:	e008      	b.n	80038e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e004      	b.n	80038e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77bb      	strb	r3, [r7, #30]
        break;
 80038e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d074      	beq.n	80039d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	005a      	lsls	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	d916      	bls.n	8003938 <UART_SetConfig+0x404>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d212      	bcs.n	8003938 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	b29a      	uxth	r2, r3
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	4313      	orrs	r3, r2
 800392c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	89fa      	ldrh	r2, [r7, #14]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	e04f      	b.n	80039d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	77bb      	strb	r3, [r7, #30]
 800393c:	e04c      	b.n	80039d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800393e:	7ffb      	ldrb	r3, [r7, #31]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d828      	bhi.n	8003996 <UART_SetConfig+0x462>
 8003944:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0x418>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	08003971 	.word	0x08003971
 8003950:	08003979 	.word	0x08003979
 8003954:	08003981 	.word	0x08003981
 8003958:	08003997 	.word	0x08003997
 800395c:	08003987 	.word	0x08003987
 8003960:	08003997 	.word	0x08003997
 8003964:	08003997 	.word	0x08003997
 8003968:	08003997 	.word	0x08003997
 800396c:	0800398f 	.word	0x0800398f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003970:	f7fe fa4c 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e013      	b.n	80039a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7fe fa5c 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 800397c:	61b8      	str	r0, [r7, #24]
        break;
 800397e:	e00f      	b.n	80039a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <UART_SetConfig+0x4c4>)
 8003982:	61bb      	str	r3, [r7, #24]
        break;
 8003984:	e00c      	b.n	80039a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003986:	f7fe f96f 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 800398a:	61b8      	str	r0, [r7, #24]
        break;
 800398c:	e008      	b.n	80039a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003992:	61bb      	str	r3, [r7, #24]
        break;
 8003994:	e004      	b.n	80039a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77bb      	strb	r3, [r7, #30]
        break;
 800399e:	bf00      	nop
    }

    if (pclk != 0U)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d018      	beq.n	80039d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	085a      	lsrs	r2, r3, #1
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	441a      	add	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b0f      	cmp	r3, #15
 80039be:	d909      	bls.n	80039d4 <UART_SetConfig+0x4a0>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d205      	bcs.n	80039d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	e001      	b.n	80039d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40007c00 	.word	0x40007c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400

080039fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afa:	d10a      	bne.n	8003b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b50:	f7fd f924 	bl	8000d9c <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d10e      	bne.n	8003b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f831 	bl	8003bda <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e027      	b.n	8003bd2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d10e      	bne.n	8003bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f81b 	bl	8003bda <UART_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e011      	b.n	8003bd2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b09c      	sub	sp, #112	; 0x70
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bea:	e0a7      	b.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	f000 80a3 	beq.w	8003d3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fd f8d1 	bl	8000d9c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d13f      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c20:	667b      	str	r3, [r7, #100]	; 0x64
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e6      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	663b      	str	r3, [r7, #96]	; 0x60
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e068      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d050      	beq.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca8:	d148      	bne.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e6      	bne.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3308      	adds	r3, #8
 8003d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d06:	623a      	str	r2, [r7, #32]
 8003d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	69f9      	ldr	r1, [r7, #28]
 8003d0c:	6a3a      	ldr	r2, [r7, #32]
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e010      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	f43f af48 	beq.w	8003bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3770      	adds	r7, #112	; 0x70
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b097      	sub	sp, #92	; 0x5c
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	88fa      	ldrh	r2, [r7, #6]
 8003d80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d10e      	bne.n	8003dba <UART_Start_Receive_IT+0x52>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <UART_Start_Receive_IT+0x48>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003daa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dae:	e02d      	b.n	8003e0c <UART_Start_Receive_IT+0xa4>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	22ff      	movs	r2, #255	; 0xff
 8003db4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003db8:	e028      	b.n	8003e0c <UART_Start_Receive_IT+0xa4>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <UART_Start_Receive_IT+0x76>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <UART_Start_Receive_IT+0x6c>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	; 0xff
 8003dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dd2:	e01b      	b.n	8003e0c <UART_Start_Receive_IT+0xa4>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	227f      	movs	r2, #127	; 0x7f
 8003dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ddc:	e016      	b.n	8003e0c <UART_Start_Receive_IT+0xa4>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de6:	d10d      	bne.n	8003e04 <UART_Start_Receive_IT+0x9c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <UART_Start_Receive_IT+0x92>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	227f      	movs	r2, #127	; 0x7f
 8003df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003df8:	e008      	b.n	8003e0c <UART_Start_Receive_IT+0xa4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	223f      	movs	r2, #63	; 0x3f
 8003dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e02:	e003      	b.n	8003e0c <UART_Start_Receive_IT+0xa4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2222      	movs	r2, #34	; 0x22
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3308      	adds	r3, #8
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	657b      	str	r3, [r7, #84]	; 0x54
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e5      	bne.n	8003e1c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d107      	bne.n	8003e6a <UART_Start_Receive_IT+0x102>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <UART_Start_Receive_IT+0x184>)
 8003e66:	669a      	str	r2, [r3, #104]	; 0x68
 8003e68:	e002      	b.n	8003e70 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <UART_Start_Receive_IT+0x188>)
 8003e6e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d019      	beq.n	8003eac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
 8003e98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_Start_Receive_IT+0x110>
 8003eaa:	e018      	b.n	8003ede <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f043 0320 	orr.w	r3, r3, #32
 8003ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	69f9      	ldr	r1, [r7, #28]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e6      	bne.n	8003eac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	375c      	adds	r7, #92	; 0x5c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	080041a3 	.word	0x080041a3
 8003ef0:	0800403d 	.word	0x0800403d

08003ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b095      	sub	sp, #84	; 0x54
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e6      	bne.n	8003efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d118      	bne.n	8003f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0310 	bic.w	r3, r3, #16
 8003f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6979      	ldr	r1, [r7, #20]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	613b      	str	r3, [r7, #16]
   return(result);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e6      	bne.n	8003f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fb0:	bf00      	nop
 8003fb2:	3754      	adds	r7, #84	; 0x54
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff fa8a 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	613b      	str	r3, [r7, #16]
   return(result);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fa4c 	bl	80034cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004034:	bf00      	nop
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b096      	sub	sp, #88	; 0x58
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800404a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004054:	2b22      	cmp	r3, #34	; 0x22
 8004056:	f040 8098 	bne.w	800418a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004064:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004068:	b2d9      	uxtb	r1, r3
 800406a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800406e:	b2da      	uxtb	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	400a      	ands	r2, r1
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d17b      	bne.n	800419a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c0:	647b      	str	r3, [r7, #68]	; 0x44
 80040c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	623b      	str	r3, [r7, #32]
   return(result);
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f4:	633a      	str	r2, [r7, #48]	; 0x30
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	2b01      	cmp	r3, #1
 8004122:	d12e      	bne.n	8004182 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	60fb      	str	r3, [r7, #12]
   return(result);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	69b9      	ldr	r1, [r7, #24]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	617b      	str	r3, [r7, #20]
   return(result);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d103      	bne.n	8004172 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff f9c4 	bl	8003508 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004180:	e00b      	b.n	800419a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff f9ac 	bl	80034e0 <HAL_UART_RxCpltCallback>
}
 8004188:	e007      	b.n	800419a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0208 	orr.w	r2, r2, #8
 8004198:	619a      	str	r2, [r3, #24]
}
 800419a:	bf00      	nop
 800419c:	3758      	adds	r7, #88	; 0x58
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b096      	sub	sp, #88	; 0x58
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ba:	2b22      	cmp	r3, #34	; 0x22
 80041bc:	f040 8098 	bne.w	80042f0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80041d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80041d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80041d8:	4013      	ands	r3, r2
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d17b      	bne.n	8004300 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800421c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	643b      	str	r3, [r7, #64]	; 0x40
 8004228:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800422c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e6      	bne.n	8004208 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	61fb      	str	r3, [r7, #28]
   return(result);
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800425a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e5      	bne.n	800423a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	2b01      	cmp	r3, #1
 8004288:	d12e      	bne.n	80042e8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	60bb      	str	r3, [r7, #8]
   return(result);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	613b      	str	r3, [r7, #16]
   return(result);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e6      	bne.n	8004290 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d103      	bne.n	80042d8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2210      	movs	r2, #16
 80042d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff f911 	bl	8003508 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042e6:	e00b      	b.n	8004300 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff f8f9 	bl	80034e0 <HAL_UART_RxCpltCallback>
}
 80042ee:	e007      	b.n	8004300 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	619a      	str	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	3758      	adds	r7, #88	; 0x58
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <__errno>:
 8004308:	4b01      	ldr	r3, [pc, #4]	; (8004310 <__errno+0x8>)
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000000c 	.word	0x2000000c

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4d0d      	ldr	r5, [pc, #52]	; (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	; (8004350 <__libc_init_array+0x3c>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2600      	movs	r6, #0
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4d0b      	ldr	r5, [pc, #44]	; (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	; (8004358 <__libc_init_array+0x44>)
 8004328:	f000 fc8e 	bl	8004c48 <_init>
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2600      	movs	r6, #0
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f855 3b04 	ldr.w	r3, [r5], #4
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f855 3b04 	ldr.w	r3, [r5], #4
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	08004ec0 	.word	0x08004ec0
 8004350:	08004ec0 	.word	0x08004ec0
 8004354:	08004ec0 	.word	0x08004ec0
 8004358:	08004ec4 	.word	0x08004ec4

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <siprintf>:
 800436c:	b40e      	push	{r1, r2, r3}
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	; 0x70
 8004372:	ab1d      	add	r3, sp, #116	; 0x74
 8004374:	9002      	str	r0, [sp, #8]
 8004376:	9006      	str	r0, [sp, #24]
 8004378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <siprintf+0x38>)
 800437e:	9107      	str	r1, [sp, #28]
 8004380:	9104      	str	r1, [sp, #16]
 8004382:	4909      	ldr	r1, [pc, #36]	; (80043a8 <siprintf+0x3c>)
 8004384:	f853 2b04 	ldr.w	r2, [r3], #4
 8004388:	9105      	str	r1, [sp, #20]
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	a902      	add	r1, sp, #8
 8004390:	f000 f868 	bl	8004464 <_svfiprintf_r>
 8004394:	9b02      	ldr	r3, [sp, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	b01c      	add	sp, #112	; 0x70
 800439c:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a0:	b003      	add	sp, #12
 80043a2:	4770      	bx	lr
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	ffff0208 	.word	0xffff0208

080043ac <__ssputs_r>:
 80043ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b0:	688e      	ldr	r6, [r1, #8]
 80043b2:	429e      	cmp	r6, r3
 80043b4:	4682      	mov	sl, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	4690      	mov	r8, r2
 80043ba:	461f      	mov	r7, r3
 80043bc:	d838      	bhi.n	8004430 <__ssputs_r+0x84>
 80043be:	898a      	ldrh	r2, [r1, #12]
 80043c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043c4:	d032      	beq.n	800442c <__ssputs_r+0x80>
 80043c6:	6825      	ldr	r5, [r4, #0]
 80043c8:	6909      	ldr	r1, [r1, #16]
 80043ca:	eba5 0901 	sub.w	r9, r5, r1
 80043ce:	6965      	ldr	r5, [r4, #20]
 80043d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043d8:	3301      	adds	r3, #1
 80043da:	444b      	add	r3, r9
 80043dc:	106d      	asrs	r5, r5, #1
 80043de:	429d      	cmp	r5, r3
 80043e0:	bf38      	it	cc
 80043e2:	461d      	movcc	r5, r3
 80043e4:	0553      	lsls	r3, r2, #21
 80043e6:	d531      	bpl.n	800444c <__ssputs_r+0xa0>
 80043e8:	4629      	mov	r1, r5
 80043ea:	f000 fb63 	bl	8004ab4 <_malloc_r>
 80043ee:	4606      	mov	r6, r0
 80043f0:	b950      	cbnz	r0, 8004408 <__ssputs_r+0x5c>
 80043f2:	230c      	movs	r3, #12
 80043f4:	f8ca 3000 	str.w	r3, [sl]
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	6921      	ldr	r1, [r4, #16]
 800440a:	464a      	mov	r2, r9
 800440c:	f000 fabe 	bl	800498c <memcpy>
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	81a3      	strh	r3, [r4, #12]
 800441c:	6126      	str	r6, [r4, #16]
 800441e:	6165      	str	r5, [r4, #20]
 8004420:	444e      	add	r6, r9
 8004422:	eba5 0509 	sub.w	r5, r5, r9
 8004426:	6026      	str	r6, [r4, #0]
 8004428:	60a5      	str	r5, [r4, #8]
 800442a:	463e      	mov	r6, r7
 800442c:	42be      	cmp	r6, r7
 800442e:	d900      	bls.n	8004432 <__ssputs_r+0x86>
 8004430:	463e      	mov	r6, r7
 8004432:	6820      	ldr	r0, [r4, #0]
 8004434:	4632      	mov	r2, r6
 8004436:	4641      	mov	r1, r8
 8004438:	f000 fab6 	bl	80049a8 <memmove>
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	1b9b      	subs	r3, r3, r6
 8004440:	60a3      	str	r3, [r4, #8]
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	4433      	add	r3, r6
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	2000      	movs	r0, #0
 800444a:	e7db      	b.n	8004404 <__ssputs_r+0x58>
 800444c:	462a      	mov	r2, r5
 800444e:	f000 fba5 	bl	8004b9c <_realloc_r>
 8004452:	4606      	mov	r6, r0
 8004454:	2800      	cmp	r0, #0
 8004456:	d1e1      	bne.n	800441c <__ssputs_r+0x70>
 8004458:	6921      	ldr	r1, [r4, #16]
 800445a:	4650      	mov	r0, sl
 800445c:	f000 fabe 	bl	80049dc <_free_r>
 8004460:	e7c7      	b.n	80043f2 <__ssputs_r+0x46>
	...

08004464 <_svfiprintf_r>:
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	4698      	mov	r8, r3
 800446a:	898b      	ldrh	r3, [r1, #12]
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	b09d      	sub	sp, #116	; 0x74
 8004470:	4607      	mov	r7, r0
 8004472:	460d      	mov	r5, r1
 8004474:	4614      	mov	r4, r2
 8004476:	d50e      	bpl.n	8004496 <_svfiprintf_r+0x32>
 8004478:	690b      	ldr	r3, [r1, #16]
 800447a:	b963      	cbnz	r3, 8004496 <_svfiprintf_r+0x32>
 800447c:	2140      	movs	r1, #64	; 0x40
 800447e:	f000 fb19 	bl	8004ab4 <_malloc_r>
 8004482:	6028      	str	r0, [r5, #0]
 8004484:	6128      	str	r0, [r5, #16]
 8004486:	b920      	cbnz	r0, 8004492 <_svfiprintf_r+0x2e>
 8004488:	230c      	movs	r3, #12
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e0d1      	b.n	8004636 <_svfiprintf_r+0x1d2>
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	616b      	str	r3, [r5, #20]
 8004496:	2300      	movs	r3, #0
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
 800449a:	2320      	movs	r3, #32
 800449c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80044a4:	2330      	movs	r3, #48	; 0x30
 80044a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004650 <_svfiprintf_r+0x1ec>
 80044aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044ae:	f04f 0901 	mov.w	r9, #1
 80044b2:	4623      	mov	r3, r4
 80044b4:	469a      	mov	sl, r3
 80044b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ba:	b10a      	cbz	r2, 80044c0 <_svfiprintf_r+0x5c>
 80044bc:	2a25      	cmp	r2, #37	; 0x25
 80044be:	d1f9      	bne.n	80044b4 <_svfiprintf_r+0x50>
 80044c0:	ebba 0b04 	subs.w	fp, sl, r4
 80044c4:	d00b      	beq.n	80044de <_svfiprintf_r+0x7a>
 80044c6:	465b      	mov	r3, fp
 80044c8:	4622      	mov	r2, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	4638      	mov	r0, r7
 80044ce:	f7ff ff6d 	bl	80043ac <__ssputs_r>
 80044d2:	3001      	adds	r0, #1
 80044d4:	f000 80aa 	beq.w	800462c <_svfiprintf_r+0x1c8>
 80044d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044da:	445a      	add	r2, fp
 80044dc:	9209      	str	r2, [sp, #36]	; 0x24
 80044de:	f89a 3000 	ldrb.w	r3, [sl]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80a2 	beq.w	800462c <_svfiprintf_r+0x1c8>
 80044e8:	2300      	movs	r3, #0
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
 80044ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044f2:	f10a 0a01 	add.w	sl, sl, #1
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	9307      	str	r3, [sp, #28]
 80044fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004500:	4654      	mov	r4, sl
 8004502:	2205      	movs	r2, #5
 8004504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004508:	4851      	ldr	r0, [pc, #324]	; (8004650 <_svfiprintf_r+0x1ec>)
 800450a:	f7fb fe99 	bl	8000240 <memchr>
 800450e:	9a04      	ldr	r2, [sp, #16]
 8004510:	b9d8      	cbnz	r0, 800454a <_svfiprintf_r+0xe6>
 8004512:	06d0      	lsls	r0, r2, #27
 8004514:	bf44      	itt	mi
 8004516:	2320      	movmi	r3, #32
 8004518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800451c:	0711      	lsls	r1, r2, #28
 800451e:	bf44      	itt	mi
 8004520:	232b      	movmi	r3, #43	; 0x2b
 8004522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004526:	f89a 3000 	ldrb.w	r3, [sl]
 800452a:	2b2a      	cmp	r3, #42	; 0x2a
 800452c:	d015      	beq.n	800455a <_svfiprintf_r+0xf6>
 800452e:	9a07      	ldr	r2, [sp, #28]
 8004530:	4654      	mov	r4, sl
 8004532:	2000      	movs	r0, #0
 8004534:	f04f 0c0a 	mov.w	ip, #10
 8004538:	4621      	mov	r1, r4
 800453a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800453e:	3b30      	subs	r3, #48	; 0x30
 8004540:	2b09      	cmp	r3, #9
 8004542:	d94e      	bls.n	80045e2 <_svfiprintf_r+0x17e>
 8004544:	b1b0      	cbz	r0, 8004574 <_svfiprintf_r+0x110>
 8004546:	9207      	str	r2, [sp, #28]
 8004548:	e014      	b.n	8004574 <_svfiprintf_r+0x110>
 800454a:	eba0 0308 	sub.w	r3, r0, r8
 800454e:	fa09 f303 	lsl.w	r3, r9, r3
 8004552:	4313      	orrs	r3, r2
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	46a2      	mov	sl, r4
 8004558:	e7d2      	b.n	8004500 <_svfiprintf_r+0x9c>
 800455a:	9b03      	ldr	r3, [sp, #12]
 800455c:	1d19      	adds	r1, r3, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	9103      	str	r1, [sp, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfbb      	ittet	lt
 8004566:	425b      	neglt	r3, r3
 8004568:	f042 0202 	orrlt.w	r2, r2, #2
 800456c:	9307      	strge	r3, [sp, #28]
 800456e:	9307      	strlt	r3, [sp, #28]
 8004570:	bfb8      	it	lt
 8004572:	9204      	strlt	r2, [sp, #16]
 8004574:	7823      	ldrb	r3, [r4, #0]
 8004576:	2b2e      	cmp	r3, #46	; 0x2e
 8004578:	d10c      	bne.n	8004594 <_svfiprintf_r+0x130>
 800457a:	7863      	ldrb	r3, [r4, #1]
 800457c:	2b2a      	cmp	r3, #42	; 0x2a
 800457e:	d135      	bne.n	80045ec <_svfiprintf_r+0x188>
 8004580:	9b03      	ldr	r3, [sp, #12]
 8004582:	1d1a      	adds	r2, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	9203      	str	r2, [sp, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	bfb8      	it	lt
 800458c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004590:	3402      	adds	r4, #2
 8004592:	9305      	str	r3, [sp, #20]
 8004594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004660 <_svfiprintf_r+0x1fc>
 8004598:	7821      	ldrb	r1, [r4, #0]
 800459a:	2203      	movs	r2, #3
 800459c:	4650      	mov	r0, sl
 800459e:	f7fb fe4f 	bl	8000240 <memchr>
 80045a2:	b140      	cbz	r0, 80045b6 <_svfiprintf_r+0x152>
 80045a4:	2340      	movs	r3, #64	; 0x40
 80045a6:	eba0 000a 	sub.w	r0, r0, sl
 80045aa:	fa03 f000 	lsl.w	r0, r3, r0
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	4303      	orrs	r3, r0
 80045b2:	3401      	adds	r4, #1
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ba:	4826      	ldr	r0, [pc, #152]	; (8004654 <_svfiprintf_r+0x1f0>)
 80045bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045c0:	2206      	movs	r2, #6
 80045c2:	f7fb fe3d 	bl	8000240 <memchr>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d038      	beq.n	800463c <_svfiprintf_r+0x1d8>
 80045ca:	4b23      	ldr	r3, [pc, #140]	; (8004658 <_svfiprintf_r+0x1f4>)
 80045cc:	bb1b      	cbnz	r3, 8004616 <_svfiprintf_r+0x1b2>
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	3307      	adds	r3, #7
 80045d2:	f023 0307 	bic.w	r3, r3, #7
 80045d6:	3308      	adds	r3, #8
 80045d8:	9303      	str	r3, [sp, #12]
 80045da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045dc:	4433      	add	r3, r6
 80045de:	9309      	str	r3, [sp, #36]	; 0x24
 80045e0:	e767      	b.n	80044b2 <_svfiprintf_r+0x4e>
 80045e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045e6:	460c      	mov	r4, r1
 80045e8:	2001      	movs	r0, #1
 80045ea:	e7a5      	b.n	8004538 <_svfiprintf_r+0xd4>
 80045ec:	2300      	movs	r3, #0
 80045ee:	3401      	adds	r4, #1
 80045f0:	9305      	str	r3, [sp, #20]
 80045f2:	4619      	mov	r1, r3
 80045f4:	f04f 0c0a 	mov.w	ip, #10
 80045f8:	4620      	mov	r0, r4
 80045fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045fe:	3a30      	subs	r2, #48	; 0x30
 8004600:	2a09      	cmp	r2, #9
 8004602:	d903      	bls.n	800460c <_svfiprintf_r+0x1a8>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0c5      	beq.n	8004594 <_svfiprintf_r+0x130>
 8004608:	9105      	str	r1, [sp, #20]
 800460a:	e7c3      	b.n	8004594 <_svfiprintf_r+0x130>
 800460c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004610:	4604      	mov	r4, r0
 8004612:	2301      	movs	r3, #1
 8004614:	e7f0      	b.n	80045f8 <_svfiprintf_r+0x194>
 8004616:	ab03      	add	r3, sp, #12
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	462a      	mov	r2, r5
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <_svfiprintf_r+0x1f8>)
 800461e:	a904      	add	r1, sp, #16
 8004620:	4638      	mov	r0, r7
 8004622:	f3af 8000 	nop.w
 8004626:	1c42      	adds	r2, r0, #1
 8004628:	4606      	mov	r6, r0
 800462a:	d1d6      	bne.n	80045da <_svfiprintf_r+0x176>
 800462c:	89ab      	ldrh	r3, [r5, #12]
 800462e:	065b      	lsls	r3, r3, #25
 8004630:	f53f af2c 	bmi.w	800448c <_svfiprintf_r+0x28>
 8004634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004636:	b01d      	add	sp, #116	; 0x74
 8004638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463c:	ab03      	add	r3, sp, #12
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	462a      	mov	r2, r5
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <_svfiprintf_r+0x1f8>)
 8004644:	a904      	add	r1, sp, #16
 8004646:	4638      	mov	r0, r7
 8004648:	f000 f87a 	bl	8004740 <_printf_i>
 800464c:	e7eb      	b.n	8004626 <_svfiprintf_r+0x1c2>
 800464e:	bf00      	nop
 8004650:	08004e84 	.word	0x08004e84
 8004654:	08004e8e 	.word	0x08004e8e
 8004658:	00000000 	.word	0x00000000
 800465c:	080043ad 	.word	0x080043ad
 8004660:	08004e8a 	.word	0x08004e8a

08004664 <_printf_common>:
 8004664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	4616      	mov	r6, r2
 800466a:	4699      	mov	r9, r3
 800466c:	688a      	ldr	r2, [r1, #8]
 800466e:	690b      	ldr	r3, [r1, #16]
 8004670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004674:	4293      	cmp	r3, r2
 8004676:	bfb8      	it	lt
 8004678:	4613      	movlt	r3, r2
 800467a:	6033      	str	r3, [r6, #0]
 800467c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004680:	4607      	mov	r7, r0
 8004682:	460c      	mov	r4, r1
 8004684:	b10a      	cbz	r2, 800468a <_printf_common+0x26>
 8004686:	3301      	adds	r3, #1
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	0699      	lsls	r1, r3, #26
 800468e:	bf42      	ittt	mi
 8004690:	6833      	ldrmi	r3, [r6, #0]
 8004692:	3302      	addmi	r3, #2
 8004694:	6033      	strmi	r3, [r6, #0]
 8004696:	6825      	ldr	r5, [r4, #0]
 8004698:	f015 0506 	ands.w	r5, r5, #6
 800469c:	d106      	bne.n	80046ac <_printf_common+0x48>
 800469e:	f104 0a19 	add.w	sl, r4, #25
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	6832      	ldr	r2, [r6, #0]
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	dc26      	bgt.n	80046fa <_printf_common+0x96>
 80046ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046b0:	1e13      	subs	r3, r2, #0
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	bf18      	it	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	0692      	lsls	r2, r2, #26
 80046ba:	d42b      	bmi.n	8004714 <_printf_common+0xb0>
 80046bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046c0:	4649      	mov	r1, r9
 80046c2:	4638      	mov	r0, r7
 80046c4:	47c0      	blx	r8
 80046c6:	3001      	adds	r0, #1
 80046c8:	d01e      	beq.n	8004708 <_printf_common+0xa4>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	68e5      	ldr	r5, [r4, #12]
 80046ce:	6832      	ldr	r2, [r6, #0]
 80046d0:	f003 0306 	and.w	r3, r3, #6
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	bf08      	it	eq
 80046d8:	1aad      	subeq	r5, r5, r2
 80046da:	68a3      	ldr	r3, [r4, #8]
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	bf0c      	ite	eq
 80046e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e4:	2500      	movne	r5, #0
 80046e6:	4293      	cmp	r3, r2
 80046e8:	bfc4      	itt	gt
 80046ea:	1a9b      	subgt	r3, r3, r2
 80046ec:	18ed      	addgt	r5, r5, r3
 80046ee:	2600      	movs	r6, #0
 80046f0:	341a      	adds	r4, #26
 80046f2:	42b5      	cmp	r5, r6
 80046f4:	d11a      	bne.n	800472c <_printf_common+0xc8>
 80046f6:	2000      	movs	r0, #0
 80046f8:	e008      	b.n	800470c <_printf_common+0xa8>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4652      	mov	r2, sl
 80046fe:	4649      	mov	r1, r9
 8004700:	4638      	mov	r0, r7
 8004702:	47c0      	blx	r8
 8004704:	3001      	adds	r0, #1
 8004706:	d103      	bne.n	8004710 <_printf_common+0xac>
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004710:	3501      	adds	r5, #1
 8004712:	e7c6      	b.n	80046a2 <_printf_common+0x3e>
 8004714:	18e1      	adds	r1, r4, r3
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	2030      	movs	r0, #48	; 0x30
 800471a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800471e:	4422      	add	r2, r4
 8004720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004728:	3302      	adds	r3, #2
 800472a:	e7c7      	b.n	80046bc <_printf_common+0x58>
 800472c:	2301      	movs	r3, #1
 800472e:	4622      	mov	r2, r4
 8004730:	4649      	mov	r1, r9
 8004732:	4638      	mov	r0, r7
 8004734:	47c0      	blx	r8
 8004736:	3001      	adds	r0, #1
 8004738:	d0e6      	beq.n	8004708 <_printf_common+0xa4>
 800473a:	3601      	adds	r6, #1
 800473c:	e7d9      	b.n	80046f2 <_printf_common+0x8e>
	...

08004740 <_printf_i>:
 8004740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	7e0f      	ldrb	r7, [r1, #24]
 8004746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004748:	2f78      	cmp	r7, #120	; 0x78
 800474a:	4691      	mov	r9, r2
 800474c:	4680      	mov	r8, r0
 800474e:	460c      	mov	r4, r1
 8004750:	469a      	mov	sl, r3
 8004752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004756:	d807      	bhi.n	8004768 <_printf_i+0x28>
 8004758:	2f62      	cmp	r7, #98	; 0x62
 800475a:	d80a      	bhi.n	8004772 <_printf_i+0x32>
 800475c:	2f00      	cmp	r7, #0
 800475e:	f000 80d8 	beq.w	8004912 <_printf_i+0x1d2>
 8004762:	2f58      	cmp	r7, #88	; 0x58
 8004764:	f000 80a3 	beq.w	80048ae <_printf_i+0x16e>
 8004768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800476c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004770:	e03a      	b.n	80047e8 <_printf_i+0xa8>
 8004772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004776:	2b15      	cmp	r3, #21
 8004778:	d8f6      	bhi.n	8004768 <_printf_i+0x28>
 800477a:	a101      	add	r1, pc, #4	; (adr r1, 8004780 <_printf_i+0x40>)
 800477c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004780:	080047d9 	.word	0x080047d9
 8004784:	080047ed 	.word	0x080047ed
 8004788:	08004769 	.word	0x08004769
 800478c:	08004769 	.word	0x08004769
 8004790:	08004769 	.word	0x08004769
 8004794:	08004769 	.word	0x08004769
 8004798:	080047ed 	.word	0x080047ed
 800479c:	08004769 	.word	0x08004769
 80047a0:	08004769 	.word	0x08004769
 80047a4:	08004769 	.word	0x08004769
 80047a8:	08004769 	.word	0x08004769
 80047ac:	080048f9 	.word	0x080048f9
 80047b0:	0800481d 	.word	0x0800481d
 80047b4:	080048db 	.word	0x080048db
 80047b8:	08004769 	.word	0x08004769
 80047bc:	08004769 	.word	0x08004769
 80047c0:	0800491b 	.word	0x0800491b
 80047c4:	08004769 	.word	0x08004769
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	08004769 	.word	0x08004769
 80047d0:	08004769 	.word	0x08004769
 80047d4:	080048e3 	.word	0x080048e3
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	602a      	str	r2, [r5, #0]
 80047e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0a3      	b.n	8004934 <_printf_i+0x1f4>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	6829      	ldr	r1, [r5, #0]
 80047f0:	0606      	lsls	r6, r0, #24
 80047f2:	f101 0304 	add.w	r3, r1, #4
 80047f6:	d50a      	bpl.n	800480e <_printf_i+0xce>
 80047f8:	680e      	ldr	r6, [r1, #0]
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	2e00      	cmp	r6, #0
 80047fe:	da03      	bge.n	8004808 <_printf_i+0xc8>
 8004800:	232d      	movs	r3, #45	; 0x2d
 8004802:	4276      	negs	r6, r6
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004808:	485e      	ldr	r0, [pc, #376]	; (8004984 <_printf_i+0x244>)
 800480a:	230a      	movs	r3, #10
 800480c:	e019      	b.n	8004842 <_printf_i+0x102>
 800480e:	680e      	ldr	r6, [r1, #0]
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004816:	bf18      	it	ne
 8004818:	b236      	sxthne	r6, r6
 800481a:	e7ef      	b.n	80047fc <_printf_i+0xbc>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	1d19      	adds	r1, r3, #4
 8004822:	6029      	str	r1, [r5, #0]
 8004824:	0601      	lsls	r1, r0, #24
 8004826:	d501      	bpl.n	800482c <_printf_i+0xec>
 8004828:	681e      	ldr	r6, [r3, #0]
 800482a:	e002      	b.n	8004832 <_printf_i+0xf2>
 800482c:	0646      	lsls	r6, r0, #25
 800482e:	d5fb      	bpl.n	8004828 <_printf_i+0xe8>
 8004830:	881e      	ldrh	r6, [r3, #0]
 8004832:	4854      	ldr	r0, [pc, #336]	; (8004984 <_printf_i+0x244>)
 8004834:	2f6f      	cmp	r7, #111	; 0x6f
 8004836:	bf0c      	ite	eq
 8004838:	2308      	moveq	r3, #8
 800483a:	230a      	movne	r3, #10
 800483c:	2100      	movs	r1, #0
 800483e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004842:	6865      	ldr	r5, [r4, #4]
 8004844:	60a5      	str	r5, [r4, #8]
 8004846:	2d00      	cmp	r5, #0
 8004848:	bfa2      	ittt	ge
 800484a:	6821      	ldrge	r1, [r4, #0]
 800484c:	f021 0104 	bicge.w	r1, r1, #4
 8004850:	6021      	strge	r1, [r4, #0]
 8004852:	b90e      	cbnz	r6, 8004858 <_printf_i+0x118>
 8004854:	2d00      	cmp	r5, #0
 8004856:	d04d      	beq.n	80048f4 <_printf_i+0x1b4>
 8004858:	4615      	mov	r5, r2
 800485a:	fbb6 f1f3 	udiv	r1, r6, r3
 800485e:	fb03 6711 	mls	r7, r3, r1, r6
 8004862:	5dc7      	ldrb	r7, [r0, r7]
 8004864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004868:	4637      	mov	r7, r6
 800486a:	42bb      	cmp	r3, r7
 800486c:	460e      	mov	r6, r1
 800486e:	d9f4      	bls.n	800485a <_printf_i+0x11a>
 8004870:	2b08      	cmp	r3, #8
 8004872:	d10b      	bne.n	800488c <_printf_i+0x14c>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	07de      	lsls	r6, r3, #31
 8004878:	d508      	bpl.n	800488c <_printf_i+0x14c>
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	6861      	ldr	r1, [r4, #4]
 800487e:	4299      	cmp	r1, r3
 8004880:	bfde      	ittt	le
 8004882:	2330      	movle	r3, #48	; 0x30
 8004884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800488c:	1b52      	subs	r2, r2, r5
 800488e:	6122      	str	r2, [r4, #16]
 8004890:	f8cd a000 	str.w	sl, [sp]
 8004894:	464b      	mov	r3, r9
 8004896:	aa03      	add	r2, sp, #12
 8004898:	4621      	mov	r1, r4
 800489a:	4640      	mov	r0, r8
 800489c:	f7ff fee2 	bl	8004664 <_printf_common>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d14c      	bne.n	800493e <_printf_i+0x1fe>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	b004      	add	sp, #16
 80048aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ae:	4835      	ldr	r0, [pc, #212]	; (8004984 <_printf_i+0x244>)
 80048b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048b4:	6829      	ldr	r1, [r5, #0]
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80048bc:	6029      	str	r1, [r5, #0]
 80048be:	061d      	lsls	r5, r3, #24
 80048c0:	d514      	bpl.n	80048ec <_printf_i+0x1ac>
 80048c2:	07df      	lsls	r7, r3, #31
 80048c4:	bf44      	itt	mi
 80048c6:	f043 0320 	orrmi.w	r3, r3, #32
 80048ca:	6023      	strmi	r3, [r4, #0]
 80048cc:	b91e      	cbnz	r6, 80048d6 <_printf_i+0x196>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f023 0320 	bic.w	r3, r3, #32
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	2310      	movs	r3, #16
 80048d8:	e7b0      	b.n	800483c <_printf_i+0xfc>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f043 0320 	orr.w	r3, r3, #32
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	2378      	movs	r3, #120	; 0x78
 80048e4:	4828      	ldr	r0, [pc, #160]	; (8004988 <_printf_i+0x248>)
 80048e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ea:	e7e3      	b.n	80048b4 <_printf_i+0x174>
 80048ec:	0659      	lsls	r1, r3, #25
 80048ee:	bf48      	it	mi
 80048f0:	b2b6      	uxthmi	r6, r6
 80048f2:	e7e6      	b.n	80048c2 <_printf_i+0x182>
 80048f4:	4615      	mov	r5, r2
 80048f6:	e7bb      	b.n	8004870 <_printf_i+0x130>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	6826      	ldr	r6, [r4, #0]
 80048fc:	6961      	ldr	r1, [r4, #20]
 80048fe:	1d18      	adds	r0, r3, #4
 8004900:	6028      	str	r0, [r5, #0]
 8004902:	0635      	lsls	r5, r6, #24
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	d501      	bpl.n	800490c <_printf_i+0x1cc>
 8004908:	6019      	str	r1, [r3, #0]
 800490a:	e002      	b.n	8004912 <_printf_i+0x1d2>
 800490c:	0670      	lsls	r0, r6, #25
 800490e:	d5fb      	bpl.n	8004908 <_printf_i+0x1c8>
 8004910:	8019      	strh	r1, [r3, #0]
 8004912:	2300      	movs	r3, #0
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	4615      	mov	r5, r2
 8004918:	e7ba      	b.n	8004890 <_printf_i+0x150>
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	602a      	str	r2, [r5, #0]
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	6862      	ldr	r2, [r4, #4]
 8004924:	2100      	movs	r1, #0
 8004926:	4628      	mov	r0, r5
 8004928:	f7fb fc8a 	bl	8000240 <memchr>
 800492c:	b108      	cbz	r0, 8004932 <_printf_i+0x1f2>
 800492e:	1b40      	subs	r0, r0, r5
 8004930:	6060      	str	r0, [r4, #4]
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	2300      	movs	r3, #0
 8004938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493c:	e7a8      	b.n	8004890 <_printf_i+0x150>
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	462a      	mov	r2, r5
 8004942:	4649      	mov	r1, r9
 8004944:	4640      	mov	r0, r8
 8004946:	47d0      	blx	sl
 8004948:	3001      	adds	r0, #1
 800494a:	d0ab      	beq.n	80048a4 <_printf_i+0x164>
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	079b      	lsls	r3, r3, #30
 8004950:	d413      	bmi.n	800497a <_printf_i+0x23a>
 8004952:	68e0      	ldr	r0, [r4, #12]
 8004954:	9b03      	ldr	r3, [sp, #12]
 8004956:	4298      	cmp	r0, r3
 8004958:	bfb8      	it	lt
 800495a:	4618      	movlt	r0, r3
 800495c:	e7a4      	b.n	80048a8 <_printf_i+0x168>
 800495e:	2301      	movs	r3, #1
 8004960:	4632      	mov	r2, r6
 8004962:	4649      	mov	r1, r9
 8004964:	4640      	mov	r0, r8
 8004966:	47d0      	blx	sl
 8004968:	3001      	adds	r0, #1
 800496a:	d09b      	beq.n	80048a4 <_printf_i+0x164>
 800496c:	3501      	adds	r5, #1
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	9903      	ldr	r1, [sp, #12]
 8004972:	1a5b      	subs	r3, r3, r1
 8004974:	42ab      	cmp	r3, r5
 8004976:	dcf2      	bgt.n	800495e <_printf_i+0x21e>
 8004978:	e7eb      	b.n	8004952 <_printf_i+0x212>
 800497a:	2500      	movs	r5, #0
 800497c:	f104 0619 	add.w	r6, r4, #25
 8004980:	e7f5      	b.n	800496e <_printf_i+0x22e>
 8004982:	bf00      	nop
 8004984:	08004e95 	.word	0x08004e95
 8004988:	08004ea6 	.word	0x08004ea6

0800498c <memcpy>:
 800498c:	440a      	add	r2, r1
 800498e:	4291      	cmp	r1, r2
 8004990:	f100 33ff 	add.w	r3, r0, #4294967295
 8004994:	d100      	bne.n	8004998 <memcpy+0xc>
 8004996:	4770      	bx	lr
 8004998:	b510      	push	{r4, lr}
 800499a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a2:	4291      	cmp	r1, r2
 80049a4:	d1f9      	bne.n	800499a <memcpy+0xe>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <memmove>:
 80049a8:	4288      	cmp	r0, r1
 80049aa:	b510      	push	{r4, lr}
 80049ac:	eb01 0402 	add.w	r4, r1, r2
 80049b0:	d902      	bls.n	80049b8 <memmove+0x10>
 80049b2:	4284      	cmp	r4, r0
 80049b4:	4623      	mov	r3, r4
 80049b6:	d807      	bhi.n	80049c8 <memmove+0x20>
 80049b8:	1e43      	subs	r3, r0, #1
 80049ba:	42a1      	cmp	r1, r4
 80049bc:	d008      	beq.n	80049d0 <memmove+0x28>
 80049be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049c6:	e7f8      	b.n	80049ba <memmove+0x12>
 80049c8:	4402      	add	r2, r0
 80049ca:	4601      	mov	r1, r0
 80049cc:	428a      	cmp	r2, r1
 80049ce:	d100      	bne.n	80049d2 <memmove+0x2a>
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049da:	e7f7      	b.n	80049cc <memmove+0x24>

080049dc <_free_r>:
 80049dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049de:	2900      	cmp	r1, #0
 80049e0:	d044      	beq.n	8004a6c <_free_r+0x90>
 80049e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e6:	9001      	str	r0, [sp, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f1a1 0404 	sub.w	r4, r1, #4
 80049ee:	bfb8      	it	lt
 80049f0:	18e4      	addlt	r4, r4, r3
 80049f2:	f000 f913 	bl	8004c1c <__malloc_lock>
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <_free_r+0x94>)
 80049f8:	9801      	ldr	r0, [sp, #4]
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	b933      	cbnz	r3, 8004a0c <_free_r+0x30>
 80049fe:	6063      	str	r3, [r4, #4]
 8004a00:	6014      	str	r4, [r2, #0]
 8004a02:	b003      	add	sp, #12
 8004a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a08:	f000 b90e 	b.w	8004c28 <__malloc_unlock>
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d908      	bls.n	8004a22 <_free_r+0x46>
 8004a10:	6825      	ldr	r5, [r4, #0]
 8004a12:	1961      	adds	r1, r4, r5
 8004a14:	428b      	cmp	r3, r1
 8004a16:	bf01      	itttt	eq
 8004a18:	6819      	ldreq	r1, [r3, #0]
 8004a1a:	685b      	ldreq	r3, [r3, #4]
 8004a1c:	1949      	addeq	r1, r1, r5
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	e7ed      	b.n	80049fe <_free_r+0x22>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x50>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x46>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1855      	adds	r5, r2, r1
 8004a30:	42a5      	cmp	r5, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x70>
 8004a34:	6824      	ldr	r4, [r4, #0]
 8004a36:	4421      	add	r1, r4
 8004a38:	1854      	adds	r4, r2, r1
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1e0      	bne.n	8004a02 <_free_r+0x26>
 8004a40:	681c      	ldr	r4, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	4421      	add	r1, r4
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7da      	b.n	8004a02 <_free_r+0x26>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x78>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	e7d6      	b.n	8004a02 <_free_r+0x26>
 8004a54:	6825      	ldr	r5, [r4, #0]
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1949      	addeq	r1, r1, r5
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7ca      	b.n	8004a02 <_free_r+0x26>
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bd30      	pop	{r4, r5, pc}
 8004a70:	20000218 	.word	0x20000218

08004a74 <sbrk_aligned>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4e0e      	ldr	r6, [pc, #56]	; (8004ab0 <sbrk_aligned+0x3c>)
 8004a78:	460c      	mov	r4, r1
 8004a7a:	6831      	ldr	r1, [r6, #0]
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	b911      	cbnz	r1, 8004a86 <sbrk_aligned+0x12>
 8004a80:	f000 f8bc 	bl	8004bfc <_sbrk_r>
 8004a84:	6030      	str	r0, [r6, #0]
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 f8b7 	bl	8004bfc <_sbrk_r>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d00a      	beq.n	8004aa8 <sbrk_aligned+0x34>
 8004a92:	1cc4      	adds	r4, r0, #3
 8004a94:	f024 0403 	bic.w	r4, r4, #3
 8004a98:	42a0      	cmp	r0, r4
 8004a9a:	d007      	beq.n	8004aac <sbrk_aligned+0x38>
 8004a9c:	1a21      	subs	r1, r4, r0
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 f8ac 	bl	8004bfc <_sbrk_r>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d101      	bne.n	8004aac <sbrk_aligned+0x38>
 8004aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8004aac:	4620      	mov	r0, r4
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	2000021c 	.word	0x2000021c

08004ab4 <_malloc_r>:
 8004ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab8:	1ccd      	adds	r5, r1, #3
 8004aba:	f025 0503 	bic.w	r5, r5, #3
 8004abe:	3508      	adds	r5, #8
 8004ac0:	2d0c      	cmp	r5, #12
 8004ac2:	bf38      	it	cc
 8004ac4:	250c      	movcc	r5, #12
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	4607      	mov	r7, r0
 8004aca:	db01      	blt.n	8004ad0 <_malloc_r+0x1c>
 8004acc:	42a9      	cmp	r1, r5
 8004ace:	d905      	bls.n	8004adc <_malloc_r+0x28>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004adc:	4e2e      	ldr	r6, [pc, #184]	; (8004b98 <_malloc_r+0xe4>)
 8004ade:	f000 f89d 	bl	8004c1c <__malloc_lock>
 8004ae2:	6833      	ldr	r3, [r6, #0]
 8004ae4:	461c      	mov	r4, r3
 8004ae6:	bb34      	cbnz	r4, 8004b36 <_malloc_r+0x82>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4638      	mov	r0, r7
 8004aec:	f7ff ffc2 	bl	8004a74 <sbrk_aligned>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	4604      	mov	r4, r0
 8004af4:	d14d      	bne.n	8004b92 <_malloc_r+0xde>
 8004af6:	6834      	ldr	r4, [r6, #0]
 8004af8:	4626      	mov	r6, r4
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	d140      	bne.n	8004b80 <_malloc_r+0xcc>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	4631      	mov	r1, r6
 8004b02:	4638      	mov	r0, r7
 8004b04:	eb04 0803 	add.w	r8, r4, r3
 8004b08:	f000 f878 	bl	8004bfc <_sbrk_r>
 8004b0c:	4580      	cmp	r8, r0
 8004b0e:	d13a      	bne.n	8004b86 <_malloc_r+0xd2>
 8004b10:	6821      	ldr	r1, [r4, #0]
 8004b12:	3503      	adds	r5, #3
 8004b14:	1a6d      	subs	r5, r5, r1
 8004b16:	f025 0503 	bic.w	r5, r5, #3
 8004b1a:	3508      	adds	r5, #8
 8004b1c:	2d0c      	cmp	r5, #12
 8004b1e:	bf38      	it	cc
 8004b20:	250c      	movcc	r5, #12
 8004b22:	4629      	mov	r1, r5
 8004b24:	4638      	mov	r0, r7
 8004b26:	f7ff ffa5 	bl	8004a74 <sbrk_aligned>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d02b      	beq.n	8004b86 <_malloc_r+0xd2>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	442b      	add	r3, r5
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	e00e      	b.n	8004b54 <_malloc_r+0xa0>
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	1b52      	subs	r2, r2, r5
 8004b3a:	d41e      	bmi.n	8004b7a <_malloc_r+0xc6>
 8004b3c:	2a0b      	cmp	r2, #11
 8004b3e:	d916      	bls.n	8004b6e <_malloc_r+0xba>
 8004b40:	1961      	adds	r1, r4, r5
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	6025      	str	r5, [r4, #0]
 8004b46:	bf18      	it	ne
 8004b48:	6059      	strne	r1, [r3, #4]
 8004b4a:	6863      	ldr	r3, [r4, #4]
 8004b4c:	bf08      	it	eq
 8004b4e:	6031      	streq	r1, [r6, #0]
 8004b50:	5162      	str	r2, [r4, r5]
 8004b52:	604b      	str	r3, [r1, #4]
 8004b54:	4638      	mov	r0, r7
 8004b56:	f104 060b 	add.w	r6, r4, #11
 8004b5a:	f000 f865 	bl	8004c28 <__malloc_unlock>
 8004b5e:	f026 0607 	bic.w	r6, r6, #7
 8004b62:	1d23      	adds	r3, r4, #4
 8004b64:	1af2      	subs	r2, r6, r3
 8004b66:	d0b6      	beq.n	8004ad6 <_malloc_r+0x22>
 8004b68:	1b9b      	subs	r3, r3, r6
 8004b6a:	50a3      	str	r3, [r4, r2]
 8004b6c:	e7b3      	b.n	8004ad6 <_malloc_r+0x22>
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	bf0c      	ite	eq
 8004b74:	6032      	streq	r2, [r6, #0]
 8004b76:	605a      	strne	r2, [r3, #4]
 8004b78:	e7ec      	b.n	8004b54 <_malloc_r+0xa0>
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	6864      	ldr	r4, [r4, #4]
 8004b7e:	e7b2      	b.n	8004ae6 <_malloc_r+0x32>
 8004b80:	4634      	mov	r4, r6
 8004b82:	6876      	ldr	r6, [r6, #4]
 8004b84:	e7b9      	b.n	8004afa <_malloc_r+0x46>
 8004b86:	230c      	movs	r3, #12
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f000 f84c 	bl	8004c28 <__malloc_unlock>
 8004b90:	e7a1      	b.n	8004ad6 <_malloc_r+0x22>
 8004b92:	6025      	str	r5, [r4, #0]
 8004b94:	e7de      	b.n	8004b54 <_malloc_r+0xa0>
 8004b96:	bf00      	nop
 8004b98:	20000218 	.word	0x20000218

08004b9c <_realloc_r>:
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	4680      	mov	r8, r0
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	460e      	mov	r6, r1
 8004ba6:	b921      	cbnz	r1, 8004bb2 <_realloc_r+0x16>
 8004ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	4611      	mov	r1, r2
 8004bae:	f7ff bf81 	b.w	8004ab4 <_malloc_r>
 8004bb2:	b92a      	cbnz	r2, 8004bc0 <_realloc_r+0x24>
 8004bb4:	f7ff ff12 	bl	80049dc <_free_r>
 8004bb8:	4625      	mov	r5, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc0:	f000 f838 	bl	8004c34 <_malloc_usable_size_r>
 8004bc4:	4284      	cmp	r4, r0
 8004bc6:	4607      	mov	r7, r0
 8004bc8:	d802      	bhi.n	8004bd0 <_realloc_r+0x34>
 8004bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bce:	d812      	bhi.n	8004bf6 <_realloc_r+0x5a>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f7ff ff6e 	bl	8004ab4 <_malloc_r>
 8004bd8:	4605      	mov	r5, r0
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d0ed      	beq.n	8004bba <_realloc_r+0x1e>
 8004bde:	42bc      	cmp	r4, r7
 8004be0:	4622      	mov	r2, r4
 8004be2:	4631      	mov	r1, r6
 8004be4:	bf28      	it	cs
 8004be6:	463a      	movcs	r2, r7
 8004be8:	f7ff fed0 	bl	800498c <memcpy>
 8004bec:	4631      	mov	r1, r6
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f7ff fef4 	bl	80049dc <_free_r>
 8004bf4:	e7e1      	b.n	8004bba <_realloc_r+0x1e>
 8004bf6:	4635      	mov	r5, r6
 8004bf8:	e7df      	b.n	8004bba <_realloc_r+0x1e>
	...

08004bfc <_sbrk_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d06      	ldr	r5, [pc, #24]	; (8004c18 <_sbrk_r+0x1c>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7fc f836 	bl	8000c78 <_sbrk>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_sbrk_r+0x1a>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_sbrk_r+0x1a>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20000220 	.word	0x20000220

08004c1c <__malloc_lock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__malloc_lock+0x8>)
 8004c1e:	f000 b811 	b.w	8004c44 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000224 	.word	0x20000224

08004c28 <__malloc_unlock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__malloc_unlock+0x8>)
 8004c2a:	f000 b80c 	b.w	8004c46 <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000224 	.word	0x20000224

08004c34 <_malloc_usable_size_r>:
 8004c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c38:	1f18      	subs	r0, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bfbc      	itt	lt
 8004c3e:	580b      	ldrlt	r3, [r1, r0]
 8004c40:	18c0      	addlt	r0, r0, r3
 8004c42:	4770      	bx	lr

08004c44 <__retarget_lock_acquire_recursive>:
 8004c44:	4770      	bx	lr

08004c46 <__retarget_lock_release_recursive>:
 8004c46:	4770      	bx	lr

08004c48 <_init>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr

08004c54 <_fini>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr
