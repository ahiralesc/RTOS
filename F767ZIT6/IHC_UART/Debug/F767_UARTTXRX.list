
F767_UARTTXRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003fd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003fd4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd65  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ba8  00000000  00000000  0002fd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00031948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026ecb  00000000  00000000  00033260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbc1  00000000  00000000  0005a12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f721a  00000000  00000000  00065cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cf06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  0015cf84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003f88 	.word	0x08003f88

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003f88 	.word	0x08003f88

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fa4b 	bl	80009d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f80e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8b6 	bl	80006b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f884 	bl	8000654 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, buffer, sizeof(buffer));
 800054c:	2204      	movs	r2, #4
 800054e:	4902      	ldr	r1, [pc, #8]	; (8000558 <main+0x20>)
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <main+0x24>)
 8000552:	f002 fa01 	bl	8002958 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x1e>
 8000558:	200000ac 	.word	0x200000ac
 800055c:	20000028 	.word	0x20000028

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0b8      	sub	sp, #224	; 0xe0
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fd02 	bl	8003f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2290      	movs	r2, #144	; 0x90
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fcf3 	bl	8003f78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <SystemClock_Config+0xec>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <SystemClock_Config+0xec>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	6413      	str	r3, [r2, #64]	; 0x40
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <SystemClock_Config+0xec>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xf0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b2:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xf0>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xf0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2310      	movs	r3, #16
 80005d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd42 	bl	800106c <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005ee:	f000 f8ad 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f000 ffd6 	bl	80015c8 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f893 	bl	800074c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f9cb 	bl	80019d0 <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000640:	f000 f884 	bl	800074c <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	37e0      	adds	r7, #224	; 0xe0
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USART3_UART_Init+0x58>)
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <MX_USART3_UART_Init+0x5c>)
 800065c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_USART3_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART3_UART_Init+0x58>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART3_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART3_UART_Init+0x58>)
 8000698:	f002 f8a2 	bl	80027e0 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f853 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40004800 	.word	0x40004800

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_GPIO_Init+0x44>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <MX_GPIO_Init+0x44>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_GPIO_Init+0x44>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x44>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x44>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_GPIO_Init+0x44>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, buffer, sizeof(buffer));
 8000704:	2204      	movs	r2, #4
 8000706:	4906      	ldr	r1, [pc, #24]	; (8000720 <HAL_UART_RxCpltCallback+0x24>)
 8000708:	4806      	ldr	r0, [pc, #24]	; (8000724 <HAL_UART_RxCpltCallback+0x28>)
 800070a:	f002 f925 	bl	8002958 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart3, buffer, sizeof(buffer));
 800070e:	2204      	movs	r2, #4
 8000710:	4903      	ldr	r1, [pc, #12]	; (8000720 <HAL_UART_RxCpltCallback+0x24>)
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <HAL_UART_RxCpltCallback+0x28>)
 8000714:	f002 f8b2 	bl	800287c <HAL_UART_Transmit_IT>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000ac 	.word	0x200000ac
 8000724:	20000028 	.word	0x20000028

08000728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d101      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073a:	f000 f959 	bl	80009f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40010000 	.word	0x40010000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000752:	e7fe      	b.n	8000752 <Error_Handler+0x6>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x44>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <HAL_UART_MspInit+0x8c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d130      	bne.n	8000820 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <HAL_UART_MspInit+0x90>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a1a      	ldr	r2, [pc, #104]	; (800082c <HAL_UART_MspInit+0x90>)
 80007c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_UART_MspInit+0x90>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_UART_MspInit+0x90>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_UART_MspInit+0x90>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_UART_MspInit+0x90>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000800:	2307      	movs	r3, #7
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <HAL_UART_MspInit+0x94>)
 800080c:	f000 fa84 	bl	8000d18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2027      	movs	r0, #39	; 0x27
 8000816:	f000 f9c3 	bl	8000ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800081a:	2027      	movs	r0, #39	; 0x27
 800081c:	f000 f9dc 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40004800 	.word	0x40004800
 800082c:	40023800 	.word	0x40023800
 8000830:	40020c00 	.word	0x40020c00

08000834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2019      	movs	r0, #25
 800084a:	f000 f9a9 	bl	8000ba0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800084e:	2019      	movs	r0, #25
 8000850:	f000 f9c2 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <HAL_InitTick+0x9c>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <HAL_InitTick+0x9c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6453      	str	r3, [r2, #68]	; 0x44
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_InitTick+0x9c>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086c:	f107 0210 	add.w	r2, r7, #16
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f878 	bl	800196c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800087c:	f001 f862 	bl	8001944 <HAL_RCC_GetPCLK2Freq>
 8000880:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_InitTick+0xa0>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0c9b      	lsrs	r3, r3, #18
 800088c:	3b01      	subs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_InitTick+0xa4>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <HAL_InitTick+0xa8>)
 8000894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_InitTick+0xa4>)
 8000898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_InitTick+0xa4>)
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_InitTick+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_InitTick+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <HAL_InitTick+0xa4>)
 80008b2:	f001 fcb5 	bl	8002220 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <HAL_InitTick+0xa4>)
 80008be:	f001 fd11 	bl	80022e4 <HAL_TIM_Base_Start_IT>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	200000b0 	.word	0x200000b0
 80008dc:	40010000 	.word	0x40010000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800093e:	f001 fd49 	bl	80023d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000b0 	.word	0x200000b0

0800094c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	    HAL_UART_IRQHandler(&huart3);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <USART3_IRQHandler+0x10>)
 8000952:	f002 f84f 	bl	80029f4 <HAL_UART_IRQHandler>

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028

08000960 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f003 fabd 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fdbf 	bl	8000538 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	20000100 	.word	0x20000100

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>

080009d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 f8d5 	bl	8000b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff ff27 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e6:	f7ff feb5 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200000fc 	.word	0x200000fc

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000fc 	.word	0x200000fc

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <__NVIC_SetPriorityGrouping+0x40>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x40>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	05fa0000 	.word	0x05fa0000

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff4c 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb2:	f7ff ff61 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	6978      	ldr	r0, [r7, #20]
 8000bbe:	f7ff ffb1 	bl	8000b24 <NVIC_EncodePriority>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff80 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff54 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c02:	f7ff ff09 	bl	8000a18 <HAL_GetTick>
 8000c06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d008      	beq.n	8000c26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e052      	b.n	8000ccc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0216 	bic.w	r2, r2, #22
 8000c34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <HAL_DMA_Abort+0x62>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0208 	bic.w	r2, r2, #8
 8000c64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0201 	bic.w	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c76:	e013      	b.n	8000ca0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c78:	f7ff fece 	bl	8000a18 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d90c      	bls.n	8000ca0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2220      	movs	r2, #32
 8000c8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2203      	movs	r2, #3
 8000c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e015      	b.n	8000ccc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1e4      	bne.n	8000c78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb2:	223f      	movs	r2, #63	; 0x3f
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d004      	beq.n	8000cf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00c      	b.n	8000d0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0201 	bic.w	r2, r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e175      	b.n	8001024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8164 	bne.w	800101e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_GPIO_Init+0x56>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80be 	beq.w	800101e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b65      	ldr	r3, [pc, #404]	; (8001038 <HAL_GPIO_Init+0x320>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a64      	ldr	r2, [pc, #400]	; (8001038 <HAL_GPIO_Init+0x320>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b62      	ldr	r3, [pc, #392]	; (8001038 <HAL_GPIO_Init+0x320>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000eba:	4a60      	ldr	r2, [pc, #384]	; (800103c <HAL_GPIO_Init+0x324>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a57      	ldr	r2, [pc, #348]	; (8001040 <HAL_GPIO_Init+0x328>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d037      	beq.n	8000f56 <HAL_GPIO_Init+0x23e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_GPIO_Init+0x32c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d031      	beq.n	8000f52 <HAL_GPIO_Init+0x23a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d02b      	beq.n	8000f4e <HAL_GPIO_Init+0x236>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_GPIO_Init+0x334>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d025      	beq.n	8000f4a <HAL_GPIO_Init+0x232>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a53      	ldr	r2, [pc, #332]	; (8001050 <HAL_GPIO_Init+0x338>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01f      	beq.n	8000f46 <HAL_GPIO_Init+0x22e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_GPIO_Init+0x33c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x22a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_GPIO_Init+0x340>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x226>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_GPIO_Init+0x344>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x348>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x21e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_GPIO_Init+0x34c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x21a>
 8000f2e:	2309      	movs	r3, #9
 8000f30:	e012      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f32:	230a      	movs	r3, #10
 8000f34:	e010      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f36:	2308      	movs	r3, #8
 8000f38:	e00e      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x240>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f68:	4934      	ldr	r1, [pc, #208]	; (800103c <HAL_GPIO_Init+0x324>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a33      	ldr	r2, [pc, #204]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <HAL_GPIO_Init+0x350>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae86 	bls.w	8000d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	3724      	adds	r7, #36	; 0x24
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40021400 	.word	0x40021400
 8001058:	40021800 	.word	0x40021800
 800105c:	40021c00 	.word	0x40021c00
 8001060:	40022000 	.word	0x40022000
 8001064:	40022400 	.word	0x40022400
 8001068:	40013c00 	.word	0x40013c00

0800106c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e29b      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8087 	beq.w	800119e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001090:	4b96      	ldr	r3, [pc, #600]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b04      	cmp	r3, #4
 800109a:	d00c      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109c:	4b93      	ldr	r3, [pc, #588]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d112      	bne.n	80010ce <HAL_RCC_OscConfig+0x62>
 80010a8:	4b90      	ldr	r3, [pc, #576]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b4:	d10b      	bne.n	80010ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b6:	4b8d      	ldr	r3, [pc, #564]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d06c      	beq.n	800119c <HAL_RCC_OscConfig+0x130>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d168      	bne.n	800119c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e275      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d6:	d106      	bne.n	80010e6 <HAL_RCC_OscConfig+0x7a>
 80010d8:	4b84      	ldr	r3, [pc, #528]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a83      	ldr	r2, [pc, #524]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e02e      	b.n	8001144 <HAL_RCC_OscConfig+0xd8>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x9c>
 80010ee:	4b7f      	ldr	r3, [pc, #508]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7e      	ldr	r2, [pc, #504]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b7c      	ldr	r3, [pc, #496]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a7b      	ldr	r2, [pc, #492]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xd8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0xc0>
 8001112:	4b76      	ldr	r3, [pc, #472]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a75      	ldr	r2, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b73      	ldr	r3, [pc, #460]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a72      	ldr	r2, [pc, #456]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xd8>
 800112c:	4b6f      	ldr	r3, [pc, #444]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6e      	ldr	r2, [pc, #440]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a6b      	ldr	r2, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fc64 	bl	8000a18 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fc60 	bl	8000a18 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e229      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b61      	ldr	r3, [pc, #388]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xe8>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff fc50 	bl	8000a18 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fc4c 	bl	8000a18 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e215      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x110>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d069      	beq.n	800127e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d11c      	bne.n	80011fc <HAL_RCC_OscConfig+0x190>
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x17a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1e9      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	493d      	ldr	r1, [pc, #244]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	e040      	b.n	800127e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d023      	beq.n	800124c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a38      	ldr	r2, [pc, #224]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fc02 	bl	8000a18 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fbfe 	bl	8000a18 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e1c7      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4929      	ldr	r1, [pc, #164]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
 800124a:	e018      	b.n	800127e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a26      	ldr	r2, [pc, #152]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fbde 	bl	8000a18 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fbda 	bl	8000a18 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1a3      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d038      	beq.n	80012fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d019      	beq.n	80012c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff fbbb 	bl	8000a18 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fbb7 	bl	8000a18 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e180      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x23a>
 80012c4:	e01a      	b.n	80012fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80012c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_RCC_OscConfig+0x280>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d2:	f7ff fba1 	bl	8000a18 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff fb9d 	bl	8000a18 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d903      	bls.n	80012f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e166      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
 80012ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b92      	ldr	r3, [pc, #584]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a4 	beq.w	8001452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b8c      	ldr	r3, [pc, #560]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a88      	ldr	r2, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b86      	ldr	r3, [pc, #536]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001332:	4b83      	ldr	r3, [pc, #524]	; (8001540 <HAL_RCC_OscConfig+0x4d4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800133e:	4b80      	ldr	r3, [pc, #512]	; (8001540 <HAL_RCC_OscConfig+0x4d4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7f      	ldr	r2, [pc, #508]	; (8001540 <HAL_RCC_OscConfig+0x4d4>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fb65 	bl	8000a18 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fb61 	bl	8000a18 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e12a      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001364:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x4d4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x31a>
 8001378:	4b70      	ldr	r3, [pc, #448]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a6f      	ldr	r2, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	e02d      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x33c>
 800138e:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a67      	ldr	r2, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
 80013a6:	e01c      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d10c      	bne.n	80013ca <HAL_RCC_OscConfig+0x35e>
 80013b0:	4b62      	ldr	r3, [pc, #392]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	4a61      	ldr	r2, [pc, #388]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6713      	str	r3, [r2, #112]	; 0x70
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6713      	str	r3, [r2, #112]	; 0x70
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a5b      	ldr	r2, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d015      	beq.n	8001416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	f7ff fb15 	bl	8000a18 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	e00a      	b.n	8001408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fb11 	bl	8000a18 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0d8      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001408:	4b4c      	ldr	r3, [pc, #304]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ee      	beq.n	80013f2 <HAL_RCC_OscConfig+0x386>
 8001414:	e014      	b.n	8001440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff faff 	bl	8000a18 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fafb 	bl	8000a18 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0c2      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ee      	bne.n	800141e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a3c      	ldr	r2, [pc, #240]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800144c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80ae 	beq.w	80015b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b08      	cmp	r3, #8
 8001466:	d06d      	beq.n	8001544 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d14b      	bne.n	8001508 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff facc 	bl	8000a18 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fac8 	bl	8000a18 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e091      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	3b01      	subs	r3, #1
 80014bc:	041b      	lsls	r3, r3, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	071b      	lsls	r3, r3, #28
 80014ce:	491b      	ldr	r1, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80014da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa9a 	bl	8000a18 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fa96 	bl	8000a18 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e05f      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x47c>
 8001506:	e057      	b.n	80015b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 800150e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fa80 	bl	8000a18 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fa7c 	bl	8000a18 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e045      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_RCC_OscConfig+0x4d0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x4b0>
 800153a:	e03d      	b.n	80015b8 <HAL_RCC_OscConfig+0x54c>
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_RCC_OscConfig+0x558>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d030      	beq.n	80015b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d129      	bne.n	80015b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d122      	bne.n	80015b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001574:	4013      	ands	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800157a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800157c:	4293      	cmp	r3, r2
 800157e:	d119      	bne.n	80015b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	3b01      	subs	r3, #1
 800158e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d10f      	bne.n	80015b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0d0      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d910      	bls.n	8001610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 020f 	bic.w	r2, r3, #15
 80015f6:	4965      	ldr	r1, [pc, #404]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0b8      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800162e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d040      	beq.n	80016ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d115      	bne.n	80016aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e07f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e073      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06b      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f023 0203 	bic.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4936      	ldr	r1, [pc, #216]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016bc:	f7ff f9ac 	bl	8000a18 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff f9a8 	bl	8000a18 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e053      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 020c 	and.w	r2, r3, #12
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1eb      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d210      	bcs.n	800171c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 020f 	bic.w	r2, r3, #15
 8001702:	4922      	ldr	r1, [pc, #136]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e032      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4916      	ldr	r1, [pc, #88]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175a:	f000 f821 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 800175e:	4601      	mov	r1, r0
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_RCC_ClockConfig+0x1cc>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	fa21 f303 	lsr.w	r3, r1, r3
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1d0>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1d4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f85a 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00
 8001790:	40023800 	.word	0x40023800
 8001794:	08003fa0 	.word	0x08003fa0
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b6:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d007      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x32>
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d008      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x38>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 808d 	bne.w	80018e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ce:	60bb      	str	r3, [r7, #8]
      break;
 80017d0:	e08c      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d2:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <HAL_RCC_GetSysClockFreq+0x160>)
 80017d4:	60bb      	str	r3, [r7, #8]
      break;
 80017d6:	e089      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d023      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	099b      	lsrs	r3, r3, #6
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	ea03 0501 	and.w	r5, r3, r1
 8001804:	ea04 0602 	and.w	r6, r4, r2
 8001808:	4a3d      	ldr	r2, [pc, #244]	; (8001900 <HAL_RCC_GetSysClockFreq+0x160>)
 800180a:	fb02 f106 	mul.w	r1, r2, r6
 800180e:	2200      	movs	r2, #0
 8001810:	fb02 f205 	mul.w	r2, r2, r5
 8001814:	440a      	add	r2, r1
 8001816:	493a      	ldr	r1, [pc, #232]	; (8001900 <HAL_RCC_GetSysClockFreq+0x160>)
 8001818:	fba5 0101 	umull	r0, r1, r5, r1
 800181c:	1853      	adds	r3, r2, r1
 800181e:	4619      	mov	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f04f 0400 	mov.w	r4, #0
 8001826:	461a      	mov	r2, r3
 8001828:	4623      	mov	r3, r4
 800182a:	f7fe fd05 	bl	8000238 <__aeabi_uldivmod>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e049      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	f04f 0400 	mov.w	r4, #0
 8001840:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	ea03 0501 	and.w	r5, r3, r1
 800184c:	ea04 0602 	and.w	r6, r4, r2
 8001850:	4629      	mov	r1, r5
 8001852:	4632      	mov	r2, r6
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	0154      	lsls	r4, r2, #5
 800185e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001862:	014b      	lsls	r3, r1, #5
 8001864:	4619      	mov	r1, r3
 8001866:	4622      	mov	r2, r4
 8001868:	1b49      	subs	r1, r1, r5
 800186a:	eb62 0206 	sbc.w	r2, r2, r6
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	f04f 0400 	mov.w	r4, #0
 8001876:	0194      	lsls	r4, r2, #6
 8001878:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800187c:	018b      	lsls	r3, r1, #6
 800187e:	1a5b      	subs	r3, r3, r1
 8001880:	eb64 0402 	sbc.w	r4, r4, r2
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	00e2      	lsls	r2, r4, #3
 800188e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001892:	00d9      	lsls	r1, r3, #3
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	195b      	adds	r3, r3, r5
 800189a:	eb44 0406 	adc.w	r4, r4, r6
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	02a2      	lsls	r2, r4, #10
 80018a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018ac:	0299      	lsls	r1, r3, #10
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	4621      	mov	r1, r4
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f04f 0400 	mov.w	r4, #0
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	f7fe fcba 	bl	8000238 <__aeabi_uldivmod>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	3301      	adds	r3, #1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	60bb      	str	r3, [r7, #8]
      break;
 80018e4:	e002      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80018e8:	60bb      	str	r3, [r7, #8]
      break;
 80018ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ec:	68bb      	ldr	r3, [r7, #8]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	00f42400 	.word	0x00f42400
 8001900:	017d7840 	.word	0x017d7840

08001904 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_RCC_GetHCLKFreq+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001920:	f7ff fff0 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001924:	4601      	mov	r1, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0a9b      	lsrs	r3, r3, #10
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	08003fb0 	.word	0x08003fb0

08001944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001948:	f7ff ffdc 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 800194c:	4601      	mov	r1, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0b5b      	lsrs	r3, r3, #13
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	08003fb0 	.word	0x08003fb0

0800196c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	220f      	movs	r2, #15
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetClockConfig+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 020f 	and.w	r2, r3, #15
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d012      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a68      	ldr	r2, [pc, #416]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a02:	6093      	str	r3, [r2, #8]
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	4964      	ldr	r1, [pc, #400]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d017      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	4959      	ldr	r1, [pc, #356]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a48:	d101      	bne.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d017      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	494a      	ldr	r1, [pc, #296]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a84:	d101      	bne.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 808b 	beq.w	8001bca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7fe ff9e 	bl	8000a18 <HAL_GetTick>
 8001adc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7fe ff9a 	bl	8000a18 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e38f      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d035      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d02e      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d114      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7fe ff62 	bl	8000a18 <HAL_GetTick>
 8001b54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7fe ff5e 	bl	8000a18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e351      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0ee      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b86:	d111      	bne.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b96:	400b      	ands	r3, r1
 8001b98:	4901      	ldr	r1, [pc, #4]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	0ffffcff 	.word	0x0ffffcff
 8001bac:	4bb3      	ldr	r3, [pc, #716]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4ab2      	ldr	r2, [pc, #712]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bb6:	6093      	str	r3, [r2, #8]
 8001bb8:	4bb0      	ldr	r3, [pc, #704]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc4:	49ad      	ldr	r1, [pc, #692]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d010      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bd6:	4ba9      	ldr	r3, [pc, #676]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bdc:	4aa7      	ldr	r2, [pc, #668]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001be6:	4ba5      	ldr	r3, [pc, #660]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001be8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	49a2      	ldr	r1, [pc, #648]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c04:	4b9d      	ldr	r3, [pc, #628]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c12:	499a      	ldr	r1, [pc, #616]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c34:	4991      	ldr	r1, [pc, #580]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c56:	4989      	ldr	r1, [pc, #548]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c6a:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4980      	ldr	r1, [pc, #512]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4978      	ldr	r1, [pc, #480]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb4:	f023 020c 	bic.w	r2, r3, #12
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbc:	496f      	ldr	r1, [pc, #444]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4967      	ldr	r1, [pc, #412]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cf2:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d00:	495e      	ldr	r1, [pc, #376]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d14:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	4956      	ldr	r1, [pc, #344]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	494d      	ldr	r1, [pc, #308]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d58:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	4945      	ldr	r1, [pc, #276]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	493c      	ldr	r1, [pc, #240]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001daa:	4934      	ldr	r1, [pc, #208]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d011      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dcc:	492b      	ldr	r1, [pc, #172]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e54:	4909      	ldr	r1, [pc, #36]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e78:	e002      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	4986      	ldr	r1, [pc, #536]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e94:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea4:	497d      	ldr	r1, [pc, #500]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d006      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80d6 	beq.w	800206c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ec0:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a75      	ldr	r2, [pc, #468]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ec6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fda4 	bl	8000a18 <HAL_GetTick>
 8001ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ed4:	f7fe fda0 	bl	8000a18 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e195      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d021      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d11d      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f14:	4b61      	ldr	r3, [pc, #388]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1a:	0e1b      	lsrs	r3, r3, #24
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	019a      	lsls	r2, r3, #6
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	071b      	lsls	r3, r3, #28
 8001f3a:	4958      	ldr	r1, [pc, #352]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d02e      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6c:	d129      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f7c:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f82:	0f1b      	lsrs	r3, r3, #28
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	019a      	lsls	r2, r3, #6
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	061b      	lsls	r3, r3, #24
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	071b      	lsls	r3, r3, #28
 8001fa2:	493e      	ldr	r1, [pc, #248]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001faa:	4b3c      	ldr	r3, [pc, #240]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb0:	f023 021f 	bic.w	r2, r3, #31
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	4938      	ldr	r1, [pc, #224]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01d      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fce:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd4:	0e1b      	lsrs	r3, r3, #24
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe2:	0f1b      	lsrs	r3, r3, #28
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	019a      	lsls	r2, r3, #6
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	071b      	lsls	r3, r3, #28
 8002002:	4926      	ldr	r1, [pc, #152]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d011      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	019a      	lsls	r2, r3, #6
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	071b      	lsls	r3, r3, #28
 8002032:	491a      	ldr	r1, [pc, #104]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002040:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002046:	f7fe fce7 	bl	8000a18 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800204e:	f7fe fce3 	bl	8000a18 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0d8      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 80ce 	bne.w	8002210 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002080:	f7fe fcca 	bl	8000a18 <HAL_GetTick>
 8002084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002086:	e00b      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002088:	f7fe fcc6 	bl	8000a18 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d904      	bls.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0bb      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020a0:	4b5e      	ldr	r3, [pc, #376]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ac:	d0ec      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d02e      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d12a      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	0f1b      	lsrs	r3, r3, #28
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	019a      	lsls	r2, r3, #6
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	061b      	lsls	r3, r3, #24
 8002104:	431a      	orrs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	071b      	lsls	r3, r3, #28
 800210a:	4944      	ldr	r1, [pc, #272]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002112:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002118:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	493d      	ldr	r1, [pc, #244]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d022      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002140:	d11d      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	0e1b      	lsrs	r3, r3, #24
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	0f1b      	lsrs	r3, r3, #28
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	019a      	lsls	r2, r3, #6
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	431a      	orrs	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	071b      	lsls	r3, r3, #28
 8002176:	4929      	ldr	r1, [pc, #164]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d028      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	0e1b      	lsrs	r3, r3, #24
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	019a      	lsls	r2, r3, #6
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	041b      	lsls	r3, r3, #16
 80021b0:	431a      	orrs	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	071b      	lsls	r3, r3, #28
 80021be:	4917      	ldr	r1, [pc, #92]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	4911      	ldr	r1, [pc, #68]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e8:	f7fe fc16 	bl	8000a18 <HAL_GetTick>
 80021ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021f0:	f7fe fc12 	bl	8000a18 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e007      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800220a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800220e:	d1ef      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e049      	b.n	80022c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f841 	bl	80022ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 fa00 	bl	8002664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d001      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e054      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d022      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002326:	d01d      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d018      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a21      	ldr	r2, [pc, #132]	; (80023bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d013      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_TIM_Base_Start_IT+0xe8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d115      	bne.n	8002390 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_TIM_Base_Start_IT+0xec>)
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d015      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0xbe>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d011      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	e008      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e000      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40010400 	.word	0x40010400
 80023c8:	40014000 	.word	0x40014000
 80023cc:	40001800 	.word	0x40001800
 80023d0:	00010007 	.word	0x00010007

080023d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f905 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8f7 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f908 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0204 	mvn.w	r2, #4
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8db 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8cd 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8de 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b08      	cmp	r3, #8
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0208 	mvn.w	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8b1 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8a3 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8b4 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0210 	mvn.w	r2, #16
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2208      	movs	r2, #8
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f887 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f879 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f88a 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0201 	mvn.w	r2, #1
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe f8e8 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f91a 	bl	80027b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002592:	d10e      	bne.n	80025b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f90d 	bl	80027cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d10e      	bne.n	80025de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d107      	bne.n	80025de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f838 	bl	800264e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d10e      	bne.n	800260a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d107      	bne.n	800260a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0220 	mvn.w	r2, #32
 8002602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f8cd 	bl	80027a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <TIM_Base_SetConfig+0x114>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <TIM_Base_SetConfig+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002682:	d00f      	beq.n	80026a4 <TIM_Base_SetConfig+0x40>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3d      	ldr	r2, [pc, #244]	; (800277c <TIM_Base_SetConfig+0x118>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00b      	beq.n	80026a4 <TIM_Base_SetConfig+0x40>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3c      	ldr	r2, [pc, #240]	; (8002780 <TIM_Base_SetConfig+0x11c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_Base_SetConfig+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <TIM_Base_SetConfig+0x120>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_Base_SetConfig+0x40>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <TIM_Base_SetConfig+0x124>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d108      	bne.n	80026b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <TIM_Base_SetConfig+0x114>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02b      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d027      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a2c      	ldr	r2, [pc, #176]	; (800277c <TIM_Base_SetConfig+0x118>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d023      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <TIM_Base_SetConfig+0x11c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <TIM_Base_SetConfig+0x120>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01b      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a29      	ldr	r2, [pc, #164]	; (8002788 <TIM_Base_SetConfig+0x124>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d017      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a28      	ldr	r2, [pc, #160]	; (800278c <TIM_Base_SetConfig+0x128>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <TIM_Base_SetConfig+0x12c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00f      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <TIM_Base_SetConfig+0x130>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00b      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a25      	ldr	r2, [pc, #148]	; (8002798 <TIM_Base_SetConfig+0x134>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <TIM_Base_SetConfig+0x138>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d003      	beq.n	8002716 <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <TIM_Base_SetConfig+0x13c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d108      	bne.n	8002728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <TIM_Base_SetConfig+0x114>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d003      	beq.n	800275c <TIM_Base_SetConfig+0xf8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <TIM_Base_SetConfig+0x124>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d103      	bne.n	8002764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	615a      	str	r2, [r3, #20]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40010000 	.word	0x40010000
 800277c:	40000400 	.word	0x40000400
 8002780:	40000800 	.word	0x40000800
 8002784:	40000c00 	.word	0x40000c00
 8002788:	40010400 	.word	0x40010400
 800278c:	40014000 	.word	0x40014000
 8002790:	40014400 	.word	0x40014400
 8002794:	40014800 	.word	0x40014800
 8002798:	40001800 	.word	0x40001800
 800279c:	40001c00 	.word	0x40001c00
 80027a0:	40002000 	.word	0x40002000

080027a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e040      	b.n	8002874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd ffca 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fbf2 	bl	8003008 <UART_SetConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e022      	b.n	8002874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fe46 	bl	80034c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fecd 	bl	800360c <UART_CheckIdleState>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800287c:	b480      	push	{r7}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288e:	2b20      	cmp	r3, #32
 8002890:	d156      	bne.n	8002940 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_UART_Transmit_IT+0x22>
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e04f      	b.n	8002942 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Transmit_IT+0x34>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e048      	b.n	8002942 <HAL_UART_Transmit_IT+0xc6>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2221      	movs	r2, #33	; 0x21
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	d107      	bne.n	80028fc <HAL_UART_Transmit_IT+0x80>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_UART_Transmit_IT+0xd4>)
 80028f8:	669a      	str	r2, [r3, #104]	; 0x68
 80028fa:	e002      	b.n	8002902 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_UART_Transmit_IT+0xd8>)
 8002900:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	613b      	str	r3, [r7, #16]
   return(result);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	69f9      	ldr	r1, [r7, #28]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	61bb      	str	r3, [r7, #24]
   return(result);
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e6      	bne.n	800290a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	372c      	adds	r7, #44	; 0x2c
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	08003b65 	.word	0x08003b65
 8002954:	08003aaf 	.word	0x08003aaf

08002958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296a:	2b20      	cmp	r3, #32
 800296c:	d13d      	bne.n	80029ea <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_Receive_IT+0x22>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e036      	b.n	80029ec <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_UART_Receive_IT+0x34>
 8002988:	2302      	movs	r3, #2
 800298a:	e02f      	b.n	80029ec <HAL_UART_Receive_IT+0x94>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d018      	beq.n	80029da <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	613b      	str	r3, [r7, #16]
   return(result);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	69f9      	ldr	r1, [r7, #28]
 80029cc:	6a3a      	ldr	r2, [r7, #32]
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e6      	bne.n	80029a8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	461a      	mov	r2, r3
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 ff21 	bl	8003828 <UART_Start_Receive_IT>
 80029e6:	4603      	mov	r3, r0
 80029e8:	e000      	b.n	80029ec <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3728      	adds	r7, #40	; 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0ba      	sub	sp, #232	; 0xe8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a22:	4013      	ands	r3, r2
 8002a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d115      	bne.n	8002a5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00f      	beq.n	8002a5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 82a5 	beq.w	8002f9c <HAL_UART_IRQHandler+0x5a8>
      {
        huart->RxISR(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
      }
      return;
 8002a5a:	e29f      	b.n	8002f9c <HAL_UART_IRQHandler+0x5a8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8117 	beq.w	8002c94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a76:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <HAL_UART_IRQHandler+0x298>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 810a 	beq.w	8002c94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d011      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xbc>
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d011      	beq.n	8002ae0 <HAL_UART_IRQHandler+0xec>
 8002abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2202      	movs	r2, #2
 8002ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad6:	f043 0204 	orr.w	r2, r3, #4
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d011      	beq.n	8002b10 <HAL_UART_IRQHandler+0x11c>
 8002aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2204      	movs	r2, #4
 8002afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b06:	f043 0202 	orr.w	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b42:	f043 0208 	orr.w	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d012      	beq.n	8002b7e <HAL_UART_IRQHandler+0x18a>
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 820b 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x5ac>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d005      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04f      	beq.n	8002c76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fef0 	bl	80039bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d141      	bne.n	8002c6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3308      	adds	r3, #8
 8002c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1d9      	bne.n	8002bea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_UART_IRQHandler+0x29c>)
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f842 	bl	8000cd4 <HAL_DMA_Abort_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002c60:	4610      	mov	r0, r2
 8002c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00f      	b.n	8002c86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9ae 	bl	8002fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00b      	b.n	8002c86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f9aa 	bl	8002fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e007      	b.n	8002c86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9a6 	bl	8002fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c84:	e18c      	b.n	8002fa0 <HAL_UART_IRQHandler+0x5ac>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c86:	bf00      	nop
    return;
 8002c88:	e18a      	b.n	8002fa0 <HAL_UART_IRQHandler+0x5ac>
 8002c8a:	bf00      	nop
 8002c8c:	04000120 	.word	0x04000120
 8002c90:	08003a83 	.word	0x08003a83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 8144 	bne.w	8002f26 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 813d 	beq.w	8002f26 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8136 	beq.w	8002f26 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	f040 80b2 	bne.w	8002e36 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 815e 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	f080 8156 	bcs.w	8002fa4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	f000 8085 	beq.w	8002e1a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1da      	bne.n	8002d10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3308      	adds	r3, #8
 8002d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e1      	bne.n	8002d5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dea:	f023 0310 	bic.w	r3, r3, #16
 8002dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dfe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e4      	bne.n	8002dda <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd feed 	bl	8000bf4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8d4 	bl	8002fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e34:	e0b6      	b.n	8002fa4 <HAL_UART_IRQHandler+0x5b0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a8 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x5b4>
          && (nb_rx_data > 0U))
 8002e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a3 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x5b4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
 8002e86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e4      	bne.n	8002e62 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ebc:	633a      	str	r2, [r7, #48]	; 0x30
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e3      	bne.n	8002e98 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	617b      	str	r3, [r7, #20]
   return(result);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e4      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f85c 	bl	8002fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f24:	e040      	b.n	8002fa8 <HAL_UART_IRQHandler+0x5b4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00e      	beq.n	8002f50 <HAL_UART_IRQHandler+0x55c>
 8002f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f853 	bl	8002ff4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f4e:	e02e      	b.n	8002fae <HAL_UART_IRQHandler+0x5ba>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01d      	beq.n	8002fac <HAL_UART_IRQHandler+0x5b8>
    {
      huart->TxISR(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    }
    return;
 8002f78:	e018      	b.n	8002fac <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d013      	beq.n	8002fae <HAL_UART_IRQHandler+0x5ba>
 8002f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <HAL_UART_IRQHandler+0x5ba>
  {
    UART_EndTransmit_IT(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fe46 	bl	8003c24 <UART_EndTransmit_IT>
    return;
 8002f98:	bf00      	nop
 8002f9a:	e008      	b.n	8002fae <HAL_UART_IRQHandler+0x5ba>
      return;
 8002f9c:	bf00      	nop
 8002f9e:	e006      	b.n	8002fae <HAL_UART_IRQHandler+0x5ba>
    return;
 8002fa0:	bf00      	nop
 8002fa2:	e004      	b.n	8002fae <HAL_UART_IRQHandler+0x5ba>
      return;
 8002fa4:	bf00      	nop
 8002fa6:	e002      	b.n	8002fae <HAL_UART_IRQHandler+0x5ba>
      return;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_UART_IRQHandler+0x5ba>
    return;
 8002fac:	bf00      	nop
  }

}
 8002fae:	37e8      	adds	r7, #232	; 0xe8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4bb1      	ldr	r3, [pc, #708]	; (80032f8 <UART_SetConfig+0x2f0>)
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	430b      	orrs	r3, r1
 800303e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a9f      	ldr	r2, [pc, #636]	; (80032fc <UART_SetConfig+0x2f4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d121      	bne.n	80030c8 <UART_SetConfig+0xc0>
 8003084:	4b9e      	ldr	r3, [pc, #632]	; (8003300 <UART_SetConfig+0x2f8>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d816      	bhi.n	80030c0 <UART_SetConfig+0xb8>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x90>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030b5 	.word	0x080030b5
 80030a0:	080030af 	.word	0x080030af
 80030a4:	080030bb 	.word	0x080030bb
 80030a8:	2301      	movs	r3, #1
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e151      	b.n	8003352 <UART_SetConfig+0x34a>
 80030ae:	2302      	movs	r3, #2
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e14e      	b.n	8003352 <UART_SetConfig+0x34a>
 80030b4:	2304      	movs	r3, #4
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e14b      	b.n	8003352 <UART_SetConfig+0x34a>
 80030ba:	2308      	movs	r3, #8
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e148      	b.n	8003352 <UART_SetConfig+0x34a>
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	bf00      	nop
 80030c6:	e144      	b.n	8003352 <UART_SetConfig+0x34a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a8d      	ldr	r2, [pc, #564]	; (8003304 <UART_SetConfig+0x2fc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d134      	bne.n	800313c <UART_SetConfig+0x134>
 80030d2:	4b8b      	ldr	r3, [pc, #556]	; (8003300 <UART_SetConfig+0x2f8>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d829      	bhi.n	8003134 <UART_SetConfig+0x12c>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <UART_SetConfig+0xe0>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	08003135 	.word	0x08003135
 80030f0:	08003135 	.word	0x08003135
 80030f4:	08003135 	.word	0x08003135
 80030f8:	08003129 	.word	0x08003129
 80030fc:	08003135 	.word	0x08003135
 8003100:	08003135 	.word	0x08003135
 8003104:	08003135 	.word	0x08003135
 8003108:	08003123 	.word	0x08003123
 800310c:	08003135 	.word	0x08003135
 8003110:	08003135 	.word	0x08003135
 8003114:	08003135 	.word	0x08003135
 8003118:	0800312f 	.word	0x0800312f
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e117      	b.n	8003352 <UART_SetConfig+0x34a>
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e114      	b.n	8003352 <UART_SetConfig+0x34a>
 8003128:	2304      	movs	r3, #4
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e111      	b.n	8003352 <UART_SetConfig+0x34a>
 800312e:	2308      	movs	r3, #8
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e10e      	b.n	8003352 <UART_SetConfig+0x34a>
 8003134:	2310      	movs	r3, #16
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	bf00      	nop
 800313a:	e10a      	b.n	8003352 <UART_SetConfig+0x34a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a71      	ldr	r2, [pc, #452]	; (8003308 <UART_SetConfig+0x300>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d120      	bne.n	8003188 <UART_SetConfig+0x180>
 8003146:	4b6e      	ldr	r3, [pc, #440]	; (8003300 <UART_SetConfig+0x2f8>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003150:	2b10      	cmp	r3, #16
 8003152:	d00f      	beq.n	8003174 <UART_SetConfig+0x16c>
 8003154:	2b10      	cmp	r3, #16
 8003156:	d802      	bhi.n	800315e <UART_SetConfig+0x156>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0x160>
 800315c:	e010      	b.n	8003180 <UART_SetConfig+0x178>
 800315e:	2b20      	cmp	r3, #32
 8003160:	d005      	beq.n	800316e <UART_SetConfig+0x166>
 8003162:	2b30      	cmp	r3, #48	; 0x30
 8003164:	d009      	beq.n	800317a <UART_SetConfig+0x172>
 8003166:	e00b      	b.n	8003180 <UART_SetConfig+0x178>
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e0f1      	b.n	8003352 <UART_SetConfig+0x34a>
 800316e:	2302      	movs	r3, #2
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e0ee      	b.n	8003352 <UART_SetConfig+0x34a>
 8003174:	2304      	movs	r3, #4
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e0eb      	b.n	8003352 <UART_SetConfig+0x34a>
 800317a:	2308      	movs	r3, #8
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e0e8      	b.n	8003352 <UART_SetConfig+0x34a>
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	bf00      	nop
 8003186:	e0e4      	b.n	8003352 <UART_SetConfig+0x34a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5f      	ldr	r2, [pc, #380]	; (800330c <UART_SetConfig+0x304>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d120      	bne.n	80031d4 <UART_SetConfig+0x1cc>
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <UART_SetConfig+0x2f8>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d00f      	beq.n	80031c0 <UART_SetConfig+0x1b8>
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d802      	bhi.n	80031aa <UART_SetConfig+0x1a2>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <UART_SetConfig+0x1ac>
 80031a8:	e010      	b.n	80031cc <UART_SetConfig+0x1c4>
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d005      	beq.n	80031ba <UART_SetConfig+0x1b2>
 80031ae:	2bc0      	cmp	r3, #192	; 0xc0
 80031b0:	d009      	beq.n	80031c6 <UART_SetConfig+0x1be>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x1c4>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e0cb      	b.n	8003352 <UART_SetConfig+0x34a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e0c8      	b.n	8003352 <UART_SetConfig+0x34a>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e0c5      	b.n	8003352 <UART_SetConfig+0x34a>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e0c2      	b.n	8003352 <UART_SetConfig+0x34a>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	bf00      	nop
 80031d2:	e0be      	b.n	8003352 <UART_SetConfig+0x34a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <UART_SetConfig+0x308>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d124      	bne.n	8003228 <UART_SetConfig+0x220>
 80031de:	4b48      	ldr	r3, [pc, #288]	; (8003300 <UART_SetConfig+0x2f8>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ec:	d012      	beq.n	8003214 <UART_SetConfig+0x20c>
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	d802      	bhi.n	80031fa <UART_SetConfig+0x1f2>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <UART_SetConfig+0x200>
 80031f8:	e012      	b.n	8003220 <UART_SetConfig+0x218>
 80031fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fe:	d006      	beq.n	800320e <UART_SetConfig+0x206>
 8003200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003204:	d009      	beq.n	800321a <UART_SetConfig+0x212>
 8003206:	e00b      	b.n	8003220 <UART_SetConfig+0x218>
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e0a1      	b.n	8003352 <UART_SetConfig+0x34a>
 800320e:	2302      	movs	r3, #2
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e09e      	b.n	8003352 <UART_SetConfig+0x34a>
 8003214:	2304      	movs	r3, #4
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e09b      	b.n	8003352 <UART_SetConfig+0x34a>
 800321a:	2308      	movs	r3, #8
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e098      	b.n	8003352 <UART_SetConfig+0x34a>
 8003220:	2310      	movs	r3, #16
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	bf00      	nop
 8003226:	e094      	b.n	8003352 <UART_SetConfig+0x34a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a39      	ldr	r2, [pc, #228]	; (8003314 <UART_SetConfig+0x30c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d124      	bne.n	800327c <UART_SetConfig+0x274>
 8003232:	4b33      	ldr	r3, [pc, #204]	; (8003300 <UART_SetConfig+0x2f8>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d012      	beq.n	8003268 <UART_SetConfig+0x260>
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d802      	bhi.n	800324e <UART_SetConfig+0x246>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <UART_SetConfig+0x254>
 800324c:	e012      	b.n	8003274 <UART_SetConfig+0x26c>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003252:	d006      	beq.n	8003262 <UART_SetConfig+0x25a>
 8003254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003258:	d009      	beq.n	800326e <UART_SetConfig+0x266>
 800325a:	e00b      	b.n	8003274 <UART_SetConfig+0x26c>
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e077      	b.n	8003352 <UART_SetConfig+0x34a>
 8003262:	2302      	movs	r3, #2
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e074      	b.n	8003352 <UART_SetConfig+0x34a>
 8003268:	2304      	movs	r3, #4
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e071      	b.n	8003352 <UART_SetConfig+0x34a>
 800326e:	2308      	movs	r3, #8
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e06e      	b.n	8003352 <UART_SetConfig+0x34a>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	bf00      	nop
 800327a:	e06a      	b.n	8003352 <UART_SetConfig+0x34a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <UART_SetConfig+0x310>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d124      	bne.n	80032d0 <UART_SetConfig+0x2c8>
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <UART_SetConfig+0x2f8>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003294:	d012      	beq.n	80032bc <UART_SetConfig+0x2b4>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	d802      	bhi.n	80032a2 <UART_SetConfig+0x29a>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <UART_SetConfig+0x2a8>
 80032a0:	e012      	b.n	80032c8 <UART_SetConfig+0x2c0>
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a6:	d006      	beq.n	80032b6 <UART_SetConfig+0x2ae>
 80032a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032ac:	d009      	beq.n	80032c2 <UART_SetConfig+0x2ba>
 80032ae:	e00b      	b.n	80032c8 <UART_SetConfig+0x2c0>
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e04d      	b.n	8003352 <UART_SetConfig+0x34a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e04a      	b.n	8003352 <UART_SetConfig+0x34a>
 80032bc:	2304      	movs	r3, #4
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e047      	b.n	8003352 <UART_SetConfig+0x34a>
 80032c2:	2308      	movs	r3, #8
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e044      	b.n	8003352 <UART_SetConfig+0x34a>
 80032c8:	2310      	movs	r3, #16
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	bf00      	nop
 80032ce:	e040      	b.n	8003352 <UART_SetConfig+0x34a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <UART_SetConfig+0x314>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d139      	bne.n	800334e <UART_SetConfig+0x346>
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <UART_SetConfig+0x2f8>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e8:	d027      	beq.n	800333a <UART_SetConfig+0x332>
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ee:	d817      	bhi.n	8003320 <UART_SetConfig+0x318>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <UART_SetConfig+0x326>
 80032f4:	e027      	b.n	8003346 <UART_SetConfig+0x33e>
 80032f6:	bf00      	nop
 80032f8:	efff69f3 	.word	0xefff69f3
 80032fc:	40011000 	.word	0x40011000
 8003300:	40023800 	.word	0x40023800
 8003304:	40004400 	.word	0x40004400
 8003308:	40004800 	.word	0x40004800
 800330c:	40004c00 	.word	0x40004c00
 8003310:	40005000 	.word	0x40005000
 8003314:	40011400 	.word	0x40011400
 8003318:	40007800 	.word	0x40007800
 800331c:	40007c00 	.word	0x40007c00
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	d006      	beq.n	8003334 <UART_SetConfig+0x32c>
 8003326:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800332a:	d009      	beq.n	8003340 <UART_SetConfig+0x338>
 800332c:	e00b      	b.n	8003346 <UART_SetConfig+0x33e>
 800332e:	2300      	movs	r3, #0
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e00e      	b.n	8003352 <UART_SetConfig+0x34a>
 8003334:	2302      	movs	r3, #2
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e00b      	b.n	8003352 <UART_SetConfig+0x34a>
 800333a:	2304      	movs	r3, #4
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e008      	b.n	8003352 <UART_SetConfig+0x34a>
 8003340:	2308      	movs	r3, #8
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e005      	b.n	8003352 <UART_SetConfig+0x34a>
 8003346:	2310      	movs	r3, #16
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	bf00      	nop
 800334c:	e001      	b.n	8003352 <UART_SetConfig+0x34a>
 800334e:	2310      	movs	r3, #16
 8003350:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335a:	d15a      	bne.n	8003412 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800335c:	7ffb      	ldrb	r3, [r7, #31]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d827      	bhi.n	80033b2 <UART_SetConfig+0x3aa>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0x360>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	0800338d 	.word	0x0800338d
 800336c:	08003395 	.word	0x08003395
 8003370:	0800339d 	.word	0x0800339d
 8003374:	080033b3 	.word	0x080033b3
 8003378:	080033a3 	.word	0x080033a3
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033b3 	.word	0x080033b3
 8003384:	080033b3 	.word	0x080033b3
 8003388:	080033ab 	.word	0x080033ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7fe fac6 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8003390:	61b8      	str	r0, [r7, #24]
        break;
 8003392:	e013      	b.n	80033bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003394:	f7fe fad6 	bl	8001944 <HAL_RCC_GetPCLK2Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e00f      	b.n	80033bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b49      	ldr	r3, [pc, #292]	; (80034c4 <UART_SetConfig+0x4bc>)
 800339e:	61bb      	str	r3, [r7, #24]
        break;
 80033a0:	e00c      	b.n	80033bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7fe f9fd 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 80033a6:	61b8      	str	r0, [r7, #24]
        break;
 80033a8:	e008      	b.n	80033bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e004      	b.n	80033bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	77bb      	strb	r3, [r7, #30]
        break;
 80033ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d074      	beq.n	80034ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	005a      	lsls	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	441a      	add	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	d916      	bls.n	800340c <UART_SetConfig+0x404>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d212      	bcs.n	800340c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f023 030f 	bic.w	r3, r3, #15
 80033ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	89fb      	ldrh	r3, [r7, #14]
 80033fe:	4313      	orrs	r3, r2
 8003400:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	89fa      	ldrh	r2, [r7, #14]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	e04f      	b.n	80034ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77bb      	strb	r3, [r7, #30]
 8003410:	e04c      	b.n	80034ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d828      	bhi.n	800346a <UART_SetConfig+0x462>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x418>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003445 	.word	0x08003445
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003455 	.word	0x08003455
 800342c:	0800346b 	.word	0x0800346b
 8003430:	0800345b 	.word	0x0800345b
 8003434:	0800346b 	.word	0x0800346b
 8003438:	0800346b 	.word	0x0800346b
 800343c:	0800346b 	.word	0x0800346b
 8003440:	08003463 	.word	0x08003463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7fe fa6a 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8003448:	61b8      	str	r0, [r7, #24]
        break;
 800344a:	e013      	b.n	8003474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800344c:	f7fe fa7a 	bl	8001944 <HAL_RCC_GetPCLK2Freq>
 8003450:	61b8      	str	r0, [r7, #24]
        break;
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <UART_SetConfig+0x4bc>)
 8003456:	61bb      	str	r3, [r7, #24]
        break;
 8003458:	e00c      	b.n	8003474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345a:	f7fe f9a1 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 800345e:	61b8      	str	r0, [r7, #24]
        break;
 8003460:	e008      	b.n	8003474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	61bb      	str	r3, [r7, #24]
        break;
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	77bb      	strb	r3, [r7, #30]
        break;
 8003472:	bf00      	nop
    }

    if (pclk != 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	085a      	lsrs	r2, r3, #1
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	441a      	add	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d909      	bls.n	80034a8 <UART_SetConfig+0x4a0>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d205      	bcs.n	80034a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	e001      	b.n	80034ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	00f42400 	.word	0x00f42400

080034c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01a      	beq.n	80035de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c6:	d10a      	bne.n	80035de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af02      	add	r7, sp, #8
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800361c:	f7fd f9fc 	bl	8000a18 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d10e      	bne.n	800364e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f82d 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e023      	b.n	8003696 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d10e      	bne.n	800367a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f817 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e00d      	b.n	8003696 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b09c      	sub	sp, #112	; 0x70
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	e0a5      	b.n	80037fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	f000 80a1 	beq.w	80037fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fd f9ad 	bl	8000a18 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80036ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d13e      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e4:	667b      	str	r3, [r7, #100]	; 0x64
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e6      	bne.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3308      	adds	r3, #8
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	663b      	str	r3, [r7, #96]	; 0x60
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003722:	64ba      	str	r2, [r7, #72]	; 0x48
 8003724:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e067      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d04f      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376a:	d147      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800378a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
 8003796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800379a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037c8:	623a      	str	r2, [r7, #32]
 80037ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	69f9      	ldr	r1, [r7, #28]
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e010      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	429a      	cmp	r2, r3
 8003818:	f43f af4a 	beq.w	80036b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3770      	adds	r7, #112	; 0x70
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003828:	b480      	push	{r7}
 800382a:	b097      	sub	sp, #92	; 0x5c
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d10e      	bne.n	800387a <UART_Start_Receive_IT+0x52>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <UART_Start_Receive_IT+0x48>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f240 12ff 	movw	r2, #511	; 0x1ff
 800386a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800386e:	e02d      	b.n	80038cc <UART_Start_Receive_IT+0xa4>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	22ff      	movs	r2, #255	; 0xff
 8003874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003878:	e028      	b.n	80038cc <UART_Start_Receive_IT+0xa4>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <UART_Start_Receive_IT+0x76>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <UART_Start_Receive_IT+0x6c>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003892:	e01b      	b.n	80038cc <UART_Start_Receive_IT+0xa4>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	227f      	movs	r2, #127	; 0x7f
 8003898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800389c:	e016      	b.n	80038cc <UART_Start_Receive_IT+0xa4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038a6:	d10d      	bne.n	80038c4 <UART_Start_Receive_IT+0x9c>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <UART_Start_Receive_IT+0x92>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	227f      	movs	r2, #127	; 0x7f
 80038b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038b8:	e008      	b.n	80038cc <UART_Start_Receive_IT+0xa4>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	223f      	movs	r2, #63	; 0x3f
 80038be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038c2:	e003      	b.n	80038cc <UART_Start_Receive_IT+0xa4>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2222      	movs	r2, #34	; 0x22
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	657b      	str	r3, [r7, #84]	; 0x54
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003916:	d107      	bne.n	8003928 <UART_Start_Receive_IT+0x100>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <UART_Start_Receive_IT+0x18c>)
 8003924:	665a      	str	r2, [r3, #100]	; 0x64
 8003926:	e002      	b.n	800392e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <UART_Start_Receive_IT+0x190>)
 800392c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d019      	beq.n	8003972 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
 800395e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e6      	bne.n	800393e <UART_Start_Receive_IT+0x116>
 8003970:	e018      	b.n	80039a4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	613b      	str	r3, [r7, #16]
   return(result);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f043 0320 	orr.w	r3, r3, #32
 8003986:	653b      	str	r3, [r7, #80]	; 0x50
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	69f9      	ldr	r1, [r7, #28]
 8003996:	6a3a      	ldr	r2, [r7, #32]
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	61bb      	str	r3, [r7, #24]
   return(result);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e6      	bne.n	8003972 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	375c      	adds	r7, #92	; 0x5c
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	08003dd5 	.word	0x08003dd5
 80039b8:	08003c79 	.word	0x08003c79

080039bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b095      	sub	sp, #84	; 0x54
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
 80039e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3308      	adds	r3, #8
 8003a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e5      	bne.n	80039f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d118      	bne.n	8003a64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f023 0310 	bic.w	r3, r3, #16
 8003a46:	647b      	str	r3, [r7, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6979      	ldr	r1, [r7, #20]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a76:	bf00      	nop
 8003a78:	3754      	adds	r7, #84	; 0x54
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff fa91 	bl	8002fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b08f      	sub	sp, #60	; 0x3c
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aba:	2b21      	cmp	r3, #33	; 0x21
 8003abc:	d14c      	bne.n	8003b58 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d132      	bne.n	8003b30 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6979      	ldr	r1, [r7, #20]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	613b      	str	r3, [r7, #16]
   return(result);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e6      	bne.n	8003afc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003b2e:	e013      	b.n	8003b58 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003b58:	bf00      	nop
 8003b5a:	373c      	adds	r7, #60	; 0x3c
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b091      	sub	sp, #68	; 0x44
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b70:	2b21      	cmp	r3, #33	; 0x21
 8003b72:	d151      	bne.n	8003c18 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d132      	bne.n	8003be6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e6      	bne.n	8003b80 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e6      	bne.n	8003bb2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003be4:	e018      	b.n	8003c18 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	1c9a      	adds	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003c18:	bf00      	nop
 8003c1a:	3744      	adds	r7, #68	; 0x44
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	613b      	str	r3, [r7, #16]
   return(result);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff f9a2 	bl	8002fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c70:	bf00      	nop
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b096      	sub	sp, #88	; 0x58
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c8e:	2b22      	cmp	r3, #34	; 0x22
 8003c90:	f040 8094 	bne.w	8003dbc <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ca2:	b2d9      	uxtb	r1, r3
 8003ca4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	400a      	ands	r2, r1
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d177      	bne.n	8003dcc <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003cfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e6      	bne.n	8003cdc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3308      	adds	r3, #8
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d12e      	bne.n	8003db4 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
 8003d70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	617b      	str	r3, [r7, #20]
   return(result);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d103      	bne.n	8003da4 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2210      	movs	r2, #16
 8003da2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff f915 	bl	8002fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003db2:	e00b      	b.n	8003dcc <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fc fca1 	bl	80006fc <HAL_UART_RxCpltCallback>
}
 8003dba:	e007      	b.n	8003dcc <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	619a      	str	r2, [r3, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	3758      	adds	r7, #88	; 0x58
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b096      	sub	sp, #88	; 0x58
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003de2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dea:	2b22      	cmp	r3, #34	; 0x22
 8003dec:	f040 8094 	bne.w	8003f18 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e00:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003e04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d177      	bne.n	8003f28 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d12e      	bne.n	8003f10 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e6      	bne.n	8003eb8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d103      	bne.n	8003f00 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2210      	movs	r2, #16
 8003efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff f867 	bl	8002fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f0e:	e00b      	b.n	8003f28 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fc fbf3 	bl	80006fc <HAL_UART_RxCpltCallback>
}
 8003f16:	e007      	b.n	8003f28 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	619a      	str	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	3758      	adds	r7, #88	; 0x58
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4e0d      	ldr	r6, [pc, #52]	; (8003f68 <__libc_init_array+0x38>)
 8003f34:	4c0d      	ldr	r4, [pc, #52]	; (8003f6c <__libc_init_array+0x3c>)
 8003f36:	1ba4      	subs	r4, r4, r6
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	42a5      	cmp	r5, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	4e0b      	ldr	r6, [pc, #44]	; (8003f70 <__libc_init_array+0x40>)
 8003f42:	4c0c      	ldr	r4, [pc, #48]	; (8003f74 <__libc_init_array+0x44>)
 8003f44:	f000 f820 	bl	8003f88 <_init>
 8003f48:	1ba4      	subs	r4, r4, r6
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	42a5      	cmp	r5, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f58:	4798      	blx	r3
 8003f5a:	3501      	adds	r5, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f62:	4798      	blx	r3
 8003f64:	3501      	adds	r5, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	08003fc0 	.word	0x08003fc0
 8003f6c:	08003fc0 	.word	0x08003fc0
 8003f70:	08003fc0 	.word	0x08003fc0
 8003f74:	08003fc4 	.word	0x08003fc4

08003f78 <memset>:
 8003f78:	4402      	add	r2, r0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <memset+0xa>
 8003f80:	4770      	bx	lr
 8003f82:	f803 1b01 	strb.w	r1, [r3], #1
 8003f86:	e7f9      	b.n	8003f7c <memset+0x4>

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
