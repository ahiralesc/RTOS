
F413ZHT6_CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a4  080054a4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080054ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004128  20000088  08005534  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041b0  08005534  000241b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001585e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e24  00000000  00000000  00035916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00038740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b42  00000000  00000000  0003a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe4  00000000  00000000  0005d41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5da4  00000000  00000000  000713fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001471a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  001471f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000088 	.word	0x20000088
 80001fc:	00000000 	.word	0x00000000
 8000200:	080053a8 	.word	0x080053a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	080053a8 	.word	0x080053a8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000a4 	.word	0x200000a4
 8000554:	20000158 	.word	0x20000158

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b08e      	sub	sp, #56	; 0x38
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fc5d 	bl	8000e1c <HAL_Init>
  //rcb.head = -1;
  //rcb.tail = -1;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f849 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f8ef 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 800056a:	f000 f8cd 	bl	8000708 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800056e:	f000 f8a1 	bl	80006b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rcb.rxb, RX_RB_SZ);
 8000572:	2205      	movs	r2, #5
 8000574:	4919      	ldr	r1, [pc, #100]	; (80005dc <main+0x84>)
 8000576:	481a      	ldr	r0, [pc, #104]	; (80005e0 <main+0x88>)
 8000578:	f002 fa9b 	bl	8002ab2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <main+0x8c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0x8c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 0208 	bic.w	r2, r2, #8
 800058a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <main+0x90>)
 800058e:	f107 041c 	add.w	r4, r7, #28
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fb99 	bl	8003cde <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x94>)
 80005b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of consumerTask */
  osThreadDef(consumerTask, consumerTaskHook, osPriorityNormal, 0, 128);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <main+0x98>)
 80005b4:	463c      	mov	r4, r7
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  consumerTaskHandle = osThreadCreate(osThread(consumerTask), NULL);
 80005c4:	463b      	mov	r3, r7
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fb88 	bl	8003cde <osThreadCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <main+0x9c>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f003 fb7c 	bl	8003cd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x80>
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000358 	.word	0x20000358
 80005e4:	2000039c 	.word	0x2000039c
 80005e8:	080053dc 	.word	0x080053dc
 80005ec:	200003fc 	.word	0x200003fc
 80005f0:	080053f8 	.word	0x080053f8
 80005f4:	20000400 	.word	0x20000400

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	; 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fe04 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xb4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <SystemClock_Config+0xb8>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fca3 	bl	8001fb4 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000674:	f000 fa3c 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fa7c 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069e:	f000 fa27 	bl	8000af0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART3_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ec:	f002 f994 	bl	8002a18 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f9fb 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000358 	.word	0x20000358
 8000704:	40004800 	.word	0x40004800

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x3c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x3c>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2105      	movs	r1, #5
 800072e:	200c      	movs	r0, #12
 8000730:	f000 fc6e 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000734:	200c      	movs	r0, #12
 8000736:	f000 fc87 	bl	8001048 <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_GPIO_Init+0x4c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <MX_GPIO_Init+0x4c>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_GPIO_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_GPIO_Init+0x4c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <MX_GPIO_Init+0x4c>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_GPIO_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t rxb_sz){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]

	if( huart->Instance == USART3) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a66      	ldr	r2, [pc, #408]	; (8000944 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	f040 80c5 	bne.w	800093a <HAL_UARTEx_RxEventCallback+0x1a2>

		// The is space in front of the buffer
		if( rcb.head > rcb.tail  && rxb_sz <= (RX_RCB_SZ - (rcb.head - rcb.tail )) )
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80007b2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80007b6:	4b64      	ldr	r3, [pc, #400]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80007b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dd48      	ble.n	8000852 <HAL_UARTEx_RxEventCallback+0xba>
 80007c0:	887a      	ldrh	r2, [r7, #2]
 80007c2:	4b61      	ldr	r3, [pc, #388]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80007c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4b5f      	ldr	r3, [pc, #380]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80007cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80007d0:	1acb      	subs	r3, r1, r3
 80007d2:	f1c3 030a 	rsb	r3, r3, #10
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dc3b      	bgt.n	8000852 <HAL_UARTEx_RxEventCallback+0xba>
		{
			// write at the free locations at the end of the buffer
			int16_t k = ((RX_RCB_SZ - rcb.head) > rxb_sz)? rxb_sz : RX_RCB_SZ - rcb.head;
 80007da:	4b5b      	ldr	r3, [pc, #364]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80007dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80007e0:	f1c3 020a 	rsb	r2, r3, #10
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	4293      	cmp	r3, r2
 80007e8:	bfa8      	it	ge
 80007ea:	4613      	movge	r3, r2
 80007ec:	81fb      	strh	r3, [r7, #14]
			memcpy( (uint8_t *) rcb.rxcb + rcb.head, (uint8_t *) rcb.rxb, k );
 80007ee:	4b56      	ldr	r3, [pc, #344]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80007f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b55      	ldr	r3, [pc, #340]	; (800094c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80007f8:	4413      	add	r3, r2
 80007fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007fe:	4952      	ldr	r1, [pc, #328]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000800:	4618      	mov	r0, r3
 8000802:	f004 fcf9 	bl	80051f8 <memcpy>
			if(  (rxb_sz - k) > 0 )
 8000806:	887a      	ldrh	r2, [r7, #2]
 8000808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	dd0b      	ble.n	800082a <HAL_UARTEx_RxEventCallback+0x92>
				memcpy( (uint8_t *) rcb.rxcb, (uint8_t *) rcb.rxb + k, (rxb_sz - k) );
 8000812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000816:	4a4c      	ldr	r2, [pc, #304]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000818:	1899      	adds	r1, r3, r2
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4849      	ldr	r0, [pc, #292]	; (800094c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000826:	f004 fce7 	bl	80051f8 <memcpy>
			rcb.head = rcb.head + rxb_sz % RX_RCB_SZ;
 800082a:	4b47      	ldr	r3, [pc, #284]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800082c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000830:	b298      	uxth	r0, r3
 8000832:	887a      	ldrh	r2, [r7, #2]
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000836:	fba3 1302 	umull	r1, r3, r3, r2
 800083a:	08d9      	lsrs	r1, r3, #3
 800083c:	460b      	mov	r3, r1
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	b29b      	uxth	r3, r3
 8000848:	4403      	add	r3, r0
 800084a:	b29b      	uxth	r3, r3
 800084c:	b21a      	sxth	r2, r3
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000850:	821a      	strh	r2, [r3, #16]
		}


		// There is space somewhere in the beginning of the buffer
		if( rcb.head < rcb.tail &&  rxb_sz <= (RX_RCB_SZ - abs(rcb.head - rcb.tail )) )
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000854:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000858:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800085a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800085e:	429a      	cmp	r2, r3
 8000860:	da24      	bge.n	80008ac <HAL_UARTEx_RxEventCallback+0x114>
 8000862:	887a      	ldrh	r2, [r7, #2]
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000866:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800086a:	4619      	mov	r1, r3
 800086c:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800086e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000872:	1acb      	subs	r3, r1, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	bfb8      	it	lt
 8000878:	425b      	neglt	r3, r3
 800087a:	f1c3 030a 	rsb	r3, r3, #10
 800087e:	429a      	cmp	r2, r3
 8000880:	dc14      	bgt.n	80008ac <HAL_UARTEx_RxEventCallback+0x114>
		{
			memcpy( (uint8_t *) rcb.rxcb + rcb.head, (uint8_t *) rcb.rxb, rxb_sz);
 8000882:	4b31      	ldr	r3, [pc, #196]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	461a      	mov	r2, r3
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <HAL_UARTEx_RxEventCallback+0x1b4>)
 800088c:	4413      	add	r3, r2
 800088e:	887a      	ldrh	r2, [r7, #2]
 8000890:	492d      	ldr	r1, [pc, #180]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fcb0 	bl	80051f8 <memcpy>
			rcb.head = rcb.head + rxb_sz;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800089a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	4413      	add	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008aa:	821a      	strh	r2, [r3, #16]
		}


		// If the buffer is full or the incoming message does not fit, then it is drop and the
		// pending task is notified
		if( rcb.head == rcb.tail || rxb_sz > (RX_RCB_SZ - abs(rcb.head - rcb.tail )) ) {
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008ae:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d00f      	beq.n	80008dc <HAL_UARTEx_RxEventCallback+0x144>
 80008bc:	887a      	ldrh	r2, [r7, #2]
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bfb8      	it	lt
 80008d2:	425b      	neglt	r3, r3
 80008d4:	f1c3 030a 	rsb	r3, r3, #10
 80008d8:	429a      	cmp	r2, r3
 80008da:	dd08      	ble.n	80008ee <HAL_UARTEx_RxEventCallback+0x156>
			// must signal the consumer task that the buffer is full.
			drop_msgs++;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80008de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	3301      	adds	r3, #1
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80008ec:	801a      	strh	r2, [r3, #0]
		}

		// The circular buffer is empty
		if( rcb.tail == -1 && rcb.head == -1) {
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d112      	bne.n	8000920 <HAL_UARTEx_RxEventCallback+0x188>
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d10c      	bne.n	8000920 <HAL_UARTEx_RxEventCallback+0x188>
			memcpy( (uint8_t *) rcb.rxcb, (uint8_t *) rcb.rxb, rxb_sz);
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	461a      	mov	r2, r3
 800090a:	490f      	ldr	r1, [pc, #60]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <HAL_UARTEx_RxEventCallback+0x1b4>)
 800090e:	f004 fc73 	bl	80051f8 <memcpy>
			rcb.tail = 0;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000914:	2200      	movs	r2, #0
 8000916:	825a      	strh	r2, [r3, #18]
			rcb.head = rxb_sz;
 8000918:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800091e:	821a      	strh	r2, [r3, #16]
		}

		// Reset the UART and disable half transfer mode
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rcb.rxb, RX_RB_SZ);
 8000920:	2205      	movs	r2, #5
 8000922:	4909      	ldr	r1, [pc, #36]	; (8000948 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8000926:	f002 f8c4 	bl	8002ab2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 0208 	bic.w	r2, r2, #8
 8000938:	601a      	str	r2, [r3, #0]

	}
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004800 	.word	0x40004800
 8000948:	20000000 	.word	0x20000000
 800094c:	20000005 	.word	0x20000005
 8000950:	cccccccd 	.word	0xcccccccd
 8000954:	20000404 	.word	0x20000404
 8000958:	20000358 	.word	0x20000358
 800095c:	2000039c 	.word	0x2000039c

08000960 <poll>:



char poll(uint8_t * rxb, int sz )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	// the buffer is empty
	if(rcb.head == rcb.tail)
 800096a:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <poll+0x110>)
 800096c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <poll+0x110>)
 8000972:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000976:	429a      	cmp	r2, r3
 8000978:	d101      	bne.n	800097e <poll+0x1e>
		return RX_RCB_EMPTY;
 800097a:	2301      	movs	r3, #1
 800097c:	e074      	b.n	8000a68 <poll+0x108>

	// the buffer has not been initiated
	if(rcb.head == -1 && rcb.tail == -1)
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <poll+0x110>)
 8000980:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d107      	bne.n	800099a <poll+0x3a>
 800098a:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <poll+0x110>)
 800098c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d101      	bne.n	800099a <poll+0x3a>
		return RX_RCB_EMPTY;
 8000996:	2301      	movs	r3, #1
 8000998:	e066      	b.n	8000a68 <poll+0x108>

	// estimate the number of characters in the buffer
	int16_t k = ( rcb.head > rcb.tail )?  rcb.head - rcb.tail : (RX_RCB_SZ - rcb.tail) + rcb.head;
 800099a:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <poll+0x110>)
 800099c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <poll+0x110>)
 80009a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dd0b      	ble.n	80009c2 <poll+0x62>
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <poll+0x110>)
 80009ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <poll+0x110>)
 80009b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b21b      	sxth	r3, r3
 80009c0:	e00c      	b.n	80009dc <poll+0x7c>
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <poll+0x110>)
 80009c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <poll+0x110>)
 80009cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	330a      	adds	r3, #10
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b21b      	sxth	r3, r3
 80009dc:	81fb      	strh	r3, [r7, #14]

	// elements in the buffer are located at the end of it
	if( rcb.head > rcb.tail )
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <poll+0x110>)
 80009e0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <poll+0x110>)
 80009e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	dd15      	ble.n	8000a1a <poll+0xba>
	{
		memcpy((uint8_t *) rxb, (uint8_t *) rcb.rxcb + rcb.tail, k);
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <poll+0x110>)
 80009f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <poll+0x114>)
 80009f8:	4413      	add	r3, r2
 80009fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009fe:	4619      	mov	r1, r3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f004 fbf9 	bl	80051f8 <memcpy>
		// no need to reset the buffer, just move the pointers
		rcb.tail = rcb.tail + k;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <poll+0x110>)
 8000a08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	4413      	add	r3, r2
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <poll+0x110>)
 8000a18:	825a      	strh	r2, [r3, #18]
		// TODO: evaluate if a tailing character must be added to the rxb
	}

	// elements in the buffer are located at the end and at the beginning
	if( rcb.tail > rcb.head )
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <poll+0x110>)
 8000a1c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <poll+0x110>)
 8000a22:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dd1d      	ble.n	8000a66 <poll+0x106>
	{
		// copy elements at the end of the buffer first
		memcpy((uint8_t *) rxb, (uint8_t *) rcb.rxcb + rcb.tail, (RX_RCB_SZ - rcb.tail) );
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <poll+0x110>)
 8000a2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <poll+0x114>)
 8000a34:	4413      	add	r3, r2
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <poll+0x110>)
 8000a38:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000a3c:	f1c2 020a 	rsb	r2, r2, #10
 8000a40:	4619      	mov	r1, r3
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f004 fbd8 	bl	80051f8 <memcpy>
		// copy elements at the beginning of the second buffer
		memcpy((uint8_t *) rxb + (RX_RCB_SZ - rcb.tail), (uint8_t *) rcb.rxcb, rcb.head );
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <poll+0x110>)
 8000a4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a4e:	f1c3 030a 	rsb	r3, r3, #10
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <poll+0x110>)
 8000a5a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000a5e:	4905      	ldr	r1, [pc, #20]	; (8000a74 <poll+0x114>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fbc9 	bl	80051f8 <memcpy>

		// copy the elements at the beginning of the buffer subsequently

	}

	return !RX_RCB_EMPTY;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000005 	.word	0x20000005

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f003 f978 	bl	8003d76 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <StartDefaultTask+0x8>

08000a88 <consumerTaskHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumerTaskHook */
void consumerTaskHook(void const * argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	TickType_t TaskTimeStamp;
	TickType_t DelayTimeMsec = 10000;  // wait 2s then poll
 8000a90:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a94:	617b      	str	r3, [r7, #20]
	// We will assume the user gives a finite size buffer (3 characters in this example)
	uint8_t msg[RX_RB_SZ];
	for(;;)
	{
		// wait 2s then try to move data from kernel to user memory space
		osDelayUntil(&TaskTimeStamp, DelayTimeMsec);
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	6979      	ldr	r1, [r7, #20]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 f97e 	bl	8003d9e <osDelayUntil>
		// non-blocking access to the buffer
		if( poll(msg, RX_RB_SZ) == RX_RCB_EMPTY )
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff59 	bl	8000960 <poll>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d1f0      	bne.n	8000a96 <consumerTaskHook+0xe>
			read_msgs++;  // successfully read messages
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <consumerTaskHook+0x40>)
 8000ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3301      	adds	r3, #1
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	4b01      	ldr	r3, [pc, #4]	; (8000ac8 <consumerTaskHook+0x40>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		osDelayUntil(&TaskTimeStamp, DelayTimeMsec);
 8000ac6:	e7e6      	b.n	8000a96 <consumerTaskHook+0xe>
 8000ac8:	20000406 	.word	0x20000406

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 f9bf 	bl	8000e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010000 	.word	0x40010000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_MspInit+0x54>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_MspInit+0x54>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_MspInit+0x54>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_MspInit+0x54>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	f06f 0001 	mvn.w	r0, #1
 8000b42:	f000 fa65 	bl	8001010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <HAL_UART_MspInit+0xf0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d162      	bne.n	8000c3c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <HAL_UART_MspInit+0xf4>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <HAL_UART_MspInit+0xf4>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_UART_MspInit+0xf4>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <HAL_UART_MspInit+0xf4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2b      	ldr	r2, [pc, #172]	; (8000c48 <HAL_UART_MspInit+0xf4>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <HAL_UART_MspInit+0xf4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4820      	ldr	r0, [pc, #128]	; (8000c4c <HAL_UART_MspInit+0xf8>)
 8000bcc:	f000 fe4c 	bl	8001868 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <HAL_UART_MspInit+0x100>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000c12:	f000 fa27 	bl	8001064 <HAL_DMA_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c1c:	f7ff ff68 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000c24:	639a      	str	r2, [r3, #56]	; 0x38
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_UART_MspInit+0xfc>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2105      	movs	r1, #5
 8000c30:	2027      	movs	r0, #39	; 0x27
 8000c32:	f000 f9ed 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c36:	2027      	movs	r0, #39	; 0x27
 8000c38:	f000 fa06 	bl	8001048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40004800 	.word	0x40004800
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	2000039c 	.word	0x2000039c
 8000c54:	40026028 	.word	0x40026028

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <HAL_InitTick+0xd0>)
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <HAL_InitTick+0xd0>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6453      	str	r3, [r2, #68]	; 0x44
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_InitTick+0xd0>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 f95e 	bl	8001f50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c94:	f001 f948 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8000c98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_InitTick+0xd4>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	0c9b      	lsrs	r3, r3, #18
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <HAL_InitTick+0xd8>)
 8000caa:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <HAL_InitTick+0xdc>)
 8000cac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cce:	4818      	ldr	r0, [pc, #96]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cd0:	f001 fbf4 	bl	80024bc <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d11b      	bne.n	8000d1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ce2:	4813      	ldr	r0, [pc, #76]	; (8000d30 <HAL_InitTick+0xd8>)
 8000ce4:	f001 fc44 	bl	8002570 <HAL_TIM_Base_Start_IT>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d111      	bne.n	8000d1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f000 f9a6 	bl	8001048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	d808      	bhi.n	8000d14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d02:	2200      	movs	r2, #0
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	2019      	movs	r0, #25
 8000d08:	f000 f982 	bl	8001010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_InitTick+0xe0>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e002      	b.n	8000d1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	20000408 	.word	0x20000408
 8000d34:	40010000 	.word	0x40010000
 8000d38:	20000018 	.word	0x20000018

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <DMA1_Stream1_IRQHandler+0x10>)
 8000d6e:	f000 fb11 	bl	8001394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000039c 	.word	0x2000039c

08000d7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d82:	f001 fc65 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000408 	.word	0x20000408

08000d90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART3_IRQHandler+0x10>)
 8000d96:	f001 fef1 	bl	8002b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000358 	.word	0x20000358

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd7 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f004 f9d9 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fbad 	bl	8000558 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e0c:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 8000e10:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e14:	200041b0 	.word	0x200041b0

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f8d8 	bl	8000ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f7ff ff04 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fe54 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000001c 	.word	0x2000001c
 8000e84:	20000450 	.word	0x20000450

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000450 	.word	0x20000450

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4c 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001022:	f7ff ff61 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f7ff ffb1 	bl	8000f94 <NVIC_EncodePriority>
 8001032:	4602      	mov	r2, r0
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff80 	bl	8000f40 <__NVIC_SetPriority>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff54 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ff0a 	bl	8000e88 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e099      	b.n	80011b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	e00f      	b.n	80010c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a2:	f7ff fef1 	bl	8000e88 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d908      	bls.n	80010c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2220      	movs	r2, #32
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e078      	b.n	80011b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1e8      	bne.n	80010a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <HAL_DMA_Init+0x158>)
 80010dc:	4013      	ands	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	2b04      	cmp	r3, #4
 800111a:	d107      	bne.n	800112c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4313      	orrs	r3, r2
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f023 0307 	bic.w	r3, r3, #7
 8001142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	2b04      	cmp	r3, #4
 8001154:	d117      	bne.n	8001186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4313      	orrs	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00e      	beq.n	8001186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fb01 	bl	8001770 <DMA_CheckFifoParam>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001182:	2301      	movs	r3, #1
 8001184:	e016      	b.n	80011b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fab8 	bl	8001704 <DMA_CalcBaseAndBitshift>
 8001194:	4603      	mov	r3, r0
 8001196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	223f      	movs	r2, #63	; 0x3f
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	e010803f 	.word	0xe010803f

080011c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_DMA_Start_IT+0x26>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e040      	b.n	8001268 <HAL_DMA_Start_IT+0xa8>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d12f      	bne.n	800125a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2202      	movs	r2, #2
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 fa4a 	bl	80016a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	223f      	movs	r2, #63	; 0x3f
 800121a:	409a      	lsls	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0216 	orr.w	r2, r2, #22
 800122e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d007      	beq.n	8001248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0208 	orr.w	r2, r2, #8
 8001246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e005      	b.n	8001266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001262:	2302      	movs	r3, #2
 8001264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001266:	7dfb      	ldrb	r3, [r7, #23]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800127e:	f7ff fe03 	bl	8000e88 <HAL_GetTick>
 8001282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d008      	beq.n	80012a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e052      	b.n	8001348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0216 	bic.w	r2, r2, #22
 80012b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <HAL_DMA_Abort+0x62>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0208 	bic.w	r2, r2, #8
 80012e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f2:	e013      	b.n	800131c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f4:	f7ff fdc8 	bl	8000e88 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d90c      	bls.n	800131c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e015      	b.n	8001348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1e4      	bne.n	80012f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	223f      	movs	r2, #63	; 0x3f
 8001330:	409a      	lsls	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d004      	beq.n	800136e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00c      	b.n	8001388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013a0:	4b8e      	ldr	r3, [pc, #568]	; (80015dc <HAL_DMA_IRQHandler+0x248>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a8e      	ldr	r2, [pc, #568]	; (80015e0 <HAL_DMA_IRQHandler+0x24c>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0a9b      	lsrs	r3, r3, #10
 80013ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2208      	movs	r2, #8
 80013c0:	409a      	lsls	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01a      	beq.n	8001400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0204 	bic.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2208      	movs	r2, #8
 80013ee:	409a      	lsls	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2201      	movs	r2, #1
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d012      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2201      	movs	r2, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f043 0202 	orr.w	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2204      	movs	r2, #4
 800143c:	409a      	lsls	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2204      	movs	r2, #4
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	f043 0204 	orr.w	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2210      	movs	r2, #16
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d043      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d03c      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	2210      	movs	r2, #16
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d018      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d108      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d024      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
 80014c2:	e01f      	b.n	8001504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
 80014d4:	e016      	b.n	8001504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0208 	bic.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2220      	movs	r2, #32
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 808f 	beq.w	8001634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8087 	beq.w	8001634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	2220      	movs	r2, #32
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d136      	bne.n	80015ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0216 	bic.w	r2, r2, #22
 800154c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800155c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_DMA_IRQHandler+0x1da>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0208 	bic.w	r2, r2, #8
 800157c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	223f      	movs	r2, #63	; 0x3f
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d07e      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
        }
        return;
 80015aa:	e079      	b.n	80016a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01d      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d031      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
 80015d8:	e02c      	b.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
 80015da:	bf00      	nop
 80015dc:	20000014 	.word	0x20000014
 80015e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d023      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e01e      	b.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0210 	bic.w	r2, r2, #16
 8001612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	2b00      	cmp	r3, #0
 800163a:	d032      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d022      	beq.n	800168e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2205      	movs	r2, #5
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3301      	adds	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	d307      	bcc.n	800167c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f2      	bne.n	8001660 <HAL_DMA_IRQHandler+0x2cc>
 800167a:	e000      	b.n	800167e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800167c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e000      	b.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016a0:	bf00      	nop
    }
  }
}
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d108      	bne.n	80016e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e6:	e007      	b.n	80016f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b10      	subs	r3, #16
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <DMA_CalcBaseAndBitshift+0x64>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <DMA_CalcBaseAndBitshift+0x68>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d909      	bls.n	8001746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	1d1a      	adds	r2, r3, #4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	; 0x58
 8001744:	e007      	b.n	8001756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	aaaaaaab 	.word	0xaaaaaaab
 800176c:	08005434 	.word	0x08005434

08001770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11f      	bne.n	80017ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d856      	bhi.n	800183e <DMA_CheckFifoParam+0xce>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <DMA_CheckFifoParam+0x28>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017a9 	.word	0x080017a9
 800179c:	080017bb 	.word	0x080017bb
 80017a0:	080017a9 	.word	0x080017a9
 80017a4:	0800183f 	.word	0x0800183f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d046      	beq.n	8001842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b8:	e043      	b.n	8001842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c2:	d140      	bne.n	8001846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c8:	e03d      	b.n	8001846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d2:	d121      	bne.n	8001818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d837      	bhi.n	800184a <DMA_CheckFifoParam+0xda>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <DMA_CheckFifoParam+0x70>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	080017f7 	.word	0x080017f7
 80017e8:	080017f1 	.word	0x080017f1
 80017ec:	08001809 	.word	0x08001809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      break;
 80017f4:	e030      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d025      	beq.n	800184e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001806:	e022      	b.n	800184e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001810:	d11f      	bne.n	8001852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001816:	e01c      	b.n	8001852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d903      	bls.n	8001826 <DMA_CheckFifoParam+0xb6>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d003      	beq.n	800182c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001824:	e018      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
      break;
 800182a:	e015      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      break;
 800183c:	e00b      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 800183e:	bf00      	nop
 8001840:	e00a      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e008      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e006      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e004      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;   
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
    }
  } 
  
  return status; 
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e165      	b.n	8001b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 8154 	bne.w	8001b4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d005      	beq.n	80018ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b03      	cmp	r3, #3
 8001926:	d017      	beq.n	8001958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d123      	bne.n	80019ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80ae 	beq.w	8001b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_GPIO_Init+0x300>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_GPIO_Init+0x300>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_GPIO_Init+0x300>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0a:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_GPIO_Init+0x308>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4e      	ldr	r2, [pc, #312]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4d      	ldr	r2, [pc, #308]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4b      	ldr	r2, [pc, #300]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x20a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x206>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x202>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e00c      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00a      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a6e:	2305      	movs	r3, #5
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a72:	2304      	movs	r3, #4
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f ae96 	bls.w	8001884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0cc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d90c      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b65      	ldr	r3, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d044      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e067      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4934      	ldr	r1, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f902 	bl	8000e88 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff f8fe 	bl	8000e88 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d20c      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff8e 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	0800541c 	.word	0x0800541c
 8001d54:	20000014 	.word	0x20000014
 8001d58:	20000018 	.word	0x20000018

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d60:	b090      	sub	sp, #64	; 0x40
 8001d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d00d      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	f200 80a1 	bhi.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d8e:	e09b      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d94:	e09b      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d9a:	e098      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da6:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d028      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dc8:	fb03 f201 	mul.w	r2, r3, r1
 8001dcc:	2300      	movs	r3, #0
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a43      	ldr	r2, [pc, #268]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dd6:	fba0 1202 	umull	r1, r2, r0, r2
 8001dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ddc:	460a      	mov	r2, r1
 8001dde:	62ba      	str	r2, [r7, #40]	; 0x28
 8001de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de2:	4413      	add	r3, r2
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	2200      	movs	r2, #0
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	61fa      	str	r2, [r7, #28]
 8001dee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001df6:	f7fe fa13 	bl	8000220 <__aeabi_uldivmod>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e02:	e053      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	617a      	str	r2, [r7, #20]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e16:	f04f 0b00 	mov.w	fp, #0
 8001e1a:	4652      	mov	r2, sl
 8001e1c:	465b      	mov	r3, fp
 8001e1e:	f04f 0000 	mov.w	r0, #0
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	0159      	lsls	r1, r3, #5
 8001e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2c:	0150      	lsls	r0, r2, #5
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ebb2 080a 	subs.w	r8, r2, sl
 8001e36:	eb63 090b 	sbc.w	r9, r3, fp
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e52:	eb63 0509 	sbc.w	r5, r3, r9
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	00eb      	lsls	r3, r5, #3
 8001e60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e64:	00e2      	lsls	r2, r4, #3
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	eb14 030a 	adds.w	r3, r4, sl
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	eb45 030b 	adc.w	r3, r5, fp
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e82:	4629      	mov	r1, r5
 8001e84:	028b      	lsls	r3, r1, #10
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	028a      	lsls	r2, r1, #10
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	2200      	movs	r2, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea0:	f7fe f9be 	bl	8000220 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3740      	adds	r7, #64	; 0x40
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	017d7840 	.word	0x017d7840

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000014 	.word	0x20000014

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f04:	f7ff fff0 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	0800542c 	.word	0x0800542c

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f2c:	f7ff ffdc 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0b5b      	lsrs	r3, r3, #13
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	0800542c 	.word	0x0800542c

08001f50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_RCC_GetClockConfig+0x60>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0207 	and.w	r2, r3, #7
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e273      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d075      	beq.n	80020be <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fd2:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fde:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d112      	bne.n	8002010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fea:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff6:	d10b      	bne.n	8002010 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	4b7e      	ldr	r3, [pc, #504]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d05b      	beq.n	80020bc <HAL_RCC_OscConfig+0x108>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d157      	bne.n	80020bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e24e      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x74>
 800201a:	4b76      	ldr	r3, [pc, #472]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a75      	ldr	r2, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0xb0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x98>
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6f      	ldr	r2, [pc, #444]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6c      	ldr	r2, [pc, #432]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0xb0>
 800204c:	4b69      	ldr	r3, [pc, #420]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a68      	ldr	r2, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe ff0c 	bl	8000e88 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe ff08 	bl	8000e88 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e213      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xc0>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe fef8 	bl	8000e88 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209c:	f7fe fef4 	bl	8000e88 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1ff      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0xe8>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d11c      	bne.n	800211c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x152>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e1d3      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4937      	ldr	r1, [pc, #220]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	e03a      	b.n	8002192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_OscConfig+0x244>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe fead 	bl	8000e88 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe fea9 	bl	8000e88 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1b4      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4925      	ldr	r1, [pc, #148]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_OscConfig+0x244>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fe8c 	bl	8000e88 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe fe88 	bl	8000e88 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e193      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d036      	beq.n	800220c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d016      	beq.n	80021d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_RCC_OscConfig+0x248>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7fe fe6c 	bl	8000e88 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe fe68 	bl	8000e88 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e173      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80021c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x200>
 80021d2:	e01b      	b.n	800220c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_OscConfig+0x248>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe fe55 	bl	8000e88 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	e00e      	b.n	8002200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fe51 	bl	8000e88 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d907      	bls.n	8002200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e15c      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	42470000 	.word	0x42470000
 80021fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	4b8a      	ldr	r3, [pc, #552]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ea      	bne.n	80021e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8097 	beq.w	8002348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b83      	ldr	r3, [pc, #524]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10f      	bne.n	800224a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b7f      	ldr	r3, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a7e      	ldr	r2, [pc, #504]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b7c      	ldr	r3, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x478>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b79      	ldr	r3, [pc, #484]	; (8002430 <HAL_RCC_OscConfig+0x47c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x47c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x47c>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7fe fe11 	bl	8000e88 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe fe0d 	bl	8000e88 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e118      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x47c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x2ea>
 8002290:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a65      	ldr	r2, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	e01c      	b.n	80022d8 <HAL_RCC_OscConfig+0x324>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x30c>
 80022a6:	4b61      	ldr	r3, [pc, #388]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a60      	ldr	r2, [pc, #384]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
 80022b2:	4b5e      	ldr	r3, [pc, #376]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0x324>
 80022c0:	4b5a      	ldr	r3, [pc, #360]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a59      	ldr	r2, [pc, #356]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	4b57      	ldr	r3, [pc, #348]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a56      	ldr	r2, [pc, #344]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80022d2:	f023 0304 	bic.w	r3, r3, #4
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe fdd2 	bl	8000e88 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7fe fdce 	bl	8000e88 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0d7      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ee      	beq.n	80022e8 <HAL_RCC_OscConfig+0x334>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7fe fdbc 	bl	8000e88 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7fe fdb8 	bl	8000e88 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0c1      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232a:	4b40      	ldr	r3, [pc, #256]	; (800242c <HAL_RCC_OscConfig+0x478>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ee      	bne.n	8002314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_RCC_OscConfig+0x478>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	4a3a      	ldr	r2, [pc, #232]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002346:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80ad 	beq.w	80024ac <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d060      	beq.n	8002420 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d145      	bne.n	80023f2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_RCC_OscConfig+0x480>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fd8c 	bl	8000e88 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fd88 	bl	8000e88 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e093      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	019b      	lsls	r3, r3, #6
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	3b01      	subs	r3, #1
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	491b      	ldr	r1, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x480>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fd5d 	bl	8000e88 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fd59 	bl	8000e88 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e064      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x41e>
 80023f0:	e05c      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x480>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fd46 	bl	8000e88 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fd42 	bl	8000e88 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04d      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x44c>
 800241e:	e045      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e040      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000
 8002434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <HAL_RCC_OscConfig+0x504>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d030      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d129      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d122      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002470:	4293      	cmp	r3, r2
 8002472:	d119      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	3b01      	subs	r3, #1
 8002482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d10f      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e041      	b.n	8002552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f839 	bl	800255a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 f9d8 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d001      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e04e      	b.n	8002626 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_TIM_Base_Start_IT+0xc4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d022      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b2:	d01d      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_TIM_Base_Start_IT+0xc8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d018      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_TIM_Base_Start_IT+0xcc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_TIM_Base_Start_IT+0xd0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00e      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <HAL_TIM_Base_Start_IT+0xd4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_TIM_Base_Start_IT+0xd8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x80>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_TIM_Base_Start_IT+0xdc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d111      	bne.n	8002614 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d010      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002612:	e007      	b.n	8002624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40010400 	.word	0x40010400
 8002648:	40014000 	.word	0x40014000
 800264c:	40001800 	.word	0x40001800

08002650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0202 	mvn.w	r2, #2
 800267c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8ee 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8e0 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8f1 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0204 	mvn.w	r2, #4
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8c4 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8b6 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f8c7 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b08      	cmp	r3, #8
 800270c:	d122      	bne.n	8002754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b08      	cmp	r3, #8
 800271a:	d11b      	bne.n	8002754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0208 	mvn.w	r2, #8
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2204      	movs	r2, #4
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f89a 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f88c 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f89d 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b10      	cmp	r3, #16
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b10      	cmp	r3, #16
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0210 	mvn.w	r2, #16
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2208      	movs	r2, #8
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f870 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f862 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f873 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0201 	mvn.w	r2, #1
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f97c 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b80      	cmp	r3, #128	; 0x80
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b80      	cmp	r3, #128	; 0x80
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f902 	bl	8002a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f838 	bl	800289c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0220 	mvn.w	r2, #32
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8cc 	bl	80029f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <TIM_Base_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d00f      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <TIM_Base_SetConfig+0x118>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <TIM_Base_SetConfig+0x11c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <TIM_Base_SetConfig+0x120>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <TIM_Base_SetConfig+0x124>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d108      	bne.n	8002902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <TIM_Base_SetConfig+0x114>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d027      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <TIM_Base_SetConfig+0x118>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d023      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <TIM_Base_SetConfig+0x11c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <TIM_Base_SetConfig+0x120>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <TIM_Base_SetConfig+0x124>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d017      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <TIM_Base_SetConfig+0x128>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <TIM_Base_SetConfig+0x12c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00f      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <TIM_Base_SetConfig+0x130>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <TIM_Base_SetConfig+0x134>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <TIM_Base_SetConfig+0x138>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <TIM_Base_SetConfig+0x13c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d108      	bne.n	8002974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <TIM_Base_SetConfig+0x114>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <TIM_Base_SetConfig+0xf8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <TIM_Base_SetConfig+0x124>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40010400 	.word	0x40010400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800
 80029e4:	40001800 	.word	0x40001800
 80029e8:	40001c00 	.word	0x40001c00
 80029ec:	40002000 	.word	0x40002000

080029f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e03f      	b.n	8002aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe f888 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fe9b 	bl	8003798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08c      	sub	sp, #48	; 0x30
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	4613      	mov	r3, r2
 8002abe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d152      	bne.n	8002b72 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e04b      	b.n	8002b74 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e044      	b.n	8002b74 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fbea 	bl	80032d8 <UART_Start_Receive_DMA>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12c      	bne.n	8002b6c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d125      	bne.n	8002b66 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b50:	627a      	str	r2, [r7, #36]	; 0x24
 8002b52:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6a39      	ldr	r1, [r7, #32]
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002b64:	e002      	b.n	8002b6c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b70:	e000      	b.n	8002b74 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
  }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3730      	adds	r7, #48	; 0x30
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0ba      	sub	sp, #232	; 0xe8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_UART_IRQHandler+0x66>
 8002bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fd21 	bl	8003622 <UART_Receive_IT>
      return;
 8002be0:	e256      	b.n	8003090 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80de 	beq.w	8002da8 <HAL_UART_IRQHandler+0x22c>
 8002bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80d1 	beq.w	8002da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_UART_IRQHandler+0xae>
 8002c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_UART_IRQHandler+0xd2>
 8002c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_UART_IRQHandler+0xf6>
 8002c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d011      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x126>
 8002c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0208 	orr.w	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 81ed 	beq.w	8003086 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_UART_IRQHandler+0x14e>
 8002cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fcac 	bl	8003622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x17a>
 8002cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04f      	beq.n	8002d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fbb4 	bl	8003464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d141      	bne.n	8002d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1d9      	bne.n	8002d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d013      	beq.n	8002d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <HAL_UART_IRQHandler+0x3dc>)
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe faf0 	bl	8001350 <HAL_DMA_Abort_IT>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d80:	4610      	mov	r0, r2
 8002d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d84:	e00e      	b.n	8002da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f9a4 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8c:	e00a      	b.n	8002da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f9a0 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d94:	e006      	b.n	8002da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f99c 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002da2:	e170      	b.n	8003086 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	bf00      	nop
    return;
 8002da6:	e16e      	b.n	8003086 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 814a 	bne.w	8003046 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8143 	beq.w	8003046 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 813c 	beq.w	8003046 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	f040 80b4 	bne.w	8002f5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8140 	beq.w	800308a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e12:	429a      	cmp	r2, r3
 8002e14:	f080 8139 	bcs.w	800308a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2a:	f000 8088 	beq.w	8002f3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1d9      	bne.n	8002e2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3314      	adds	r3, #20
 8002e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3314      	adds	r3, #20
 8002e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e1      	bne.n	8002e7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3314      	adds	r3, #20
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ede:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e3      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0e:	f023 0310 	bic.w	r3, r3, #16
 8002f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f20:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e3      	bne.n	8002efc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe f999 	bl	8001270 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fc22 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f54:	e099      	b.n	800308a <HAL_UART_IRQHandler+0x50e>
 8002f56:	bf00      	nop
 8002f58:	0800352b 	.word	0x0800352b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 808b 	beq.w	800308e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8086 	beq.w	800308e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e3      	bne.n	8002f82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fde:	633a      	str	r2, [r7, #48]	; 0x30
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0310 	bic.w	r3, r3, #16
 8003016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003024:	61fa      	str	r2, [r7, #28]
 8003026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	69b9      	ldr	r1, [r7, #24]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	617b      	str	r3, [r7, #20]
   return(result);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e3      	bne.n	8003000 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fbaa 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003044:	e023      	b.n	800308e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_UART_IRQHandler+0x4ea>
 8003052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa77 	bl	8003552 <UART_Transmit_IT>
    return;
 8003064:	e014      	b.n	8003090 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <HAL_UART_IRQHandler+0x514>
 8003072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fab7 	bl	80035f2 <UART_EndTransmit_IT>
    return;
 8003084:	e004      	b.n	8003090 <HAL_UART_IRQHandler+0x514>
    return;
 8003086:	bf00      	nop
 8003088:	e002      	b.n	8003090 <HAL_UART_IRQHandler+0x514>
      return;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <HAL_UART_IRQHandler+0x514>
      return;
 800308e:	bf00      	nop
  }
}
 8003090:	37e8      	adds	r7, #232	; 0xe8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b09c      	sub	sp, #112	; 0x70
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d172      	bne.n	80031ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003106:	2200      	movs	r2, #0
 8003108:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800311a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003120:	66bb      	str	r3, [r7, #104]	; 0x68
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800312a:	65ba      	str	r2, [r7, #88]	; 0x58
 800312c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e5      	bne.n	800310a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	667b      	str	r3, [r7, #100]	; 0x64
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800315e:	647a      	str	r2, [r7, #68]	; 0x44
 8003160:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	623b      	str	r3, [r7, #32]
   return(result);
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003188:	663b      	str	r3, [r7, #96]	; 0x60
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003192:	633a      	str	r2, [r7, #48]	; 0x30
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d119      	bne.n	80031ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f023 0310 	bic.w	r3, r3, #16
 80031cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031d6:	61fa      	str	r2, [r7, #28]
 80031d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	617b      	str	r3, [r7, #20]
   return(result);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e5      	bne.n	80031b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d106      	bne.n	8003200 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f6:	4619      	mov	r1, r3
 80031f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031fa:	f7fd facd 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031fe:	e002      	b.n	8003206 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003200:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003202:	f7ff ff53 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 8003206:	bf00      	nop
 8003208:	3770      	adds	r7, #112	; 0x70
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	b29b      	uxth	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7fd fab2 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003234:	e002      	b.n	800323c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ff42 	bl	80030c0 <HAL_UART_RxHalfCpltCallback>
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b21      	cmp	r3, #33	; 0x21
 8003276:	d108      	bne.n	800328a <UART_DMAError+0x46>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003284:	68b8      	ldr	r0, [r7, #8]
 8003286:	f000 f8c5 	bl	8003414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b22      	cmp	r3, #34	; 0x22
 80032aa:	d108      	bne.n	80032be <UART_DMAError+0x7a>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2200      	movs	r2, #0
 80032b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	f000 f8d3 	bl	8003464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0210 	orr.w	r2, r3, #16
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ca:	68b8      	ldr	r0, [r7, #8]
 80032cc:	f7ff ff02 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b098      	sub	sp, #96	; 0x60
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2222      	movs	r2, #34	; 0x22
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	4a40      	ldr	r2, [pc, #256]	; (8003408 <UART_Start_Receive_DMA+0x130>)
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4a3f      	ldr	r2, [pc, #252]	; (800340c <UART_Start_Receive_DMA+0x134>)
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	4a3e      	ldr	r2, [pc, #248]	; (8003410 <UART_Start_Receive_DMA+0x138>)
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	2200      	movs	r2, #0
 800331e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	f7fd ff42 	bl	80011c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d019      	beq.n	8003396 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	65bb      	str	r3, [r7, #88]	; 0x58
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003382:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e5      	bne.n	8003362 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	657b      	str	r3, [r7, #84]	; 0x54
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e5      	bne.n	8003396 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	617b      	str	r3, [r7, #20]
   return(result);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e0:	653b      	str	r3, [r7, #80]	; 0x50
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033ea:	627a      	str	r2, [r7, #36]	; 0x24
 80033ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e5      	bne.n	80033ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3760      	adds	r7, #96	; 0x60
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	080030e9 	.word	0x080030e9
 800340c:	0800320f 	.word	0x0800320f
 8003410:	08003245 	.word	0x08003245

08003414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	60bb      	str	r3, [r7, #8]
   return(result);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	61ba      	str	r2, [r7, #24]
 800343e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6979      	ldr	r1, [r7, #20]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	613b      	str	r3, [r7, #16]
   return(result);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003458:	bf00      	nop
 800345a:	3724      	adds	r7, #36	; 0x24
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b095      	sub	sp, #84	; 0x54
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800348c:	643a      	str	r2, [r7, #64]	; 0x40
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d119      	bne.n	8003510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f023 0310 	bic.w	r3, r3, #16
 80034f2:	647b      	str	r3, [r7, #68]	; 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fc:	61ba      	str	r2, [r7, #24]
 80034fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	613b      	str	r3, [r7, #16]
   return(result);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e5      	bne.n	80034dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800351e:	bf00      	nop
 8003520:	3754      	adds	r7, #84	; 0x54
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fdc5 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b21      	cmp	r3, #33	; 0x21
 8003564:	d13e      	bne.n	80035e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d114      	bne.n	800359a <UART_Transmit_IT+0x48>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d110      	bne.n	800359a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	1c9a      	adds	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]
 8003598:	e008      	b.n	80035ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	1c59      	adds	r1, r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6211      	str	r1, [r2, #32]
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4619      	mov	r1, r3
 80035ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fd40 	bl	8003098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b08c      	sub	sp, #48	; 0x30
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b22      	cmp	r3, #34	; 0x22
 8003634:	f040 80ab 	bne.w	800378e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003640:	d117      	bne.n	8003672 <UART_Receive_IT+0x50>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d113      	bne.n	8003672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	b29a      	uxth	r2, r3
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
 8003670:	e026      	b.n	80036c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003678:	2300      	movs	r3, #0
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d007      	beq.n	8003696 <UART_Receive_IT+0x74>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10a      	bne.n	80036a4 <UART_Receive_IT+0x82>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e008      	b.n	80036b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4619      	mov	r1, r3
 80036ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d15a      	bne.n	800378a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0220 	bic.w	r2, r2, #32
 80036e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	2b01      	cmp	r3, #1
 8003712:	d135      	bne.n	8003780 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	613b      	str	r3, [r7, #16]
   return(result);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f023 0310 	bic.w	r3, r3, #16
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	623a      	str	r2, [r7, #32]
 800373c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	69f9      	ldr	r1, [r7, #28]
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	61bb      	str	r3, [r7, #24]
   return(result);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e5      	bne.n	800371a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b10      	cmp	r3, #16
 800375a:	d10a      	bne.n	8003772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd f80d 	bl	8000798 <HAL_UARTEx_RxEventCallback>
 800377e:	e002      	b.n	8003786 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fc93 	bl	80030ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e002      	b.n	8003790 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b0c0      	sub	sp, #256	; 0x100
 800379e:	af00      	add	r7, sp, #0
 80037a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	ea40 0301 	orr.w	r3, r0, r1
 80037c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037f0:	f021 010c 	bic.w	r1, r1, #12
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037fe:	430b      	orrs	r3, r1
 8003800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003812:	6999      	ldr	r1, [r3, #24]
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	ea40 0301 	orr.w	r3, r0, r1
 800381e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b95      	ldr	r3, [pc, #596]	; (8003a7c <UART_SetConfig+0x2e4>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d011      	beq.n	8003850 <UART_SetConfig+0xb8>
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <UART_SetConfig+0x2e8>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d00b      	beq.n	8003850 <UART_SetConfig+0xb8>
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <UART_SetConfig+0x2ec>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d005      	beq.n	8003850 <UART_SetConfig+0xb8>
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <UART_SetConfig+0x2f0>)
 800384c:	429a      	cmp	r2, r3
 800384e:	d104      	bne.n	800385a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003850:	f7fe fb6a 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8003854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003858:	e003      	b.n	8003862 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800385a:	f7fe fb51 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 800385e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386c:	f040 8110 	bne.w	8003a90 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800387a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800387e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	1891      	adds	r1, r2, r2
 8003888:	65b9      	str	r1, [r7, #88]	; 0x58
 800388a:	415b      	adcs	r3, r3
 800388c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003892:	4621      	mov	r1, r4
 8003894:	eb12 0801 	adds.w	r8, r2, r1
 8003898:	4629      	mov	r1, r5
 800389a:	eb43 0901 	adc.w	r9, r3, r1
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038b2:	4690      	mov	r8, r2
 80038b4:	4699      	mov	r9, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	eb18 0303 	adds.w	r3, r8, r3
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038c0:	462b      	mov	r3, r5
 80038c2:	eb49 0303 	adc.w	r3, r9, r3
 80038c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038de:	460b      	mov	r3, r1
 80038e0:	18db      	adds	r3, r3, r3
 80038e2:	653b      	str	r3, [r7, #80]	; 0x50
 80038e4:	4613      	mov	r3, r2
 80038e6:	eb42 0303 	adc.w	r3, r2, r3
 80038ea:	657b      	str	r3, [r7, #84]	; 0x54
 80038ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038f4:	f7fc fc94 	bl	8000220 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <UART_SetConfig+0x2f4>)
 80038fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	011c      	lsls	r4, r3, #4
 8003906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003920:	415b      	adcs	r3, r3
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003928:	4641      	mov	r1, r8
 800392a:	eb12 0a01 	adds.w	sl, r2, r1
 800392e:	4649      	mov	r1, r9
 8003930:	eb43 0b01 	adc.w	fp, r3, r1
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003948:	4692      	mov	sl, r2
 800394a:	469b      	mov	fp, r3
 800394c:	4643      	mov	r3, r8
 800394e:	eb1a 0303 	adds.w	r3, sl, r3
 8003952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003956:	464b      	mov	r3, r9
 8003958:	eb4b 0303 	adc.w	r3, fp, r3
 800395c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800396c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003974:	460b      	mov	r3, r1
 8003976:	18db      	adds	r3, r3, r3
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
 800397a:	4613      	mov	r3, r2
 800397c:	eb42 0303 	adc.w	r3, r2, r3
 8003980:	647b      	str	r3, [r7, #68]	; 0x44
 8003982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800398a:	f7fc fc49 	bl	8000220 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4611      	mov	r1, r2
 8003994:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <UART_SetConfig+0x2f4>)
 8003996:	fba3 2301 	umull	r2, r3, r3, r1
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2264      	movs	r2, #100	; 0x64
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	1acb      	subs	r3, r1, r3
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <UART_SetConfig+0x2f4>)
 80039ac:	fba3 2302 	umull	r2, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b8:	441c      	add	r4, r3
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d4:	415b      	adcs	r3, r3
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6339      	str	r1, [r7, #48]	; 0x30
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a10:	464b      	mov	r3, r9
 8003a12:	460a      	mov	r2, r1
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a30:	460b      	mov	r3, r1
 8003a32:	18db      	adds	r3, r3, r3
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a36:	4613      	mov	r3, r2
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a46:	f7fc fbeb 	bl	8000220 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <UART_SetConfig+0x2f4>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <UART_SetConfig+0x2f4>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 0207 	and.w	r2, r3, #7
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4422      	add	r2, r4
 8003a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a78:	e109      	b.n	8003c8e <UART_SetConfig+0x4f6>
 8003a7a:	bf00      	nop
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40011400 	.word	0x40011400
 8003a84:	40011800 	.word	0x40011800
 8003a88:	40011c00 	.word	0x40011c00
 8003a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003aa2:	4642      	mov	r2, r8
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	1891      	adds	r1, r2, r2
 8003aa8:	6239      	str	r1, [r7, #32]
 8003aaa:	415b      	adcs	r3, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	1854      	adds	r4, r2, r1
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	eb43 0501 	adc.w	r5, r3, r1
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	00eb      	lsls	r3, r5, #3
 8003ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aca:	00e2      	lsls	r2, r4, #3
 8003acc:	4614      	mov	r4, r2
 8003ace:	461d      	mov	r5, r3
 8003ad0:	4643      	mov	r3, r8
 8003ad2:	18e3      	adds	r3, r4, r3
 8003ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ad8:	464b      	mov	r3, r9
 8003ada:	eb45 0303 	adc.w	r3, r5, r3
 8003ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003afe:	4629      	mov	r1, r5
 8003b00:	008b      	lsls	r3, r1, #2
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b08:	4621      	mov	r1, r4
 8003b0a:	008a      	lsls	r2, r1, #2
 8003b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b10:	f7fc fb86 	bl	8000220 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4b60      	ldr	r3, [pc, #384]	; (8003c9c <UART_SetConfig+0x504>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	011c      	lsls	r4, r3, #4
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b34:	4642      	mov	r2, r8
 8003b36:	464b      	mov	r3, r9
 8003b38:	1891      	adds	r1, r2, r2
 8003b3a:	61b9      	str	r1, [r7, #24]
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b44:	4641      	mov	r1, r8
 8003b46:	1851      	adds	r1, r2, r1
 8003b48:	6139      	str	r1, [r7, #16]
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	414b      	adcs	r3, r1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	00cb      	lsls	r3, r1, #3
 8003b60:	4651      	mov	r1, sl
 8003b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b66:	4651      	mov	r1, sl
 8003b68:	00ca      	lsls	r2, r1, #3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4642      	mov	r2, r8
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b78:	464b      	mov	r3, r9
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	eb42 0303 	adc.w	r3, r2, r3
 8003b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	008b      	lsls	r3, r1, #2
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	008a      	lsls	r2, r1, #2
 8003baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bae:	f7fc fb37 	bl	8000220 <__aeabi_uldivmod>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <UART_SetConfig+0x504>)
 8003bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	2164      	movs	r1, #100	; 0x64
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	3332      	adds	r3, #50	; 0x32
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <UART_SetConfig+0x504>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd6:	441c      	add	r4, r3
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	673b      	str	r3, [r7, #112]	; 0x70
 8003be0:	677a      	str	r2, [r7, #116]	; 0x74
 8003be2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	1851      	adds	r1, r2, r1
 8003bfa:	6039      	str	r1, [r7, #0]
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	414b      	adcs	r3, r1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c0e:	4659      	mov	r1, fp
 8003c10:	00cb      	lsls	r3, r1, #3
 8003c12:	4651      	mov	r1, sl
 8003c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c18:	4651      	mov	r1, sl
 8003c1a:	00ca      	lsls	r2, r1, #3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4603      	mov	r3, r0
 8003c22:	4642      	mov	r2, r8
 8003c24:	189b      	adds	r3, r3, r2
 8003c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c28:	464b      	mov	r3, r9
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	008b      	lsls	r3, r1, #2
 8003c4e:	4641      	mov	r1, r8
 8003c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c54:	4641      	mov	r1, r8
 8003c56:	008a      	lsls	r2, r1, #2
 8003c58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c5c:	f7fc fae0 	bl	8000220 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <UART_SetConfig+0x504>)
 8003c66:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2164      	movs	r1, #100	; 0x64
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	3332      	adds	r3, #50	; 0x32
 8003c78:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <UART_SetConfig+0x504>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4422      	add	r2, r4
 8003c8c:	609a      	str	r2, [r3, #8]
}
 8003c8e:	bf00      	nop
 8003c90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c94:	46bd      	mov	sp, r7
 8003c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9a:	bf00      	nop
 8003c9c:	51eb851f 	.word	0x51eb851f

08003ca0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb2:	2b84      	cmp	r3, #132	; 0x84
 8003cb4:	d005      	beq.n	8003cc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cd4:	f000 fb02 	bl	80042dc <vTaskStartScheduler>
  
  return osOK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce0:	b089      	sub	sp, #36	; 0x24
 8003ce2:	af04      	add	r7, sp, #16
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <osThreadCreate+0x54>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01c      	beq.n	8003d32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685c      	ldr	r4, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681d      	ldr	r5, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691e      	ldr	r6, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ffc8 	bl	8003ca0 <makeFreeRtosPriority>
 8003d10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d1a:	9202      	str	r2, [sp, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	9100      	str	r1, [sp, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	4632      	mov	r2, r6
 8003d24:	4629      	mov	r1, r5
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 f8f9 	bl	8003f1e <xTaskCreateStatic>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e01c      	b.n	8003d6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685c      	ldr	r4, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d3e:	b29e      	uxth	r6, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ffaa 	bl	8003ca0 <makeFreeRtosPriority>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f107 030c 	add.w	r3, r7, #12
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	9200      	str	r2, [sp, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f000 f93b 	bl	8003fd8 <xTaskCreate>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <osDelay+0x16>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	e000      	b.n	8003d8e <osDelay+0x18>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fa70 	bl	8004274 <vTaskDelay>
  
  return osOK;
 8003d94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 8003da8:	2381      	movs	r3, #129	; 0x81
#endif
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f103 0208 	add.w	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f103 0208 	add.w	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f103 0208 	add.w	r2, r3, #8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d103      	bne.n	8003e78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e00c      	b.n	8003e92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e002      	b.n	8003e86 <vListInsert+0x2e>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d2f6      	bcs.n	8003e80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6892      	ldr	r2, [r2, #8]
 8003ee0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6852      	ldr	r2, [r2, #4]
 8003eea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d103      	bne.n	8003efe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08e      	sub	sp, #56	; 0x38
 8003f22:	af04      	add	r7, sp, #16
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61fb      	str	r3, [r7, #28]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f64:	23b4      	movs	r3, #180	; 0xb4
 8003f66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2bb4      	cmp	r3, #180	; 0xb4
 8003f6c:	d00a      	beq.n	8003f84 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	61bb      	str	r3, [r7, #24]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01e      	beq.n	8003fca <xTaskCreateStatic+0xac>
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01b      	beq.n	8003fca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	9302      	str	r3, [sp, #8]
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f851 	bl	8004064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fc4:	f000 f8ec 	bl	80041a0 <prvAddNewTaskToReadyList>
 8003fc8:	e001      	b.n	8003fce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fce:	697b      	ldr	r3, [r7, #20]
	}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3728      	adds	r7, #40	; 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fef3 	bl	8004dd8 <pvPortMalloc>
 8003ff2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00e      	beq.n	8004018 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ffa:	20b4      	movs	r0, #180	; 0xb4
 8003ffc:	f000 feec 	bl	8004dd8 <pvPortMalloc>
 8004000:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
 800400e:	e005      	b.n	800401c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f000 ffad 	bl	8004f70 <vPortFree>
 8004016:	e001      	b.n	800401c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d017      	beq.n	8004052 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	2300      	movs	r3, #0
 800402e:	9303      	str	r3, [sp, #12]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	9302      	str	r3, [sp, #8]
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f80f 	bl	8004064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004046:	69f8      	ldr	r0, [r7, #28]
 8004048:	f000 f8aa 	bl	80041a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800404c:	2301      	movs	r3, #1
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e002      	b.n	8004058 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004058:	69bb      	ldr	r3, [r7, #24]
	}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800407c:	3b01      	subs	r3, #1
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	617b      	str	r3, [r7, #20]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01f      	beq.n	80040f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e012      	b.n	80040de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	7819      	ldrb	r1, [r3, #0]
 80040c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	3334      	adds	r3, #52	; 0x34
 80040c8:	460a      	mov	r2, r1
 80040ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3301      	adds	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d9e9      	bls.n	80040b8 <prvInitialiseNewTask+0x54>
 80040e4:	e000      	b.n	80040e8 <prvInitialiseNewTask+0x84>
			{
				break;
 80040e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f0:	e003      	b.n	80040fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d901      	bls.n	8004104 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004100:	2306      	movs	r3, #6
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	2200      	movs	r2, #0
 8004114:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	3304      	adds	r3, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fe6b 	bl	8003df6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	3318      	adds	r3, #24
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fe66 	bl	8003df6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	f1c3 0207 	rsb	r2, r3, #7
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	2200      	movs	r2, #0
 8004144:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	2200      	movs	r2, #0
 800414c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	334c      	adds	r3, #76	; 0x4c
 8004154:	2260      	movs	r2, #96	; 0x60
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f001 f85b 	bl	8005214 <memset>
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <prvInitialiseNewTask+0x130>)
 8004162:	651a      	str	r2, [r3, #80]	; 0x50
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <prvInitialiseNewTask+0x134>)
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	4a0b      	ldr	r2, [pc, #44]	; (800419c <prvInitialiseNewTask+0x138>)
 800416e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	69b8      	ldr	r0, [r7, #24]
 8004176:	f000 fc1f 	bl	80049b8 <pxPortInitialiseStack>
 800417a:	4602      	mov	r2, r0
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800418c:	bf00      	nop
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0800545c 	.word	0x0800545c
 8004198:	0800547c 	.word	0x0800547c
 800419c:	0800543c 	.word	0x0800543c

080041a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041a8:	f000 fd34 	bl	8004c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <prvAddNewTaskToReadyList+0xb8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4a29      	ldr	r2, [pc, #164]	; (8004258 <prvAddNewTaskToReadyList+0xb8>)
 80041b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <prvAddNewTaskToReadyList+0xbc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <prvAddNewTaskToReadyList+0xbc>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <prvAddNewTaskToReadyList+0xb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d110      	bne.n	80041ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041cc:	f000 facc 	bl	8004768 <prvInitialiseTaskLists>
 80041d0:	e00d      	b.n	80041ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <prvAddNewTaskToReadyList+0xc0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <prvAddNewTaskToReadyList+0xbc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d802      	bhi.n	80041ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <prvAddNewTaskToReadyList+0xbc>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <prvAddNewTaskToReadyList+0xcc>)
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7ff fdf5 	bl	8003e10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004226:	f000 fd25 	bl	8004c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <prvAddNewTaskToReadyList+0xc0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00e      	beq.n	8004250 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <prvAddNewTaskToReadyList+0xbc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	429a      	cmp	r2, r3
 800423e:	d207      	bcs.n	8004250 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <prvAddNewTaskToReadyList+0xd0>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000554 	.word	0x20000554
 800425c:	20000454 	.word	0x20000454
 8004260:	20000560 	.word	0x20000560
 8004264:	20000570 	.word	0x20000570
 8004268:	2000055c 	.word	0x2000055c
 800426c:	20000458 	.word	0x20000458
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d017      	beq.n	80042b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <vTaskDelay+0x60>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <vTaskDelay+0x30>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60bb      	str	r3, [r7, #8]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042a4:	f000 f884 	bl	80043b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042a8:	2100      	movs	r1, #0
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fb1e 	bl	80048ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042b0:	f000 f88c 	bl	80043cc <xTaskResumeAll>
 80042b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <vTaskDelay+0x64>)
 80042be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	2000057c 	.word	0x2000057c
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042ea:	463a      	mov	r2, r7
 80042ec:	1d39      	adds	r1, r7, #4
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f916 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	9202      	str	r2, [sp, #8]
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	2300      	movs	r3, #0
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2300      	movs	r3, #0
 8004308:	460a      	mov	r2, r1
 800430a:	4921      	ldr	r1, [pc, #132]	; (8004390 <vTaskStartScheduler+0xb4>)
 800430c:	4821      	ldr	r0, [pc, #132]	; (8004394 <vTaskStartScheduler+0xb8>)
 800430e:	f7ff fe06 	bl	8003f1e <xTaskCreateStatic>
 8004312:	4603      	mov	r3, r0
 8004314:	4a20      	ldr	r2, [pc, #128]	; (8004398 <vTaskStartScheduler+0xbc>)
 8004316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <vTaskStartScheduler+0xbc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e001      	b.n	800432a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d11b      	bne.n	8004368 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	613b      	str	r3, [r7, #16]
}
 8004342:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <vTaskStartScheduler+0xc0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	334c      	adds	r3, #76	; 0x4c
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <vTaskStartScheduler+0xc4>)
 800434c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <vTaskStartScheduler+0xc8>)
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <vTaskStartScheduler+0xcc>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <vTaskStartScheduler+0xd0>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004362:	f000 fbb5 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004366:	e00e      	b.n	8004386 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d10a      	bne.n	8004386 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <vTaskStartScheduler+0xa8>
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	08005414 	.word	0x08005414
 8004394:	08004739 	.word	0x08004739
 8004398:	20000578 	.word	0x20000578
 800439c:	20000454 	.word	0x20000454
 80043a0:	20000024 	.word	0x20000024
 80043a4:	20000574 	.word	0x20000574
 80043a8:	20000560 	.word	0x20000560
 80043ac:	20000558 	.word	0x20000558

080043b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <vTaskSuspendAll+0x18>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a03      	ldr	r2, [pc, #12]	; (80043c8 <vTaskSuspendAll+0x18>)
 80043bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	2000057c 	.word	0x2000057c

080043cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <xTaskResumeAll+0x114>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043f8:	f000 fc0c 	bl	8004c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043fc:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <xTaskResumeAll+0x114>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <xTaskResumeAll+0x114>)
 8004404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <xTaskResumeAll+0x114>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d161      	bne.n	80044d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800440e:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <xTaskResumeAll+0x118>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d05d      	beq.n	80044d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004416:	e02e      	b.n	8004476 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004418:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <xTaskResumeAll+0x11c>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3318      	adds	r3, #24
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fd50 	bl	8003eca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fd4b 	bl	8003eca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <xTaskResumeAll+0x120>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <xTaskResumeAll+0x120>)
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <xTaskResumeAll+0x124>)
 8004454:	441a      	add	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7ff fcd7 	bl	8003e10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <xTaskResumeAll+0x128>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <xTaskResumeAll+0x12c>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004476:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <xTaskResumeAll+0x11c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1cc      	bne.n	8004418 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004484:	f000 fa12 	bl	80048ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004488:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <xTaskResumeAll+0x130>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004494:	f000 f836 	bl	8004504 <xTaskIncrementTick>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <xTaskResumeAll+0x12c>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f1      	bne.n	8004494 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <xTaskResumeAll+0x130>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <xTaskResumeAll+0x12c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <xTaskResumeAll+0x134>)
 80044c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d2:	f000 fbcf 	bl	8004c74 <vPortExitCritical>

	return xAlreadyYielded;
 80044d6:	68bb      	ldr	r3, [r7, #8]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	2000057c 	.word	0x2000057c
 80044e4:	20000554 	.word	0x20000554
 80044e8:	20000514 	.word	0x20000514
 80044ec:	2000055c 	.word	0x2000055c
 80044f0:	20000458 	.word	0x20000458
 80044f4:	20000454 	.word	0x20000454
 80044f8:	20000568 	.word	0x20000568
 80044fc:	20000564 	.word	0x20000564
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450e:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <xTaskIncrementTick+0x144>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 808e 	bne.w	8004634 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <xTaskIncrementTick+0x148>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004520:	4a4a      	ldr	r2, [pc, #296]	; (800464c <xTaskIncrementTick+0x148>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d120      	bne.n	800456e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800452c:	4b48      	ldr	r3, [pc, #288]	; (8004650 <xTaskIncrementTick+0x14c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <xTaskIncrementTick+0x48>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	603b      	str	r3, [r7, #0]
}
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <xTaskIncrementTick+0x46>
 800454c:	4b40      	ldr	r3, [pc, #256]	; (8004650 <xTaskIncrementTick+0x14c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b40      	ldr	r3, [pc, #256]	; (8004654 <xTaskIncrementTick+0x150>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <xTaskIncrementTick+0x14c>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <xTaskIncrementTick+0x150>)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b3d      	ldr	r3, [pc, #244]	; (8004658 <xTaskIncrementTick+0x154>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <xTaskIncrementTick+0x154>)
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	f000 f99f 	bl	80048ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <xTaskIncrementTick+0x158>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d348      	bcc.n	800460a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004578:	4b35      	ldr	r3, [pc, #212]	; (8004650 <xTaskIncrementTick+0x14c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <xTaskIncrementTick+0x158>)
 8004584:	f04f 32ff 	mov.w	r2, #4294967295
 8004588:	601a      	str	r2, [r3, #0]
					break;
 800458a:	e03e      	b.n	800460a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458c:	4b30      	ldr	r3, [pc, #192]	; (8004650 <xTaskIncrementTick+0x14c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d203      	bcs.n	80045ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045a4:	4a2d      	ldr	r2, [pc, #180]	; (800465c <xTaskIncrementTick+0x158>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045aa:	e02e      	b.n	800460a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fc8a 	bl	8003eca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3318      	adds	r3, #24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fc81 	bl	8003eca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	2201      	movs	r2, #1
 80045ce:	409a      	lsls	r2, r3
 80045d0:	4b23      	ldr	r3, [pc, #140]	; (8004660 <xTaskIncrementTick+0x15c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	4a22      	ldr	r2, [pc, #136]	; (8004660 <xTaskIncrementTick+0x15c>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <xTaskIncrementTick+0x160>)
 80045e8:	441a      	add	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7ff fc0d 	bl	8003e10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <xTaskIncrementTick+0x164>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	429a      	cmp	r2, r3
 8004602:	d3b9      	bcc.n	8004578 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004608:	e7b6      	b.n	8004578 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800460a:	4b17      	ldr	r3, [pc, #92]	; (8004668 <xTaskIncrementTick+0x164>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4914      	ldr	r1, [pc, #80]	; (8004664 <xTaskIncrementTick+0x160>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d901      	bls.n	8004626 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004622:	2301      	movs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <xTaskIncrementTick+0x168>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e004      	b.n	800463e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <xTaskIncrementTick+0x16c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <xTaskIncrementTick+0x16c>)
 800463c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	2000057c 	.word	0x2000057c
 800464c:	20000558 	.word	0x20000558
 8004650:	2000050c 	.word	0x2000050c
 8004654:	20000510 	.word	0x20000510
 8004658:	2000056c 	.word	0x2000056c
 800465c:	20000574 	.word	0x20000574
 8004660:	2000055c 	.word	0x2000055c
 8004664:	20000458 	.word	0x20000458
 8004668:	20000454 	.word	0x20000454
 800466c:	20000568 	.word	0x20000568
 8004670:	20000564 	.word	0x20000564

08004674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <vTaskSwitchContext+0xac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004682:	4b28      	ldr	r3, [pc, #160]	; (8004724 <vTaskSwitchContext+0xb0>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004688:	e044      	b.n	8004714 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <vTaskSwitchContext+0xb0>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <vTaskSwitchContext+0xb4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	f1c3 031f 	rsb	r3, r3, #31
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	4921      	ldr	r1, [pc, #132]	; (800472c <vTaskSwitchContext+0xb8>)
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	607b      	str	r3, [r7, #4]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <vTaskSwitchContext+0x5a>
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a14      	ldr	r2, [pc, #80]	; (800472c <vTaskSwitchContext+0xb8>)
 80046dc:	4413      	add	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	3308      	adds	r3, #8
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d104      	bne.n	8004700 <vTaskSwitchContext+0x8c>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <vTaskSwitchContext+0xbc>)
 8004708:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <vTaskSwitchContext+0xbc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	334c      	adds	r3, #76	; 0x4c
 8004710:	4a08      	ldr	r2, [pc, #32]	; (8004734 <vTaskSwitchContext+0xc0>)
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	2000057c 	.word	0x2000057c
 8004724:	20000568 	.word	0x20000568
 8004728:	2000055c 	.word	0x2000055c
 800472c:	20000458 	.word	0x20000458
 8004730:	20000454 	.word	0x20000454
 8004734:	20000024 	.word	0x20000024

08004738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004740:	f000 f852 	bl	80047e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <prvIdleTask+0x28>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d9f9      	bls.n	8004740 <prvIdleTask+0x8>
			{
				taskYIELD();
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <prvIdleTask+0x2c>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800475c:	e7f0      	b.n	8004740 <prvIdleTask+0x8>
 800475e:	bf00      	nop
 8004760:	20000458 	.word	0x20000458
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	e00c      	b.n	800478e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <prvInitialiseTaskLists+0x60>)
 8004780:	4413      	add	r3, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fb17 	bl	8003db6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3301      	adds	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b06      	cmp	r3, #6
 8004792:	d9ef      	bls.n	8004774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004794:	480d      	ldr	r0, [pc, #52]	; (80047cc <prvInitialiseTaskLists+0x64>)
 8004796:	f7ff fb0e 	bl	8003db6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800479a:	480d      	ldr	r0, [pc, #52]	; (80047d0 <prvInitialiseTaskLists+0x68>)
 800479c:	f7ff fb0b 	bl	8003db6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047a0:	480c      	ldr	r0, [pc, #48]	; (80047d4 <prvInitialiseTaskLists+0x6c>)
 80047a2:	f7ff fb08 	bl	8003db6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047a6:	480c      	ldr	r0, [pc, #48]	; (80047d8 <prvInitialiseTaskLists+0x70>)
 80047a8:	f7ff fb05 	bl	8003db6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047ac:	480b      	ldr	r0, [pc, #44]	; (80047dc <prvInitialiseTaskLists+0x74>)
 80047ae:	f7ff fb02 	bl	8003db6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <prvInitialiseTaskLists+0x78>)
 80047b4:	4a05      	ldr	r2, [pc, #20]	; (80047cc <prvInitialiseTaskLists+0x64>)
 80047b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <prvInitialiseTaskLists+0x7c>)
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <prvInitialiseTaskLists+0x68>)
 80047bc:	601a      	str	r2, [r3, #0]
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000458 	.word	0x20000458
 80047cc:	200004e4 	.word	0x200004e4
 80047d0:	200004f8 	.word	0x200004f8
 80047d4:	20000514 	.word	0x20000514
 80047d8:	20000528 	.word	0x20000528
 80047dc:	20000540 	.word	0x20000540
 80047e0:	2000050c 	.word	0x2000050c
 80047e4:	20000510 	.word	0x20000510

080047e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ee:	e019      	b.n	8004824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047f0:	f000 fa10 	bl	8004c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <prvCheckTasksWaitingTermination+0x50>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fb62 	bl	8003eca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <prvCheckTasksWaitingTermination+0x54>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3b01      	subs	r3, #1
 800480c:	4a0b      	ldr	r2, [pc, #44]	; (800483c <prvCheckTasksWaitingTermination+0x54>)
 800480e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <prvCheckTasksWaitingTermination+0x58>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <prvCheckTasksWaitingTermination+0x58>)
 8004818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800481a:	f000 fa2b 	bl	8004c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f810 	bl	8004844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <prvCheckTasksWaitingTermination+0x58>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e1      	bne.n	80047f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000528 	.word	0x20000528
 800483c:	20000554 	.word	0x20000554
 8004840:	2000053c 	.word	0x2000053c

08004844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	334c      	adds	r3, #76	; 0x4c
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fcf5 	bl	8005240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d108      	bne.n	8004872 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fb83 	bl	8004f70 <vPortFree>
				vPortFree( pxTCB );
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb80 	bl	8004f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004870:	e018      	b.n	80048a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d103      	bne.n	8004884 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb77 	bl	8004f70 <vPortFree>
	}
 8004882:	e00f      	b.n	80048a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800488a:	2b02      	cmp	r3, #2
 800488c:	d00a      	beq.n	80048a4 <prvDeleteTCB+0x60>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	60fb      	str	r3, [r7, #12]
}
 80048a0:	bf00      	nop
 80048a2:	e7fe      	b.n	80048a2 <prvDeleteTCB+0x5e>
	}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <prvResetNextTaskUnblockTime+0x38>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <prvResetNextTaskUnblockTime+0x3c>)
 80048be:	f04f 32ff 	mov.w	r2, #4294967295
 80048c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048c4:	e008      	b.n	80048d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <prvResetNextTaskUnblockTime+0x38>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <prvResetNextTaskUnblockTime+0x3c>)
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	2000050c 	.word	0x2000050c
 80048e8:	20000574 	.word	0x20000574

080048ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <prvAddCurrentTaskToDelayedList+0xb0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fae1 	bl	8003eca <uxListRemove>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4013      	ands	r3, r2
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004924:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d10a      	bne.n	8004944 <prvAddCurrentTaskToDelayedList+0x58>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	481a      	ldr	r0, [pc, #104]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800493e:	f7ff fa67 	bl	8003e10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004942:	e026      	b.n	8004992 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d209      	bcs.n	8004970 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7ff fa75 	bl	8003e58 <vListInsert>
}
 800496e:	e010      	b.n	8004992 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3304      	adds	r3, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f7ff fa6b 	bl	8003e58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	d202      	bcs.n	8004992 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6013      	str	r3, [r2, #0]
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000558 	.word	0x20000558
 80049a0:	20000454 	.word	0x20000454
 80049a4:	2000055c 	.word	0x2000055c
 80049a8:	20000540 	.word	0x20000540
 80049ac:	20000510 	.word	0x20000510
 80049b0:	2000050c 	.word	0x2000050c
 80049b4:	20000574 	.word	0x20000574

080049b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b04      	subs	r3, #4
 80049c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b04      	subs	r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <pxPortInitialiseStack+0x64>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b14      	subs	r3, #20
 80049f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b04      	subs	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f06f 0202 	mvn.w	r2, #2
 8004a06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b20      	subs	r3, #32
 8004a0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	08004a21 	.word	0x08004a21

08004a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <prvTaskExitError+0x54>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d00a      	beq.n	8004a4a <prvTaskExitError+0x2a>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <prvTaskExitError+0x28>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60bb      	str	r3, [r7, #8]
}
 8004a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a5e:	bf00      	nop
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0fc      	beq.n	8004a60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000020 	.word	0x20000020
	...

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	20000454 	.word	0x20000454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <xPortStartScheduler+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10a      	bne.n	8004af6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <xPortStartScheduler+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10a      	bne.n	8004b16 <xPortStartScheduler+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <xPortStartScheduler+0x12c>)
 8004b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <xPortStartScheduler+0x130>)
 8004b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b44:	e009      	b.n	8004b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d0ef      	beq.n	8004b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00a      	beq.n	8004b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60bb      	str	r3, [r7, #8]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <xPortStartScheduler+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bbe:	f000 f8dd 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <xPortStartScheduler+0x13c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bc8:	f000 f8fc 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bd8:	f7ff ff66 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bdc:	f7ff fd4a 	bl	8004674 <vTaskSwitchContext>
	prvTaskExitError();
 8004be0:	f7ff ff1e 	bl	8004a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00
 8004bf4:	410fc271 	.word	0x410fc271
 8004bf8:	410fc270 	.word	0x410fc270
 8004bfc:	e000e400 	.word	0xe000e400
 8004c00:	20000580 	.word	0x20000580
 8004c04:	20000584 	.word	0x20000584
 8004c08:	e000ed20 	.word	0xe000ed20
 8004c0c:	20000020 	.word	0x20000020
 8004c10:	e000ef34 	.word	0xe000ef34

08004c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10f      	bne.n	8004c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortEnterCritical+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	603b      	str	r3, [r7, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vPortEnterCritical+0x4a>
	}
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000020 	.word	0x20000020
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vPortExitCritical+0x24>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <vPortExitCritical+0x42>
 8004caa:	2300      	movs	r3, #0
 8004cac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000020 	.word	0x20000020
	...

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7ff fcb8 	bl	8004674 <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	20000454 	.word	0x20000454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7ff fbd7 	bl	8004504 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <SysTick_Handler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000014 	.word	0x20000014
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de4:	f7ff fae4 	bl	80043b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004de8:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <pvPortMalloc+0x180>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df0:	f000 f920 	bl	8005034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <pvPortMalloc+0x184>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8093 	bne.w	8004f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d014      	beq.n	8004e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <pvPortMalloc+0x6c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d06e      	beq.n	8004f28 <pvPortMalloc+0x150>
 8004e4a:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <pvPortMalloc+0x188>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d869      	bhi.n	8004f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e5e:	e004      	b.n	8004e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <pvPortMalloc+0xa4>
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f1      	bne.n	8004e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <pvPortMalloc+0x180>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d050      	beq.n	8004f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d91f      	bls.n	8004ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	613b      	str	r3, [r7, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad2      	subs	r2, r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f000 f908 	bl	80050f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <pvPortMalloc+0x188>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <pvPortMalloc+0x190>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d203      	bcs.n	8004f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <pvPortMalloc+0x188>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <pvPortMalloc+0x190>)
 8004f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <pvPortMalloc+0x184>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <pvPortMalloc+0x194>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <pvPortMalloc+0x194>)
 8004f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f28:	f7ff fa50 	bl	80043cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <pvPortMalloc+0x174>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60fb      	str	r3, [r7, #12]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <pvPortMalloc+0x172>
	return pvReturn;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20004190 	.word	0x20004190
 8004f5c:	200041a4 	.word	0x200041a4
 8004f60:	20004194 	.word	0x20004194
 8004f64:	20004188 	.word	0x20004188
 8004f68:	20004198 	.word	0x20004198
 8004f6c:	2000419c 	.word	0x2000419c

08004f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04d      	beq.n	800501e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f82:	2308      	movs	r3, #8
 8004f84:	425b      	negs	r3, r3
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <vPortFree+0xb8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <vPortFree+0x44>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <vPortFree+0x62>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60bb      	str	r3, [r7, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <vPortFree+0xb8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01e      	beq.n	800501e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11a      	bne.n	800501e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <vPortFree+0xb8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ff8:	f7ff f9da 	bl	80043b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <vPortFree+0xbc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4413      	add	r3, r2
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <vPortFree+0xbc>)
 8005008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f000 f874 	bl	80050f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <vPortFree+0xc0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	4a06      	ldr	r2, [pc, #24]	; (8005030 <vPortFree+0xc0>)
 8005018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800501a:	f7ff f9d7 	bl	80043cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800501e:	bf00      	nop
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200041a4 	.word	0x200041a4
 800502c:	20004194 	.word	0x20004194
 8005030:	200041a0 	.word	0x200041a0

08005034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800503a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800503e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <prvHeapInit+0xac>)
 8005042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3307      	adds	r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <prvHeapInit+0xac>)
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800506c:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <prvHeapInit+0xb0>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <prvHeapInit+0xb0>)
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005080:	2208      	movs	r2, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <prvHeapInit+0xb4>)
 8005094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <prvHeapInit+0xb4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <prvHeapInit+0xb4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <prvHeapInit+0xb4>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <prvHeapInit+0xb8>)
 80050c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <prvHeapInit+0xbc>)
 80050ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <prvHeapInit+0xc0>)
 80050ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000588 	.word	0x20000588
 80050e4:	20004188 	.word	0x20004188
 80050e8:	20004190 	.word	0x20004190
 80050ec:	20004198 	.word	0x20004198
 80050f0:	20004194 	.word	0x20004194
 80050f4:	200041a4 	.word	0x200041a4

080050f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <prvInsertBlockIntoFreeList+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <prvInsertBlockIntoFreeList+0x14>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d8f7      	bhi.n	8005106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d108      	bne.n	800513a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d118      	bne.n	8005180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d00d      	beq.n	8005176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e008      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e003      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d002      	beq.n	8005196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20004188 	.word	0x20004188
 80051a8:	20004190 	.word	0x20004190

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4d0d      	ldr	r5, [pc, #52]	; (80051e4 <__libc_init_array+0x38>)
 80051b0:	4c0d      	ldr	r4, [pc, #52]	; (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1b64      	subs	r4, r4, r5
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	2600      	movs	r6, #0
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	4d0b      	ldr	r5, [pc, #44]	; (80051ec <__libc_init_array+0x40>)
 80051be:	4c0c      	ldr	r4, [pc, #48]	; (80051f0 <__libc_init_array+0x44>)
 80051c0:	f000 f8f2 	bl	80053a8 <_init>
 80051c4:	1b64      	subs	r4, r4, r5
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	2600      	movs	r6, #0
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	080054a4 	.word	0x080054a4
 80051e8:	080054a4 	.word	0x080054a4
 80051ec:	080054a4 	.word	0x080054a4
 80051f0:	080054a8 	.word	0x080054a8

080051f4 <__retarget_lock_acquire_recursive>:
 80051f4:	4770      	bx	lr

080051f6 <__retarget_lock_release_recursive>:
 80051f6:	4770      	bx	lr

080051f8 <memcpy>:
 80051f8:	440a      	add	r2, r1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005200:	d100      	bne.n	8005204 <memcpy+0xc>
 8005202:	4770      	bx	lr
 8005204:	b510      	push	{r4, lr}
 8005206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520e:	4291      	cmp	r1, r2
 8005210:	d1f9      	bne.n	8005206 <memcpy+0xe>
 8005212:	bd10      	pop	{r4, pc}

08005214 <memset>:
 8005214:	4402      	add	r2, r0
 8005216:	4603      	mov	r3, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <cleanup_glue>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	6809      	ldr	r1, [r1, #0]
 800522a:	4605      	mov	r5, r0
 800522c:	b109      	cbz	r1, 8005232 <cleanup_glue+0xe>
 800522e:	f7ff fff9 	bl	8005224 <cleanup_glue>
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523a:	f000 b869 	b.w	8005310 <_free_r>
	...

08005240 <_reclaim_reent>:
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <_reclaim_reent+0xb4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4283      	cmp	r3, r0
 8005246:	b570      	push	{r4, r5, r6, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	d051      	beq.n	80052f0 <_reclaim_reent+0xb0>
 800524c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800524e:	b143      	cbz	r3, 8005262 <_reclaim_reent+0x22>
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14a      	bne.n	80052ec <_reclaim_reent+0xac>
 8005256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005258:	6819      	ldr	r1, [r3, #0]
 800525a:	b111      	cbz	r1, 8005262 <_reclaim_reent+0x22>
 800525c:	4620      	mov	r0, r4
 800525e:	f000 f857 	bl	8005310 <_free_r>
 8005262:	6961      	ldr	r1, [r4, #20]
 8005264:	b111      	cbz	r1, 800526c <_reclaim_reent+0x2c>
 8005266:	4620      	mov	r0, r4
 8005268:	f000 f852 	bl	8005310 <_free_r>
 800526c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800526e:	b111      	cbz	r1, 8005276 <_reclaim_reent+0x36>
 8005270:	4620      	mov	r0, r4
 8005272:	f000 f84d 	bl	8005310 <_free_r>
 8005276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005278:	b111      	cbz	r1, 8005280 <_reclaim_reent+0x40>
 800527a:	4620      	mov	r0, r4
 800527c:	f000 f848 	bl	8005310 <_free_r>
 8005280:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005282:	b111      	cbz	r1, 800528a <_reclaim_reent+0x4a>
 8005284:	4620      	mov	r0, r4
 8005286:	f000 f843 	bl	8005310 <_free_r>
 800528a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800528c:	b111      	cbz	r1, 8005294 <_reclaim_reent+0x54>
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f83e 	bl	8005310 <_free_r>
 8005294:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005296:	b111      	cbz	r1, 800529e <_reclaim_reent+0x5e>
 8005298:	4620      	mov	r0, r4
 800529a:	f000 f839 	bl	8005310 <_free_r>
 800529e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80052a0:	b111      	cbz	r1, 80052a8 <_reclaim_reent+0x68>
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 f834 	bl	8005310 <_free_r>
 80052a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052aa:	b111      	cbz	r1, 80052b2 <_reclaim_reent+0x72>
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 f82f 	bl	8005310 <_free_r>
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	b1e3      	cbz	r3, 80052f0 <_reclaim_reent+0xb0>
 80052b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052b8:	4620      	mov	r0, r4
 80052ba:	4798      	blx	r3
 80052bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80052be:	b1b9      	cbz	r1, 80052f0 <_reclaim_reent+0xb0>
 80052c0:	4620      	mov	r0, r4
 80052c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052c6:	f7ff bfad 	b.w	8005224 <cleanup_glue>
 80052ca:	5949      	ldr	r1, [r1, r5]
 80052cc:	b941      	cbnz	r1, 80052e0 <_reclaim_reent+0xa0>
 80052ce:	3504      	adds	r5, #4
 80052d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d2:	2d80      	cmp	r5, #128	; 0x80
 80052d4:	68d9      	ldr	r1, [r3, #12]
 80052d6:	d1f8      	bne.n	80052ca <_reclaim_reent+0x8a>
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 f819 	bl	8005310 <_free_r>
 80052de:	e7ba      	b.n	8005256 <_reclaim_reent+0x16>
 80052e0:	680e      	ldr	r6, [r1, #0]
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 f814 	bl	8005310 <_free_r>
 80052e8:	4631      	mov	r1, r6
 80052ea:	e7ef      	b.n	80052cc <_reclaim_reent+0x8c>
 80052ec:	2500      	movs	r5, #0
 80052ee:	e7ef      	b.n	80052d0 <_reclaim_reent+0x90>
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	bf00      	nop
 80052f4:	20000024 	.word	0x20000024

080052f8 <__malloc_lock>:
 80052f8:	4801      	ldr	r0, [pc, #4]	; (8005300 <__malloc_lock+0x8>)
 80052fa:	f7ff bf7b 	b.w	80051f4 <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	200041a8 	.word	0x200041a8

08005304 <__malloc_unlock>:
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <__malloc_unlock+0x8>)
 8005306:	f7ff bf76 	b.w	80051f6 <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	200041a8 	.word	0x200041a8

08005310 <_free_r>:
 8005310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005312:	2900      	cmp	r1, #0
 8005314:	d044      	beq.n	80053a0 <_free_r+0x90>
 8005316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800531a:	9001      	str	r0, [sp, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f1a1 0404 	sub.w	r4, r1, #4
 8005322:	bfb8      	it	lt
 8005324:	18e4      	addlt	r4, r4, r3
 8005326:	f7ff ffe7 	bl	80052f8 <__malloc_lock>
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <_free_r+0x94>)
 800532c:	9801      	ldr	r0, [sp, #4]
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	b933      	cbnz	r3, 8005340 <_free_r+0x30>
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	b003      	add	sp, #12
 8005338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800533c:	f7ff bfe2 	b.w	8005304 <__malloc_unlock>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d908      	bls.n	8005356 <_free_r+0x46>
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	1961      	adds	r1, r4, r5
 8005348:	428b      	cmp	r3, r1
 800534a:	bf01      	itttt	eq
 800534c:	6819      	ldreq	r1, [r3, #0]
 800534e:	685b      	ldreq	r3, [r3, #4]
 8005350:	1949      	addeq	r1, r1, r5
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	e7ed      	b.n	8005332 <_free_r+0x22>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x50>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x46>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1855      	adds	r5, r2, r1
 8005364:	42a5      	cmp	r5, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x70>
 8005368:	6824      	ldr	r4, [r4, #0]
 800536a:	4421      	add	r1, r4
 800536c:	1854      	adds	r4, r2, r1
 800536e:	42a3      	cmp	r3, r4
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1e0      	bne.n	8005336 <_free_r+0x26>
 8005374:	681c      	ldr	r4, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	4421      	add	r1, r4
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	e7da      	b.n	8005336 <_free_r+0x26>
 8005380:	d902      	bls.n	8005388 <_free_r+0x78>
 8005382:	230c      	movs	r3, #12
 8005384:	6003      	str	r3, [r0, #0]
 8005386:	e7d6      	b.n	8005336 <_free_r+0x26>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	1961      	adds	r1, r4, r5
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1949      	addeq	r1, r1, r5
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7ca      	b.n	8005336 <_free_r+0x26>
 80053a0:	b003      	add	sp, #12
 80053a2:	bd30      	pop	{r4, r5, pc}
 80053a4:	200041ac 	.word	0x200041ac

080053a8 <_init>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

080053b4 <_fini>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr
