
SEN_T6713_C02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b1c  08004b1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b24  08004b24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000074  08004ba0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004ba0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010622  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fab  00000000  00000000  000306c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00032670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00033380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027077  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104f5  00000000  00000000  0005b03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb91c  00000000  00000000  0006b534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166e50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa8  00000000  00000000  00166ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08004aa4 	.word	0x08004aa4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08004aa4 	.word	0x08004aa4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb63 	bl	8000cc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f820 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f8e4 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f8b2 	bl	800076c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000608:	f000 f876 	bl	80006f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rcv_buff, 8);
 800060c:	2208      	movs	r2, #8
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <main+0x3c>)
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <main+0x40>)
 8000612:	f002 fb66 	bl	8002ce2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, cmd, cmd_length, 1000);
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x44>)
 8000618:	881a      	ldrh	r2, [r3, #0]
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	4907      	ldr	r1, [pc, #28]	; (800063c <main+0x48>)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <main+0x40>)
 8000622:	f002 fadb 	bl	8002bdc <HAL_UART_Transmit>
	  HAL_Delay(50);
 8000626:	2032      	movs	r0, #50	; 0x32
 8000628:	f000 fb78 	bl	8000d1c <HAL_Delay>
	  HAL_UART_Transmit(&huart2, cmd, cmd_length, 1000);
 800062c:	e7f3      	b.n	8000616 <main+0x22>
 800062e:	bf00      	nop
 8000630:	20000090 	.word	0x20000090
 8000634:	200000a4 	.word	0x200000a4
 8000638:	20000000 	.word	0x20000000
 800063c:	08004ac8 	.word	0x08004ac8

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fdb2 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xb0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xb0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xb0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <SystemClock_Config+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemClock_Config+0xb4>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <SystemClock_Config+0xb4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe79 	bl	80013a4 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f90e 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f912 	bl	8001900 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f8f9 	bl	80008d8 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 80006fe:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <MX_USART2_UART_Init+0x70>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 8000704:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 800070c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000710:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 800071a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x6c>)
 8000740:	f002 f9fe 	bl	8002b40 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800074a:	f000 f8c5 	bl	80008d8 <Error_Handler>
  }

  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2026      	movs	r0, #38	; 0x26
 8000754:	f000 fbbe 	bl	8000ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000758:	2026      	movs	r0, #38	; 0x26
 800075a:	f000 fbd7 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a4 	.word	0x200000a4
 8000768:	40004400 	.word	0x40004400

0800076c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART3_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007b0:	f002 f9c6 	bl	8002b40 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f88d 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_GPIO_Init+0x44>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <MX_GPIO_Init+0x44>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_GPIO_Init+0x44>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_GPIO_Init+0x44>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <MX_GPIO_Init+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_GPIO_Init+0x44>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <HAL_UART_RxCpltCallback+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d133      	bne.n	800088e <HAL_UART_RxCpltCallback+0x7a>
		HAL_UART_Receive_IT(&huart2, rcv_buff, 8);
 8000826:	2208      	movs	r2, #8
 8000828:	491c      	ldr	r1, [pc, #112]	; (800089c <HAL_UART_RxCpltCallback+0x88>)
 800082a:	481d      	ldr	r0, [pc, #116]	; (80008a0 <HAL_UART_RxCpltCallback+0x8c>)
 800082c:	f002 fa59 	bl	8002ce2 <HAL_UART_Receive_IT>
		if( rcv_buff[0] == 0x15 && rcv_buff[1] == 0x04 && rcv_buff[2] == 0x02) {
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_UART_RxCpltCallback+0x88>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b15      	cmp	r3, #21
 8000836:	d12a      	bne.n	800088e <HAL_UART_RxCpltCallback+0x7a>
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_RxCpltCallback+0x88>)
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d126      	bne.n	800088e <HAL_UART_RxCpltCallback+0x7a>
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_UART_RxCpltCallback+0x88>)
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d122      	bne.n	800088e <HAL_UART_RxCpltCallback+0x7a>
			uint16_t new_co2 = (uint16_t)(rcv_buff[3] << 8 | rcv_buff[4]);
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_UART_RxCpltCallback+0x88>)
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_UART_RxCpltCallback+0x88>)
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	81fb      	strh	r3, [r7, #14]
			if( new_co2 != co2 ) {
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_UART_RxCpltCallback+0x90>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	89fa      	ldrh	r2, [r7, #14]
 8000862:	429a      	cmp	r2, r3
 8000864:	d013      	beq.n	800088e <HAL_UART_RxCpltCallback+0x7a>
				co2 = new_co2;
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_UART_RxCpltCallback+0x90>)
 8000868:	89fb      	ldrh	r3, [r7, #14]
 800086a:	8013      	strh	r3, [r2, #0]
				sprintf(snd_buff, "CO2: %d\r\n", co2);
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_UART_RxCpltCallback+0x90>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <HAL_UART_RxCpltCallback+0x94>)
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <HAL_UART_RxCpltCallback+0x98>)
 8000876:	f003 fca7 	bl	80041c8 <siprintf>
				HAL_UART_Transmit(&huart3, snd_buff, strlen(snd_buff), 10);
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <HAL_UART_RxCpltCallback+0x98>)
 800087c:	f7ff fce0 	bl	8000240 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	230a      	movs	r3, #10
 8000886:	4909      	ldr	r1, [pc, #36]	; (80008ac <HAL_UART_RxCpltCallback+0x98>)
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_UART_RxCpltCallback+0x9c>)
 800088a:	f002 f9a7 	bl	8002bdc <HAL_UART_Transmit>
			}
		}
	}
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	20000090 	.word	0x20000090
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	20000002 	.word	0x20000002
 80008a8:	08004abc 	.word	0x08004abc
 80008ac:	20000098 	.word	0x20000098
 80008b0:	2000012c 	.word	0x2000012c

080008b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c6:	f000 fa09 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010000 	.word	0x40010000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0b0      	sub	sp, #192	; 0xc0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	2290      	movs	r2, #144	; 0x90
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fc33 	bl	80041b8 <memset>
  if(huart->Instance==USART2)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a46      	ldr	r2, [pc, #280]	; (8000a70 <HAL_UART_MspInit+0x144>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d143      	bne.n	80009e4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f9e1 	bl	8001d30 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000974:	f7ff ffb0 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000978:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <HAL_UART_MspInit+0x148>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a3d      	ldr	r2, [pc, #244]	; (8000a74 <HAL_UART_MspInit+0x148>)
 800097e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <HAL_UART_MspInit+0x148>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009a8:	2360      	movs	r3, #96	; 0x60
 80009aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009ca:	4619      	mov	r1, r3
 80009cc:	482a      	ldr	r0, [pc, #168]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 80009ce:	f000 fb3d 	bl	800104c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f000 fa7c 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009dc:	2026      	movs	r0, #38	; 0x26
 80009de:	f000 fa95 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e2:	e041      	b.n	8000a68 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <HAL_UART_MspInit+0x150>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d13c      	bne.n	8000a68 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f997 	bl	8001d30 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000a08:	f7ff ff66 	bl	80008d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0x148>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a56:	2307      	movs	r3, #7
 8000a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a64:	f000 faf2 	bl	800104c <HAL_GPIO_Init>
}
 8000a68:	bf00      	nop
 8000a6a:	37c0      	adds	r7, #192	; 0xc0
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40004800 	.word	0x40004800

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_InitTick+0xcc>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <HAL_InitTick+0xcc>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_InitTick+0xcc>)
 8000a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f90a 	bl	8001ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ab8:	f001 f8f4 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8000abc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <HAL_InitTick+0xd0>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	0c9b      	lsrs	r3, r3, #18
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_InitTick+0xd4>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_InitTick+0xd8>)
 8000ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_InitTick+0xd4>)
 8000ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_InitTick+0xd4>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_InitTick+0xd4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_InitTick+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_InitTick+0xd4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <HAL_InitTick+0xd4>)
 8000af4:	f001 fd44 	bl	8002580 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d11b      	bne.n	8000b3e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <HAL_InitTick+0xd4>)
 8000b08:	f001 fd9c 	bl	8002644 <HAL_TIM_Base_Start_IT>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d111      	bne.n	8000b3e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 f9f6 	bl	8000f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	d808      	bhi.n	8000b38 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b26:	2200      	movs	r2, #0
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 f9d2 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_InitTick+0xdc>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e002      	b.n	8000b3e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3730      	adds	r7, #48	; 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	200001b4 	.word	0x200001b4
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	20000008 	.word	0x20000008

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bbe:	f001 fdb9 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001b4 	.word	0x200001b4

08000bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART2_IRQHandler+0x10>)
 8000bd2:	f002 f8cb 	bl	8002d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000a4 	.word	0x200000a4

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f003 faa8 	bl	8004164 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20080000 	.word	0x20080000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000200 	.word	0x20000200
 8000c48:	20000218 	.word	0x20000218

08000c4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd7 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 fa67 	bl	8004170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fca7 	bl	80005f4 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cb4:	08004b2c 	.word	0x08004b2c
  ldr r2, =_sbss
 8000cb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cbc:	20000218 	.word	0x20000218

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>

08000cc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f000 f8f9 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ccc:	200f      	movs	r0, #15
 8000cce:	f7ff fed7 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd2:	f7ff fe07 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	20000204 	.word	0x20000204

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000204 	.word	0x20000204

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <__NVIC_SetPriorityGrouping+0x40>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x40>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	05fa0000 	.word	0x05fa0000

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4c 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff61 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ffb1 	bl	8000e58 <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff80 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff54 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f36:	f7ff fee5 	bl	8000d04 <HAL_GetTick>
 8000f3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d008      	beq.n	8000f5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e052      	b.n	8001000 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0216 	bic.w	r2, r2, #22
 8000f68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <HAL_DMA_Abort+0x62>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0208 	bic.w	r2, r2, #8
 8000f98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000faa:	e013      	b.n	8000fd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fac:	f7ff feaa 	bl	8000d04 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	d90c      	bls.n	8000fd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e015      	b.n	8001000 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1e4      	bne.n	8000fac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe6:	223f      	movs	r2, #63	; 0x3f
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d004      	beq.n	8001026 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00c      	b.n	8001040 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2205      	movs	r2, #5
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e175      	b.n	8001358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8164 	bne.w	8001352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x56>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80be 	beq.w	8001352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011ee:	4a61      	ldr	r2, [pc, #388]	; (8001374 <HAL_GPIO_Init+0x328>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d037      	beq.n	800128a <HAL_GPIO_Init+0x23e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d031      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a56      	ldr	r2, [pc, #344]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_GPIO_Init+0x236>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x232>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a54      	ldr	r2, [pc, #336]	; (8001388 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a53      	ldr	r2, [pc, #332]	; (800138c <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x22a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x350>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x21a>
 8001262:	2309      	movs	r3, #9
 8001264:	e012      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001266:	230a      	movs	r3, #10
 8001268:	e010      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126a:	2308      	movs	r3, #8
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126e:	2307      	movs	r3, #7
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x240>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x328>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_GPIO_Init+0x354>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x354>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x354>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x354>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae86 	bls.w	800106c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40022000 	.word	0x40022000
 800139c:	40022400 	.word	0x40022400
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e29b      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8087 	beq.w	80014d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c8:	4b96      	ldr	r3, [pc, #600]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d00c      	beq.n	80013ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d4:	4b93      	ldr	r3, [pc, #588]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d112      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
 80013e0:	4b90      	ldr	r3, [pc, #576]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ec:	d10b      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ee:	4b8d      	ldr	r3, [pc, #564]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d06c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x130>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d168      	bne.n	80014d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e275      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x7a>
 8001410:	4b84      	ldr	r3, [pc, #528]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a83      	ldr	r2, [pc, #524]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e02e      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x9c>
 8001426:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7e      	ldr	r2, [pc, #504]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800142c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7b      	ldr	r2, [pc, #492]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0xc0>
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a75      	ldr	r2, [pc, #468]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a72      	ldr	r2, [pc, #456]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc3e 	bl	8000d04 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc3a 	bl	8000d04 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e229      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc2a 	bl	8000d04 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc26 	bl	8000d04 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e215      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x110>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d069      	beq.n	80015b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d11c      	bne.n	8001534 <HAL_RCC_OscConfig+0x190>
 80014fa:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x17a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1e9      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	493d      	ldr	r1, [pc, #244]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	e040      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a38      	ldr	r2, [pc, #224]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fbdc 	bl	8000d04 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff fbd8 	bl	8000d04 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1c7      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4929      	ldr	r1, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
 8001582:	e018      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a26      	ldr	r2, [pc, #152]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fbb8 	bl	8000d04 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fbb4 	bl	8000d04 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1a3      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d038      	beq.n	8001634 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80015cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb95 	bl	8000d04 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fb91 	bl	8000d04 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e180      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x23a>
 80015fc:	e01a      	b.n	8001634 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_RCC_OscConfig+0x280>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fb7b 	bl	8000d04 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fb77 	bl	8000d04 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d903      	bls.n	8001628 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e166      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
 8001624:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ee      	bne.n	8001612 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a4 	beq.w	800178a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b8c      	ldr	r3, [pc, #560]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b89      	ldr	r3, [pc, #548]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a88      	ldr	r2, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b86      	ldr	r3, [pc, #536]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x4d4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x4d4>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb3f 	bl	8000d04 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fb3b 	bl	8000d04 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e12a      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	4b76      	ldr	r3, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0x4d4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x31a>
 80016b0:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a6f      	ldr	r2, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	e02d      	b.n	800171a <HAL_RCC_OscConfig+0x376>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x33c>
 80016c6:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6713      	str	r3, [r2, #112]	; 0x70
 80016d2:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a67      	ldr	r2, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	e01c      	b.n	800171a <HAL_RCC_OscConfig+0x376>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x35e>
 80016e8:	4b62      	ldr	r3, [pc, #392]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a61      	ldr	r2, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x376>
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a5b      	ldr	r2, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	4b59      	ldr	r3, [pc, #356]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff faef 	bl	8000d04 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff faeb 	bl	8000d04 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0d8      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x386>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fad9 	bl	8000d04 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fad5 	bl	8000d04 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0c2      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a3c      	ldr	r2, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80ae 	beq.w	80018f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d06d      	beq.n	800187c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d14b      	bne.n	8001840 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff faa6 	bl	8000d04 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff faa2 	bl	8000d04 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e091      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	071b      	lsls	r3, r3, #28
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fa74 	bl	8000d04 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fa70 	bl	8000d04 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e05f      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x47c>
 800183e:	e057      	b.n	80018f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fa5a 	bl	8000d04 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fa56 	bl	8000d04 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e045      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x4b0>
 8001872:	e03d      	b.n	80018f0 <HAL_RCC_OscConfig+0x54c>
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_RCC_OscConfig+0x558>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d030      	beq.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d129      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d122      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d119      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10f      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0d0      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d910      	bls.n	8001948 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 020f 	bic.w	r2, r3, #15
 800192e:	4965      	ldr	r1, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d040      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e073      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06b      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4936      	ldr	r1, [pc, #216]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f4:	f7ff f986 	bl	8000d04 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f982 	bl	8000d04 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e053      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d210      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 020f 	bic.w	r2, r3, #15
 8001a3a:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1d4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe ffe4 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08004ad0 	.word	0x08004ad0
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b090      	sub	sp, #64	; 0x40
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80a1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e09b      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b10:	e09b      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b16:	e098      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d028      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	627a      	str	r2, [r7, #36]	; 0x24
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b40:	2100      	movs	r1, #0
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b44:	fb03 f201 	mul.w	r2, r3, r1
 8001b48:	2300      	movs	r3, #0
 8001b4a:	fb00 f303 	mul.w	r3, r0, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a43      	ldr	r2, [pc, #268]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b52:	fba0 1202 	umull	r1, r2, r0, r2
 8001b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b58:	460a      	mov	r2, r1
 8001b5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b5e:	4413      	add	r3, r2
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b64:	2200      	movs	r2, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	61fa      	str	r2, [r7, #28]
 8001b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b72:	f7fe fbbd 	bl	80002f0 <__aeabi_uldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b7e:	e053      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	2200      	movs	r2, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	617a      	str	r2, [r7, #20]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b92:	f04f 0b00 	mov.w	fp, #0
 8001b96:	4652      	mov	r2, sl
 8001b98:	465b      	mov	r3, fp
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	0159      	lsls	r1, r3, #5
 8001ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba8:	0150      	lsls	r0, r2, #5
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ebb2 080a 	subs.w	r8, r2, sl
 8001bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bca:	ebb2 0408 	subs.w	r4, r2, r8
 8001bce:	eb63 0509 	sbc.w	r5, r3, r9
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	00eb      	lsls	r3, r5, #3
 8001bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be0:	00e2      	lsls	r2, r4, #3
 8001be2:	4614      	mov	r4, r2
 8001be4:	461d      	mov	r5, r3
 8001be6:	eb14 030a 	adds.w	r3, r4, sl
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	eb45 030b 	adc.w	r3, r5, fp
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c12:	2200      	movs	r2, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c1c:	f7fe fb68 	bl	80002f0 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3740      	adds	r7, #64	; 0x40
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	017d7840 	.word	0x017d7840

08001c64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08004ae0 	.word	0x08004ae0

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08004ae0 	.word	0x08004ae0

08001ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220f      	movs	r2, #15
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetClockConfig+0x60>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d012      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d58:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4a68      	ldr	r2, [pc, #416]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d62:	6093      	str	r3, [r2, #8]
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	4964      	ldr	r1, [pc, #400]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d017      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	4959      	ldr	r1, [pc, #356]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da8:	d101      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d017      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	494a      	ldr	r1, [pc, #296]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d101      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 808b 	beq.w	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a39      	ldr	r2, [pc, #228]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7fe ff64 	bl	8000d04 <HAL_GetTick>
 8001e3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe ff60 	bl	8000d04 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e38f      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d035      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d02e      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d114      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ff28 	bl	8000d04 <HAL_GetTick>
 8001eb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ff24 	bl	8000d04 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e351      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	4901      	ldr	r1, [pc, #4]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000
 8001f08:	0ffffcff 	.word	0x0ffffcff
 8001f0c:	4bac      	ldr	r3, [pc, #688]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4aab      	ldr	r2, [pc, #684]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f16:	6093      	str	r3, [r2, #8]
 8001f18:	4ba9      	ldr	r3, [pc, #676]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	49a6      	ldr	r1, [pc, #664]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d010      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f36:	4ba2      	ldr	r3, [pc, #648]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f3c:	4aa0      	ldr	r2, [pc, #640]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f46:	4b9e      	ldr	r3, [pc, #632]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	499b      	ldr	r1, [pc, #620]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f64:	4b96      	ldr	r3, [pc, #600]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f72:	4993      	ldr	r1, [pc, #588]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f86:	4b8e      	ldr	r3, [pc, #568]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f94:	498a      	ldr	r1, [pc, #552]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fa8:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fb6:	4982      	ldr	r1, [pc, #520]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fca:	4b7d      	ldr	r3, [pc, #500]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4979      	ldr	r1, [pc, #484]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fec:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f023 0203 	bic.w	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4971      	ldr	r1, [pc, #452]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800200e:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f023 020c 	bic.w	r2, r3, #12
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201c:	4968      	ldr	r1, [pc, #416]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002030:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4960      	ldr	r1, [pc, #384]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002060:	4957      	ldr	r1, [pc, #348]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002074:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	494f      	ldr	r1, [pc, #316]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002096:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4946      	ldr	r1, [pc, #280]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	493e      	ldr	r1, [pc, #248]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	4935      	ldr	r1, [pc, #212]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800210a:	492d      	ldr	r1, [pc, #180]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d011      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212c:	4924      	ldr	r1, [pc, #144]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213c:	d101      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216c:	4914      	ldr	r1, [pc, #80]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00b      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002190:	490b      	ldr	r1, [pc, #44]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00f      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b4:	4902      	ldr	r1, [pc, #8]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021bc:	e002      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021d0:	4b8a      	ldr	r3, [pc, #552]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	4986      	ldr	r1, [pc, #536]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002204:	497d      	ldr	r1, [pc, #500]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d006      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80d6 	beq.w	80023cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a75      	ldr	r2, [pc, #468]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800222a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7fe fd6a 	bl	8000d04 <HAL_GetTick>
 8002230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002234:	f7fe fd66 	bl	8000d04 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e195      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002246:	4b6d      	ldr	r3, [pc, #436]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d021      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11d      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002266:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227a:	0e1b      	lsrs	r3, r3, #24
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	019a      	lsls	r2, r3, #6
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	071b      	lsls	r3, r3, #28
 800229a:	4958      	ldr	r1, [pc, #352]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02e      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022cc:	d129      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022ce:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e2:	0f1b      	lsrs	r3, r3, #28
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	019a      	lsls	r2, r3, #6
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	061b      	lsls	r3, r3, #24
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	071b      	lsls	r3, r3, #28
 8002302:	493e      	ldr	r1, [pc, #248]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002310:	f023 021f 	bic.w	r2, r3, #31
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	3b01      	subs	r3, #1
 800231a:	4938      	ldr	r1, [pc, #224]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01d      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002334:	0e1b      	lsrs	r3, r3, #24
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002342:	0f1b      	lsrs	r3, r3, #28
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	019a      	lsls	r2, r3, #6
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	071b      	lsls	r3, r3, #28
 8002362:	4926      	ldr	r1, [pc, #152]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	019a      	lsls	r2, r3, #6
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	071b      	lsls	r3, r3, #28
 8002392:	491a      	ldr	r1, [pc, #104]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a6:	f7fe fcad 	bl	8000d04 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023ae:	f7fe fca9 	bl	8000d04 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0d8      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 80ce 	bne.w	8002570 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a08      	ldr	r2, [pc, #32]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7fe fc90 	bl	8000d04 <HAL_GetTick>
 80023e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023e6:	e00b      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023e8:	f7fe fc8c 	bl	8000d04 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d904      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0bb      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240c:	d0ec      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02e      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d12a      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	0f1b      	lsrs	r3, r3, #28
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	019a      	lsls	r2, r3, #6
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	071b      	lsls	r3, r3, #28
 800246a:	4944      	ldr	r1, [pc, #272]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002472:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	493d      	ldr	r1, [pc, #244]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d022      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a0:	d11d      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	0f1b      	lsrs	r3, r3, #28
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	019a      	lsls	r2, r3, #6
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	071b      	lsls	r3, r3, #28
 80024d6:	4929      	ldr	r1, [pc, #164]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d028      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4917      	ldr	r1, [pc, #92]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	4911      	ldr	r1, [pc, #68]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002548:	f7fe fbdc 	bl	8000d04 <HAL_GetTick>
 800254c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002550:	f7fe fbd8 	bl	8000d04 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e007      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800256a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800256e:	d1ef      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e049      	b.n	8002626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f841 	bl	800262e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 fa00 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d001      	beq.n	800265c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e054      	b.n	8002706 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <HAL_TIM_Base_Start_IT+0xd0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d022      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d01d      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_TIM_Base_Start_IT+0xd4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d018      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_TIM_Base_Start_IT+0xd8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_TIM_Base_Start_IT+0xdc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00e      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_TIM_Base_Start_IT+0xe0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_TIM_Base_Start_IT+0xe4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_TIM_Base_Start_IT+0xe8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d115      	bne.n	80026f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_TIM_Base_Start_IT+0xec>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d015      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0xbe>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d011      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	e008      	b.n	8002702 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e000      	b.n	8002704 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010000 	.word	0x40010000
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40000c00 	.word	0x40000c00
 8002724:	40010400 	.word	0x40010400
 8002728:	40014000 	.word	0x40014000
 800272c:	40001800 	.word	0x40001800
 8002730:	00010007 	.word	0x00010007

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0202 	mvn.w	r2, #2
 8002760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f905 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8f7 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f908 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8db 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8cd 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8de 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0208 	mvn.w	r2, #8
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8b1 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8a3 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8b4 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b10      	cmp	r3, #16
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b10      	cmp	r3, #16
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0210 	mvn.w	r2, #16
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2208      	movs	r2, #8
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f887 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f879 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f88a 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0201 	mvn.w	r2, #1
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fd fffe 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b80      	cmp	r3, #128	; 0x80
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f91a 	bl	8002b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d10e      	bne.n	8002912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b80      	cmp	r3, #128	; 0x80
 8002900:	d107      	bne.n	8002912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800290a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f90d 	bl	8002b2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d10e      	bne.n	800293e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d107      	bne.n	800293e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f838 	bl	80029ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b20      	cmp	r3, #32
 800294a:	d10e      	bne.n	800296a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d107      	bne.n	800296a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0220 	mvn.w	r2, #32
 8002962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8cd 	bl	8002b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d00f      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <TIM_Base_SetConfig+0x118>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3c      	ldr	r2, [pc, #240]	; (8002ae0 <TIM_Base_SetConfig+0x11c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <TIM_Base_SetConfig+0x120>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d02b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d027      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <TIM_Base_SetConfig+0x118>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d023      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <TIM_Base_SetConfig+0x11c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <TIM_Base_SetConfig+0x120>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d017      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <TIM_Base_SetConfig+0x128>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <TIM_Base_SetConfig+0x12c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <TIM_Base_SetConfig+0x130>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <TIM_Base_SetConfig+0x134>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a24      	ldr	r2, [pc, #144]	; (8002afc <TIM_Base_SetConfig+0x138>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <TIM_Base_SetConfig+0x13c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0xf8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40010400 	.word	0x40010400
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800
 8002af8:	40001800 	.word	0x40001800
 8002afc:	40001c00 	.word	0x40001c00
 8002b00:	40002000 	.word	0x40002000

08002b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e040      	b.n	8002bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd fee2 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fc06 	bl	8003390 <UART_SetConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e022      	b.n	8002bd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fe5e 	bl	8003858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fee5 	bl	800399c <UART_CheckIdleState>
 8002bd2:	4603      	mov	r3, r0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d171      	bne.n	8002cd8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_UART_Transmit+0x24>
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e06a      	b.n	8002cda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2221      	movs	r2, #33	; 0x21
 8002c10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f877 	bl	8000d04 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c30:	d108      	bne.n	8002c44 <HAL_UART_Transmit+0x68>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d104      	bne.n	8002c44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	e003      	b.n	8002c4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c4c:	e02c      	b.n	8002ca8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 feec 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e038      	b.n	8002cda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3302      	adds	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e007      	b.n	8002c96 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1cc      	bne.n	8002c4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 feb9 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e005      	b.n	8002cda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b08a      	sub	sp, #40	; 0x28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	4613      	mov	r3, r2
 8002cee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d132      	bne.n	8002d60 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_UART_Receive_IT+0x24>
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02b      	b.n	8002d62 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d018      	beq.n	8002d50 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	69f9      	ldr	r1, [r7, #28]
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e6      	bne.n	8002d1e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 ff34 	bl	8003bc4 <UART_Start_Receive_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3728      	adds	r7, #40	; 0x28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0ba      	sub	sp, #232	; 0xe8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d115      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00f      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 82ac 	beq.w	8003322 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
      }
      return;
 8002dd2:	e2a6      	b.n	8003322 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8117 	beq.w	800300c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dee:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_UART_IRQHandler+0x298>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 810a 	beq.w	800300c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_UART_IRQHandler+0xbc>
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2201      	movs	r2, #1
 8002e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d011      	beq.n	8002e58 <HAL_UART_IRQHandler+0xec>
 8002e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2202      	movs	r2, #2
 8002e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d011      	beq.n	8002e88 <HAL_UART_IRQHandler+0x11c>
 8002e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2204      	movs	r2, #4
 8002e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	f043 0208 	orr.w	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x18a>
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8212 	beq.w	8003326 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d005      	beq.n	8002f4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04f      	beq.n	8002fee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fefe 	bl	8003d50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d141      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3308      	adds	r3, #8
 8002f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1d9      	bne.n	8002f62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_UART_IRQHandler+0x29c>)
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f820 	bl	8001008 <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00f      	b.n	8002ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9b6 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e00b      	b.n	8002ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f9b2 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e007      	b.n	8002ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9ae 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ffc:	e193      	b.n	8003326 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffe:	bf00      	nop
    return;
 8003000:	e191      	b.n	8003326 <HAL_UART_IRQHandler+0x5ba>
 8003002:	bf00      	nop
 8003004:	04000120 	.word	0x04000120
 8003008:	08003e19 	.word	0x08003e19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 814c 	bne.w	80032ae <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8145 	beq.w	80032ae <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 813e 	beq.w	80032ae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2210      	movs	r2, #16
 8003038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	f040 80b6 	bne.w	80031b6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003056:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8165 	beq.w	800332a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800306a:	429a      	cmp	r2, r3
 800306c:	f080 815d 	bcs.w	800332a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003084:	f000 8086 	beq.w	8003194 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800309c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1da      	bne.n	8003088 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3308      	adds	r3, #8
 80030d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3308      	adds	r3, #8
 80030f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e1      	bne.n	80030d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3308      	adds	r3, #8
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e3      	bne.n	800310e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003176:	65bb      	str	r3, [r7, #88]	; 0x58
 8003178:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800317c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e4      	bne.n	8003154 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd feca 	bl	8000f28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8d8 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031b4:	e0b9      	b.n	800332a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80ab 	beq.w	800332e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80031d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a6 	beq.w	800332e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003204:	647b      	str	r3, [r7, #68]	; 0x44
 8003206:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800320a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e4      	bne.n	80031e2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	623b      	str	r3, [r7, #32]
   return(result);
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800323c:	633a      	str	r2, [r7, #48]	; 0x30
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e3      	bne.n	8003218 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	60fb      	str	r3, [r7, #12]
   return(result);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f023 0310 	bic.w	r3, r3, #16
 8003278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	617b      	str	r3, [r7, #20]
   return(result);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e4      	bne.n	8003264 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f85c 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032ac:	e03f      	b.n	800332e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <HAL_UART_IRQHandler+0x56c>
 80032ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f853 	bl	800337c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032d6:	e02d      	b.n	8003334 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
    }
    return;
 8003300:	e017      	b.n	8003332 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_UART_IRQHandler+0x5c8>
 800330e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fd92 	bl	8003e44 <UART_EndTransmit_IT>
    return;
 8003320:	e008      	b.n	8003334 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003322:	bf00      	nop
 8003324:	e006      	b.n	8003334 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003326:	bf00      	nop
 8003328:	e004      	b.n	8003334 <HAL_UART_IRQHandler+0x5c8>
      return;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_UART_IRQHandler+0x5c8>
      return;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003332:	bf00      	nop
  }

}
 8003334:	37e8      	adds	r7, #232	; 0xe8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop

0800333c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4ba6      	ldr	r3, [pc, #664]	; (8003654 <UART_SetConfig+0x2c4>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6979      	ldr	r1, [r7, #20]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a94      	ldr	r2, [pc, #592]	; (8003658 <UART_SetConfig+0x2c8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d120      	bne.n	800344e <UART_SetConfig+0xbe>
 800340c:	4b93      	ldr	r3, [pc, #588]	; (800365c <UART_SetConfig+0x2cc>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b03      	cmp	r3, #3
 8003418:	d816      	bhi.n	8003448 <UART_SetConfig+0xb8>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x90>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003431 	.word	0x08003431
 8003424:	0800343d 	.word	0x0800343d
 8003428:	08003437 	.word	0x08003437
 800342c:	08003443 	.word	0x08003443
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e150      	b.n	80036d8 <UART_SetConfig+0x348>
 8003436:	2302      	movs	r3, #2
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e14d      	b.n	80036d8 <UART_SetConfig+0x348>
 800343c:	2304      	movs	r3, #4
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e14a      	b.n	80036d8 <UART_SetConfig+0x348>
 8003442:	2308      	movs	r3, #8
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e147      	b.n	80036d8 <UART_SetConfig+0x348>
 8003448:	2310      	movs	r3, #16
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e144      	b.n	80036d8 <UART_SetConfig+0x348>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a83      	ldr	r2, [pc, #524]	; (8003660 <UART_SetConfig+0x2d0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d132      	bne.n	80034be <UART_SetConfig+0x12e>
 8003458:	4b80      	ldr	r3, [pc, #512]	; (800365c <UART_SetConfig+0x2cc>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d828      	bhi.n	80034b8 <UART_SetConfig+0x128>
 8003466:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0xdc>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034b9 	.word	0x080034b9
 8003474:	080034b9 	.word	0x080034b9
 8003478:	080034b9 	.word	0x080034b9
 800347c:	080034ad 	.word	0x080034ad
 8003480:	080034b9 	.word	0x080034b9
 8003484:	080034b9 	.word	0x080034b9
 8003488:	080034b9 	.word	0x080034b9
 800348c:	080034a7 	.word	0x080034a7
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034b9 	.word	0x080034b9
 8003498:	080034b9 	.word	0x080034b9
 800349c:	080034b3 	.word	0x080034b3
 80034a0:	2300      	movs	r3, #0
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e118      	b.n	80036d8 <UART_SetConfig+0x348>
 80034a6:	2302      	movs	r3, #2
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e115      	b.n	80036d8 <UART_SetConfig+0x348>
 80034ac:	2304      	movs	r3, #4
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e112      	b.n	80036d8 <UART_SetConfig+0x348>
 80034b2:	2308      	movs	r3, #8
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e10f      	b.n	80036d8 <UART_SetConfig+0x348>
 80034b8:	2310      	movs	r3, #16
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e10c      	b.n	80036d8 <UART_SetConfig+0x348>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a68      	ldr	r2, [pc, #416]	; (8003664 <UART_SetConfig+0x2d4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <UART_SetConfig+0x17a>
 80034c8:	4b64      	ldr	r3, [pc, #400]	; (800365c <UART_SetConfig+0x2cc>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d013      	beq.n	80034fe <UART_SetConfig+0x16e>
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d814      	bhi.n	8003504 <UART_SetConfig+0x174>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d009      	beq.n	80034f2 <UART_SetConfig+0x162>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d810      	bhi.n	8003504 <UART_SetConfig+0x174>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <UART_SetConfig+0x15c>
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d006      	beq.n	80034f8 <UART_SetConfig+0x168>
 80034ea:	e00b      	b.n	8003504 <UART_SetConfig+0x174>
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e0f2      	b.n	80036d8 <UART_SetConfig+0x348>
 80034f2:	2302      	movs	r3, #2
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e0ef      	b.n	80036d8 <UART_SetConfig+0x348>
 80034f8:	2304      	movs	r3, #4
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e0ec      	b.n	80036d8 <UART_SetConfig+0x348>
 80034fe:	2308      	movs	r3, #8
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e0e9      	b.n	80036d8 <UART_SetConfig+0x348>
 8003504:	2310      	movs	r3, #16
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e0e6      	b.n	80036d8 <UART_SetConfig+0x348>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a56      	ldr	r2, [pc, #344]	; (8003668 <UART_SetConfig+0x2d8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d120      	bne.n	8003556 <UART_SetConfig+0x1c6>
 8003514:	4b51      	ldr	r3, [pc, #324]	; (800365c <UART_SetConfig+0x2cc>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800351e:	2bc0      	cmp	r3, #192	; 0xc0
 8003520:	d013      	beq.n	800354a <UART_SetConfig+0x1ba>
 8003522:	2bc0      	cmp	r3, #192	; 0xc0
 8003524:	d814      	bhi.n	8003550 <UART_SetConfig+0x1c0>
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d009      	beq.n	800353e <UART_SetConfig+0x1ae>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d810      	bhi.n	8003550 <UART_SetConfig+0x1c0>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0x1a8>
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d006      	beq.n	8003544 <UART_SetConfig+0x1b4>
 8003536:	e00b      	b.n	8003550 <UART_SetConfig+0x1c0>
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e0cc      	b.n	80036d8 <UART_SetConfig+0x348>
 800353e:	2302      	movs	r3, #2
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e0c9      	b.n	80036d8 <UART_SetConfig+0x348>
 8003544:	2304      	movs	r3, #4
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e0c6      	b.n	80036d8 <UART_SetConfig+0x348>
 800354a:	2308      	movs	r3, #8
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e0c3      	b.n	80036d8 <UART_SetConfig+0x348>
 8003550:	2310      	movs	r3, #16
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e0c0      	b.n	80036d8 <UART_SetConfig+0x348>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a44      	ldr	r2, [pc, #272]	; (800366c <UART_SetConfig+0x2dc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d125      	bne.n	80035ac <UART_SetConfig+0x21c>
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <UART_SetConfig+0x2cc>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356e:	d017      	beq.n	80035a0 <UART_SetConfig+0x210>
 8003570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003574:	d817      	bhi.n	80035a6 <UART_SetConfig+0x216>
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d00b      	beq.n	8003594 <UART_SetConfig+0x204>
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d811      	bhi.n	80035a6 <UART_SetConfig+0x216>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <UART_SetConfig+0x1fe>
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d006      	beq.n	800359a <UART_SetConfig+0x20a>
 800358c:	e00b      	b.n	80035a6 <UART_SetConfig+0x216>
 800358e:	2300      	movs	r3, #0
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e0a1      	b.n	80036d8 <UART_SetConfig+0x348>
 8003594:	2302      	movs	r3, #2
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e09e      	b.n	80036d8 <UART_SetConfig+0x348>
 800359a:	2304      	movs	r3, #4
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e09b      	b.n	80036d8 <UART_SetConfig+0x348>
 80035a0:	2308      	movs	r3, #8
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e098      	b.n	80036d8 <UART_SetConfig+0x348>
 80035a6:	2310      	movs	r3, #16
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e095      	b.n	80036d8 <UART_SetConfig+0x348>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <UART_SetConfig+0x2e0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d125      	bne.n	8003602 <UART_SetConfig+0x272>
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <UART_SetConfig+0x2cc>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c4:	d017      	beq.n	80035f6 <UART_SetConfig+0x266>
 80035c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ca:	d817      	bhi.n	80035fc <UART_SetConfig+0x26c>
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d00b      	beq.n	80035ea <UART_SetConfig+0x25a>
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d811      	bhi.n	80035fc <UART_SetConfig+0x26c>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <UART_SetConfig+0x254>
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d006      	beq.n	80035f0 <UART_SetConfig+0x260>
 80035e2:	e00b      	b.n	80035fc <UART_SetConfig+0x26c>
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e076      	b.n	80036d8 <UART_SetConfig+0x348>
 80035ea:	2302      	movs	r3, #2
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e073      	b.n	80036d8 <UART_SetConfig+0x348>
 80035f0:	2304      	movs	r3, #4
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e070      	b.n	80036d8 <UART_SetConfig+0x348>
 80035f6:	2308      	movs	r3, #8
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e06d      	b.n	80036d8 <UART_SetConfig+0x348>
 80035fc:	2310      	movs	r3, #16
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e06a      	b.n	80036d8 <UART_SetConfig+0x348>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <UART_SetConfig+0x2e4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d138      	bne.n	800367e <UART_SetConfig+0x2ee>
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <UART_SetConfig+0x2cc>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800361a:	d017      	beq.n	800364c <UART_SetConfig+0x2bc>
 800361c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003620:	d82a      	bhi.n	8003678 <UART_SetConfig+0x2e8>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	d00b      	beq.n	8003640 <UART_SetConfig+0x2b0>
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362c:	d824      	bhi.n	8003678 <UART_SetConfig+0x2e8>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <UART_SetConfig+0x2aa>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d006      	beq.n	8003646 <UART_SetConfig+0x2b6>
 8003638:	e01e      	b.n	8003678 <UART_SetConfig+0x2e8>
 800363a:	2300      	movs	r3, #0
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e04b      	b.n	80036d8 <UART_SetConfig+0x348>
 8003640:	2302      	movs	r3, #2
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e048      	b.n	80036d8 <UART_SetConfig+0x348>
 8003646:	2304      	movs	r3, #4
 8003648:	77fb      	strb	r3, [r7, #31]
 800364a:	e045      	b.n	80036d8 <UART_SetConfig+0x348>
 800364c:	2308      	movs	r3, #8
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e042      	b.n	80036d8 <UART_SetConfig+0x348>
 8003652:	bf00      	nop
 8003654:	efff69f3 	.word	0xefff69f3
 8003658:	40011000 	.word	0x40011000
 800365c:	40023800 	.word	0x40023800
 8003660:	40004400 	.word	0x40004400
 8003664:	40004800 	.word	0x40004800
 8003668:	40004c00 	.word	0x40004c00
 800366c:	40005000 	.word	0x40005000
 8003670:	40011400 	.word	0x40011400
 8003674:	40007800 	.word	0x40007800
 8003678:	2310      	movs	r3, #16
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e02c      	b.n	80036d8 <UART_SetConfig+0x348>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a72      	ldr	r2, [pc, #456]	; (800384c <UART_SetConfig+0x4bc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d125      	bne.n	80036d4 <UART_SetConfig+0x344>
 8003688:	4b71      	ldr	r3, [pc, #452]	; (8003850 <UART_SetConfig+0x4c0>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003692:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003696:	d017      	beq.n	80036c8 <UART_SetConfig+0x338>
 8003698:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800369c:	d817      	bhi.n	80036ce <UART_SetConfig+0x33e>
 800369e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a2:	d00b      	beq.n	80036bc <UART_SetConfig+0x32c>
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a8:	d811      	bhi.n	80036ce <UART_SetConfig+0x33e>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <UART_SetConfig+0x326>
 80036ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b2:	d006      	beq.n	80036c2 <UART_SetConfig+0x332>
 80036b4:	e00b      	b.n	80036ce <UART_SetConfig+0x33e>
 80036b6:	2300      	movs	r3, #0
 80036b8:	77fb      	strb	r3, [r7, #31]
 80036ba:	e00d      	b.n	80036d8 <UART_SetConfig+0x348>
 80036bc:	2302      	movs	r3, #2
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e00a      	b.n	80036d8 <UART_SetConfig+0x348>
 80036c2:	2304      	movs	r3, #4
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e007      	b.n	80036d8 <UART_SetConfig+0x348>
 80036c8:	2308      	movs	r3, #8
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e004      	b.n	80036d8 <UART_SetConfig+0x348>
 80036ce:	2310      	movs	r3, #16
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e001      	b.n	80036d8 <UART_SetConfig+0x348>
 80036d4:	2310      	movs	r3, #16
 80036d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e0:	d15b      	bne.n	800379a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d828      	bhi.n	800373a <UART_SetConfig+0x3aa>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0x360>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003715 	.word	0x08003715
 80036f4:	0800371d 	.word	0x0800371d
 80036f8:	08003725 	.word	0x08003725
 80036fc:	0800373b 	.word	0x0800373b
 8003700:	0800372b 	.word	0x0800372b
 8003704:	0800373b 	.word	0x0800373b
 8003708:	0800373b 	.word	0x0800373b
 800370c:	0800373b 	.word	0x0800373b
 8003710:	08003733 	.word	0x08003733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7fe fab2 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8003718:	61b8      	str	r0, [r7, #24]
        break;
 800371a:	e013      	b.n	8003744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800371c:	f7fe fac2 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8003720:	61b8      	str	r0, [r7, #24]
        break;
 8003722:	e00f      	b.n	8003744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <UART_SetConfig+0x4c4>)
 8003726:	61bb      	str	r3, [r7, #24]
        break;
 8003728:	e00c      	b.n	8003744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372a:	f7fe f9d5 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 800372e:	61b8      	str	r0, [r7, #24]
        break;
 8003730:	e008      	b.n	8003744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	61bb      	str	r3, [r7, #24]
        break;
 8003738:	e004      	b.n	8003744 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	77bb      	strb	r3, [r7, #30]
        break;
 8003742:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d074      	beq.n	8003834 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	005a      	lsls	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	d916      	bls.n	8003794 <UART_SetConfig+0x404>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d212      	bcs.n	8003794 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f023 030f 	bic.w	r3, r3, #15
 8003776:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	b29a      	uxth	r2, r3
 8003784:	89fb      	ldrh	r3, [r7, #14]
 8003786:	4313      	orrs	r3, r2
 8003788:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	89fa      	ldrh	r2, [r7, #14]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	e04f      	b.n	8003834 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77bb      	strb	r3, [r7, #30]
 8003798:	e04c      	b.n	8003834 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d828      	bhi.n	80037f2 <UART_SetConfig+0x462>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x418>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037f3 	.word	0x080037f3
 80037b8:	080037e3 	.word	0x080037e3
 80037bc:	080037f3 	.word	0x080037f3
 80037c0:	080037f3 	.word	0x080037f3
 80037c4:	080037f3 	.word	0x080037f3
 80037c8:	080037eb 	.word	0x080037eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7fe fa56 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80037d0:	61b8      	str	r0, [r7, #24]
        break;
 80037d2:	e013      	b.n	80037fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7fe fa66 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80037d8:	61b8      	str	r0, [r7, #24]
        break;
 80037da:	e00f      	b.n	80037fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <UART_SetConfig+0x4c4>)
 80037de:	61bb      	str	r3, [r7, #24]
        break;
 80037e0:	e00c      	b.n	80037fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7fe f979 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 80037e6:	61b8      	str	r0, [r7, #24]
        break;
 80037e8:	e008      	b.n	80037fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	e004      	b.n	80037fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	77bb      	strb	r3, [r7, #30]
        break;
 80037fa:	bf00      	nop
    }

    if (pclk != 0U)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	085a      	lsrs	r2, r3, #1
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	441a      	add	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d909      	bls.n	8003830 <UART_SetConfig+0x4a0>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003822:	d205      	bcs.n	8003830 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	e001      	b.n	8003834 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003840:	7fbb      	ldrb	r3, [r7, #30]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40007c00 	.word	0x40007c00
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400

08003858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01a      	beq.n	800396e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003956:	d10a      	bne.n	800396e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039ac:	f7fd f9aa 	bl	8000d04 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d10e      	bne.n	80039de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f831 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e027      	b.n	8003a2e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d10e      	bne.n	8003a0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f81b 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e011      	b.n	8003a2e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b09c      	sub	sp, #112	; 0x70
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	e0a7      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	f000 80a3 	beq.w	8003b98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fd f957 	bl	8000d04 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d13f      	bne.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aba:	64ba      	str	r2, [r7, #72]	; 0x48
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e068      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d050      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b04:	d148      	bne.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	613b      	str	r3, [r7, #16]
   return(result);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b62:	623a      	str	r2, [r7, #32]
 8003b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	69f9      	ldr	r1, [r7, #28]
 8003b68:	6a3a      	ldr	r2, [r7, #32]
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e010      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	f43f af48 	beq.w	8003a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3770      	adds	r7, #112	; 0x70
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b097      	sub	sp, #92	; 0x5c
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	d10e      	bne.n	8003c16 <UART_Start_Receive_IT+0x52>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <UART_Start_Receive_IT+0x48>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c0a:	e02d      	b.n	8003c68 <UART_Start_Receive_IT+0xa4>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	22ff      	movs	r2, #255	; 0xff
 8003c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c14:	e028      	b.n	8003c68 <UART_Start_Receive_IT+0xa4>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <UART_Start_Receive_IT+0x76>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <UART_Start_Receive_IT+0x6c>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	22ff      	movs	r2, #255	; 0xff
 8003c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c2e:	e01b      	b.n	8003c68 <UART_Start_Receive_IT+0xa4>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	227f      	movs	r2, #127	; 0x7f
 8003c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c38:	e016      	b.n	8003c68 <UART_Start_Receive_IT+0xa4>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c42:	d10d      	bne.n	8003c60 <UART_Start_Receive_IT+0x9c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <UART_Start_Receive_IT+0x92>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	227f      	movs	r2, #127	; 0x7f
 8003c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c54:	e008      	b.n	8003c68 <UART_Start_Receive_IT+0xa4>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	223f      	movs	r2, #63	; 0x3f
 8003c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c5e:	e003      	b.n	8003c68 <UART_Start_Receive_IT+0xa4>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2222      	movs	r2, #34	; 0x22
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3308      	adds	r3, #8
 8003c96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c98:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e5      	bne.n	8003c78 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d107      	bne.n	8003cc6 <UART_Start_Receive_IT+0x102>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <UART_Start_Receive_IT+0x184>)
 8003cc2:	669a      	str	r2, [r3, #104]	; 0x68
 8003cc4:	e002      	b.n	8003ccc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <UART_Start_Receive_IT+0x188>)
 8003cca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d019      	beq.n	8003d08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e6      	bne.n	8003cd4 <UART_Start_Receive_IT+0x110>
 8003d06:	e018      	b.n	8003d3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	613b      	str	r3, [r7, #16]
   return(result);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f043 0320 	orr.w	r3, r3, #32
 8003d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	69f9      	ldr	r1, [r7, #28]
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e6      	bne.n	8003d08 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	375c      	adds	r7, #92	; 0x5c
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	08003fff 	.word	0x08003fff
 8003d4c:	08003e99 	.word	0x08003e99

08003d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b095      	sub	sp, #84	; 0x54
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40
 8003d78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e6      	bne.n	8003d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d118      	bne.n	8003df8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	647b      	str	r3, [r7, #68]	; 0x44
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	613b      	str	r3, [r7, #16]
   return(result);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e6      	bne.n	8003dc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e0c:	bf00      	nop
 8003e0e:	3754      	adds	r7, #84	; 0x54
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff fa8a 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	613b      	str	r3, [r7, #16]
   return(result);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fa56 	bl	800333c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e90:	bf00      	nop
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b096      	sub	sp, #88	; 0x58
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ea6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb0:	2b22      	cmp	r3, #34	; 0x22
 8003eb2:	f040 8098 	bne.w	8003fe6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ec0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ec4:	b2d9      	uxtb	r1, r3
 8003ec6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d17b      	bne.n	8003ff6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f12:	653b      	str	r3, [r7, #80]	; 0x50
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f50:	633a      	str	r2, [r7, #48]	; 0x30
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d12e      	bne.n	8003fde <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	69b9      	ldr	r1, [r7, #24]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d103      	bne.n	8003fce <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2210      	movs	r2, #16
 8003fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff f9c4 	bl	8003364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fdc:	e00b      	b.n	8003ff6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fc18 	bl	8000814 <HAL_UART_RxCpltCallback>
}
 8003fe4:	e007      	b.n	8003ff6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0208 	orr.w	r2, r2, #8
 8003ff4:	619a      	str	r2, [r3, #24]
}
 8003ff6:	bf00      	nop
 8003ff8:	3758      	adds	r7, #88	; 0x58
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b096      	sub	sp, #88	; 0x58
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800400c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	2b22      	cmp	r3, #34	; 0x22
 8004018:	f040 8098 	bne.w	800414c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800402c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004030:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004034:	4013      	ands	r3, r2
 8004036:	b29a      	uxth	r2, r3
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d17b      	bne.n	800415c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
 8004084:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e6      	bne.n	8004064 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3308      	adds	r3, #8
 80040b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d12e      	bne.n	8004144 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0310 	bic.w	r3, r3, #16
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	613b      	str	r3, [r7, #16]
   return(result);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e6      	bne.n	80040ec <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b10      	cmp	r3, #16
 800412a:	d103      	bne.n	8004134 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2210      	movs	r2, #16
 8004132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff f911 	bl	8003364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004142:	e00b      	b.n	800415c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fc fb65 	bl	8000814 <HAL_UART_RxCpltCallback>
}
 800414a:	e007      	b.n	800415c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	3758      	adds	r7, #88	; 0x58
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <__errno>:
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <__errno+0x8>)
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000010 	.word	0x20000010

08004170 <__libc_init_array>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	4d0d      	ldr	r5, [pc, #52]	; (80041a8 <__libc_init_array+0x38>)
 8004174:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <__libc_init_array+0x3c>)
 8004176:	1b64      	subs	r4, r4, r5
 8004178:	10a4      	asrs	r4, r4, #2
 800417a:	2600      	movs	r6, #0
 800417c:	42a6      	cmp	r6, r4
 800417e:	d109      	bne.n	8004194 <__libc_init_array+0x24>
 8004180:	4d0b      	ldr	r5, [pc, #44]	; (80041b0 <__libc_init_array+0x40>)
 8004182:	4c0c      	ldr	r4, [pc, #48]	; (80041b4 <__libc_init_array+0x44>)
 8004184:	f000 fc8e 	bl	8004aa4 <_init>
 8004188:	1b64      	subs	r4, r4, r5
 800418a:	10a4      	asrs	r4, r4, #2
 800418c:	2600      	movs	r6, #0
 800418e:	42a6      	cmp	r6, r4
 8004190:	d105      	bne.n	800419e <__libc_init_array+0x2e>
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	f855 3b04 	ldr.w	r3, [r5], #4
 8004198:	4798      	blx	r3
 800419a:	3601      	adds	r6, #1
 800419c:	e7ee      	b.n	800417c <__libc_init_array+0xc>
 800419e:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a2:	4798      	blx	r3
 80041a4:	3601      	adds	r6, #1
 80041a6:	e7f2      	b.n	800418e <__libc_init_array+0x1e>
 80041a8:	08004b24 	.word	0x08004b24
 80041ac:	08004b24 	.word	0x08004b24
 80041b0:	08004b24 	.word	0x08004b24
 80041b4:	08004b28 	.word	0x08004b28

080041b8 <memset>:
 80041b8:	4402      	add	r2, r0
 80041ba:	4603      	mov	r3, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <siprintf>:
 80041c8:	b40e      	push	{r1, r2, r3}
 80041ca:	b500      	push	{lr}
 80041cc:	b09c      	sub	sp, #112	; 0x70
 80041ce:	ab1d      	add	r3, sp, #116	; 0x74
 80041d0:	9002      	str	r0, [sp, #8]
 80041d2:	9006      	str	r0, [sp, #24]
 80041d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041d8:	4809      	ldr	r0, [pc, #36]	; (8004200 <siprintf+0x38>)
 80041da:	9107      	str	r1, [sp, #28]
 80041dc:	9104      	str	r1, [sp, #16]
 80041de:	4909      	ldr	r1, [pc, #36]	; (8004204 <siprintf+0x3c>)
 80041e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041e4:	9105      	str	r1, [sp, #20]
 80041e6:	6800      	ldr	r0, [r0, #0]
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	a902      	add	r1, sp, #8
 80041ec:	f000 f868 	bl	80042c0 <_svfiprintf_r>
 80041f0:	9b02      	ldr	r3, [sp, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	b01c      	add	sp, #112	; 0x70
 80041f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041fc:	b003      	add	sp, #12
 80041fe:	4770      	bx	lr
 8004200:	20000010 	.word	0x20000010
 8004204:	ffff0208 	.word	0xffff0208

08004208 <__ssputs_r>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	688e      	ldr	r6, [r1, #8]
 800420e:	429e      	cmp	r6, r3
 8004210:	4682      	mov	sl, r0
 8004212:	460c      	mov	r4, r1
 8004214:	4690      	mov	r8, r2
 8004216:	461f      	mov	r7, r3
 8004218:	d838      	bhi.n	800428c <__ssputs_r+0x84>
 800421a:	898a      	ldrh	r2, [r1, #12]
 800421c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004220:	d032      	beq.n	8004288 <__ssputs_r+0x80>
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	6909      	ldr	r1, [r1, #16]
 8004226:	eba5 0901 	sub.w	r9, r5, r1
 800422a:	6965      	ldr	r5, [r4, #20]
 800422c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004234:	3301      	adds	r3, #1
 8004236:	444b      	add	r3, r9
 8004238:	106d      	asrs	r5, r5, #1
 800423a:	429d      	cmp	r5, r3
 800423c:	bf38      	it	cc
 800423e:	461d      	movcc	r5, r3
 8004240:	0553      	lsls	r3, r2, #21
 8004242:	d531      	bpl.n	80042a8 <__ssputs_r+0xa0>
 8004244:	4629      	mov	r1, r5
 8004246:	f000 fb63 	bl	8004910 <_malloc_r>
 800424a:	4606      	mov	r6, r0
 800424c:	b950      	cbnz	r0, 8004264 <__ssputs_r+0x5c>
 800424e:	230c      	movs	r3, #12
 8004250:	f8ca 3000 	str.w	r3, [sl]
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004264:	6921      	ldr	r1, [r4, #16]
 8004266:	464a      	mov	r2, r9
 8004268:	f000 fabe 	bl	80047e8 <memcpy>
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	6126      	str	r6, [r4, #16]
 800427a:	6165      	str	r5, [r4, #20]
 800427c:	444e      	add	r6, r9
 800427e:	eba5 0509 	sub.w	r5, r5, r9
 8004282:	6026      	str	r6, [r4, #0]
 8004284:	60a5      	str	r5, [r4, #8]
 8004286:	463e      	mov	r6, r7
 8004288:	42be      	cmp	r6, r7
 800428a:	d900      	bls.n	800428e <__ssputs_r+0x86>
 800428c:	463e      	mov	r6, r7
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	4632      	mov	r2, r6
 8004292:	4641      	mov	r1, r8
 8004294:	f000 fab6 	bl	8004804 <memmove>
 8004298:	68a3      	ldr	r3, [r4, #8]
 800429a:	1b9b      	subs	r3, r3, r6
 800429c:	60a3      	str	r3, [r4, #8]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	4433      	add	r3, r6
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	2000      	movs	r0, #0
 80042a6:	e7db      	b.n	8004260 <__ssputs_r+0x58>
 80042a8:	462a      	mov	r2, r5
 80042aa:	f000 fba5 	bl	80049f8 <_realloc_r>
 80042ae:	4606      	mov	r6, r0
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1e1      	bne.n	8004278 <__ssputs_r+0x70>
 80042b4:	6921      	ldr	r1, [r4, #16]
 80042b6:	4650      	mov	r0, sl
 80042b8:	f000 fabe 	bl	8004838 <_free_r>
 80042bc:	e7c7      	b.n	800424e <__ssputs_r+0x46>
	...

080042c0 <_svfiprintf_r>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	4698      	mov	r8, r3
 80042c6:	898b      	ldrh	r3, [r1, #12]
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	b09d      	sub	sp, #116	; 0x74
 80042cc:	4607      	mov	r7, r0
 80042ce:	460d      	mov	r5, r1
 80042d0:	4614      	mov	r4, r2
 80042d2:	d50e      	bpl.n	80042f2 <_svfiprintf_r+0x32>
 80042d4:	690b      	ldr	r3, [r1, #16]
 80042d6:	b963      	cbnz	r3, 80042f2 <_svfiprintf_r+0x32>
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	f000 fb19 	bl	8004910 <_malloc_r>
 80042de:	6028      	str	r0, [r5, #0]
 80042e0:	6128      	str	r0, [r5, #16]
 80042e2:	b920      	cbnz	r0, 80042ee <_svfiprintf_r+0x2e>
 80042e4:	230c      	movs	r3, #12
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e0d1      	b.n	8004492 <_svfiprintf_r+0x1d2>
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	616b      	str	r3, [r5, #20]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9309      	str	r3, [sp, #36]	; 0x24
 80042f6:	2320      	movs	r3, #32
 80042f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004300:	2330      	movs	r3, #48	; 0x30
 8004302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044ac <_svfiprintf_r+0x1ec>
 8004306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800430a:	f04f 0901 	mov.w	r9, #1
 800430e:	4623      	mov	r3, r4
 8004310:	469a      	mov	sl, r3
 8004312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004316:	b10a      	cbz	r2, 800431c <_svfiprintf_r+0x5c>
 8004318:	2a25      	cmp	r2, #37	; 0x25
 800431a:	d1f9      	bne.n	8004310 <_svfiprintf_r+0x50>
 800431c:	ebba 0b04 	subs.w	fp, sl, r4
 8004320:	d00b      	beq.n	800433a <_svfiprintf_r+0x7a>
 8004322:	465b      	mov	r3, fp
 8004324:	4622      	mov	r2, r4
 8004326:	4629      	mov	r1, r5
 8004328:	4638      	mov	r0, r7
 800432a:	f7ff ff6d 	bl	8004208 <__ssputs_r>
 800432e:	3001      	adds	r0, #1
 8004330:	f000 80aa 	beq.w	8004488 <_svfiprintf_r+0x1c8>
 8004334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004336:	445a      	add	r2, fp
 8004338:	9209      	str	r2, [sp, #36]	; 0x24
 800433a:	f89a 3000 	ldrb.w	r3, [sl]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80a2 	beq.w	8004488 <_svfiprintf_r+0x1c8>
 8004344:	2300      	movs	r3, #0
 8004346:	f04f 32ff 	mov.w	r2, #4294967295
 800434a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800434e:	f10a 0a01 	add.w	sl, sl, #1
 8004352:	9304      	str	r3, [sp, #16]
 8004354:	9307      	str	r3, [sp, #28]
 8004356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800435a:	931a      	str	r3, [sp, #104]	; 0x68
 800435c:	4654      	mov	r4, sl
 800435e:	2205      	movs	r2, #5
 8004360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004364:	4851      	ldr	r0, [pc, #324]	; (80044ac <_svfiprintf_r+0x1ec>)
 8004366:	f7fb ff73 	bl	8000250 <memchr>
 800436a:	9a04      	ldr	r2, [sp, #16]
 800436c:	b9d8      	cbnz	r0, 80043a6 <_svfiprintf_r+0xe6>
 800436e:	06d0      	lsls	r0, r2, #27
 8004370:	bf44      	itt	mi
 8004372:	2320      	movmi	r3, #32
 8004374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004378:	0711      	lsls	r1, r2, #28
 800437a:	bf44      	itt	mi
 800437c:	232b      	movmi	r3, #43	; 0x2b
 800437e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004382:	f89a 3000 	ldrb.w	r3, [sl]
 8004386:	2b2a      	cmp	r3, #42	; 0x2a
 8004388:	d015      	beq.n	80043b6 <_svfiprintf_r+0xf6>
 800438a:	9a07      	ldr	r2, [sp, #28]
 800438c:	4654      	mov	r4, sl
 800438e:	2000      	movs	r0, #0
 8004390:	f04f 0c0a 	mov.w	ip, #10
 8004394:	4621      	mov	r1, r4
 8004396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800439a:	3b30      	subs	r3, #48	; 0x30
 800439c:	2b09      	cmp	r3, #9
 800439e:	d94e      	bls.n	800443e <_svfiprintf_r+0x17e>
 80043a0:	b1b0      	cbz	r0, 80043d0 <_svfiprintf_r+0x110>
 80043a2:	9207      	str	r2, [sp, #28]
 80043a4:	e014      	b.n	80043d0 <_svfiprintf_r+0x110>
 80043a6:	eba0 0308 	sub.w	r3, r0, r8
 80043aa:	fa09 f303 	lsl.w	r3, r9, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	9304      	str	r3, [sp, #16]
 80043b2:	46a2      	mov	sl, r4
 80043b4:	e7d2      	b.n	800435c <_svfiprintf_r+0x9c>
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	1d19      	adds	r1, r3, #4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	9103      	str	r1, [sp, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bfbb      	ittet	lt
 80043c2:	425b      	neglt	r3, r3
 80043c4:	f042 0202 	orrlt.w	r2, r2, #2
 80043c8:	9307      	strge	r3, [sp, #28]
 80043ca:	9307      	strlt	r3, [sp, #28]
 80043cc:	bfb8      	it	lt
 80043ce:	9204      	strlt	r2, [sp, #16]
 80043d0:	7823      	ldrb	r3, [r4, #0]
 80043d2:	2b2e      	cmp	r3, #46	; 0x2e
 80043d4:	d10c      	bne.n	80043f0 <_svfiprintf_r+0x130>
 80043d6:	7863      	ldrb	r3, [r4, #1]
 80043d8:	2b2a      	cmp	r3, #42	; 0x2a
 80043da:	d135      	bne.n	8004448 <_svfiprintf_r+0x188>
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	1d1a      	adds	r2, r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	9203      	str	r2, [sp, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfb8      	it	lt
 80043e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ec:	3402      	adds	r4, #2
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044bc <_svfiprintf_r+0x1fc>
 80043f4:	7821      	ldrb	r1, [r4, #0]
 80043f6:	2203      	movs	r2, #3
 80043f8:	4650      	mov	r0, sl
 80043fa:	f7fb ff29 	bl	8000250 <memchr>
 80043fe:	b140      	cbz	r0, 8004412 <_svfiprintf_r+0x152>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	eba0 000a 	sub.w	r0, r0, sl
 8004406:	fa03 f000 	lsl.w	r0, r3, r0
 800440a:	9b04      	ldr	r3, [sp, #16]
 800440c:	4303      	orrs	r3, r0
 800440e:	3401      	adds	r4, #1
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004416:	4826      	ldr	r0, [pc, #152]	; (80044b0 <_svfiprintf_r+0x1f0>)
 8004418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800441c:	2206      	movs	r2, #6
 800441e:	f7fb ff17 	bl	8000250 <memchr>
 8004422:	2800      	cmp	r0, #0
 8004424:	d038      	beq.n	8004498 <_svfiprintf_r+0x1d8>
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <_svfiprintf_r+0x1f4>)
 8004428:	bb1b      	cbnz	r3, 8004472 <_svfiprintf_r+0x1b2>
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	3307      	adds	r3, #7
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	3308      	adds	r3, #8
 8004434:	9303      	str	r3, [sp, #12]
 8004436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004438:	4433      	add	r3, r6
 800443a:	9309      	str	r3, [sp, #36]	; 0x24
 800443c:	e767      	b.n	800430e <_svfiprintf_r+0x4e>
 800443e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004442:	460c      	mov	r4, r1
 8004444:	2001      	movs	r0, #1
 8004446:	e7a5      	b.n	8004394 <_svfiprintf_r+0xd4>
 8004448:	2300      	movs	r3, #0
 800444a:	3401      	adds	r4, #1
 800444c:	9305      	str	r3, [sp, #20]
 800444e:	4619      	mov	r1, r3
 8004450:	f04f 0c0a 	mov.w	ip, #10
 8004454:	4620      	mov	r0, r4
 8004456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800445a:	3a30      	subs	r2, #48	; 0x30
 800445c:	2a09      	cmp	r2, #9
 800445e:	d903      	bls.n	8004468 <_svfiprintf_r+0x1a8>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0c5      	beq.n	80043f0 <_svfiprintf_r+0x130>
 8004464:	9105      	str	r1, [sp, #20]
 8004466:	e7c3      	b.n	80043f0 <_svfiprintf_r+0x130>
 8004468:	fb0c 2101 	mla	r1, ip, r1, r2
 800446c:	4604      	mov	r4, r0
 800446e:	2301      	movs	r3, #1
 8004470:	e7f0      	b.n	8004454 <_svfiprintf_r+0x194>
 8004472:	ab03      	add	r3, sp, #12
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	462a      	mov	r2, r5
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <_svfiprintf_r+0x1f8>)
 800447a:	a904      	add	r1, sp, #16
 800447c:	4638      	mov	r0, r7
 800447e:	f3af 8000 	nop.w
 8004482:	1c42      	adds	r2, r0, #1
 8004484:	4606      	mov	r6, r0
 8004486:	d1d6      	bne.n	8004436 <_svfiprintf_r+0x176>
 8004488:	89ab      	ldrh	r3, [r5, #12]
 800448a:	065b      	lsls	r3, r3, #25
 800448c:	f53f af2c 	bmi.w	80042e8 <_svfiprintf_r+0x28>
 8004490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004492:	b01d      	add	sp, #116	; 0x74
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	ab03      	add	r3, sp, #12
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	462a      	mov	r2, r5
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <_svfiprintf_r+0x1f8>)
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	4638      	mov	r0, r7
 80044a4:	f000 f87a 	bl	800459c <_printf_i>
 80044a8:	e7eb      	b.n	8004482 <_svfiprintf_r+0x1c2>
 80044aa:	bf00      	nop
 80044ac:	08004ae8 	.word	0x08004ae8
 80044b0:	08004af2 	.word	0x08004af2
 80044b4:	00000000 	.word	0x00000000
 80044b8:	08004209 	.word	0x08004209
 80044bc:	08004aee 	.word	0x08004aee

080044c0 <_printf_common>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	4616      	mov	r6, r2
 80044c6:	4699      	mov	r9, r3
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	690b      	ldr	r3, [r1, #16]
 80044cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bfb8      	it	lt
 80044d4:	4613      	movlt	r3, r2
 80044d6:	6033      	str	r3, [r6, #0]
 80044d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044dc:	4607      	mov	r7, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	b10a      	cbz	r2, 80044e6 <_printf_common+0x26>
 80044e2:	3301      	adds	r3, #1
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	0699      	lsls	r1, r3, #26
 80044ea:	bf42      	ittt	mi
 80044ec:	6833      	ldrmi	r3, [r6, #0]
 80044ee:	3302      	addmi	r3, #2
 80044f0:	6033      	strmi	r3, [r6, #0]
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	f015 0506 	ands.w	r5, r5, #6
 80044f8:	d106      	bne.n	8004508 <_printf_common+0x48>
 80044fa:	f104 0a19 	add.w	sl, r4, #25
 80044fe:	68e3      	ldr	r3, [r4, #12]
 8004500:	6832      	ldr	r2, [r6, #0]
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	42ab      	cmp	r3, r5
 8004506:	dc26      	bgt.n	8004556 <_printf_common+0x96>
 8004508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800450c:	1e13      	subs	r3, r2, #0
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	bf18      	it	ne
 8004512:	2301      	movne	r3, #1
 8004514:	0692      	lsls	r2, r2, #26
 8004516:	d42b      	bmi.n	8004570 <_printf_common+0xb0>
 8004518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800451c:	4649      	mov	r1, r9
 800451e:	4638      	mov	r0, r7
 8004520:	47c0      	blx	r8
 8004522:	3001      	adds	r0, #1
 8004524:	d01e      	beq.n	8004564 <_printf_common+0xa4>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	68e5      	ldr	r5, [r4, #12]
 800452a:	6832      	ldr	r2, [r6, #0]
 800452c:	f003 0306 	and.w	r3, r3, #6
 8004530:	2b04      	cmp	r3, #4
 8004532:	bf08      	it	eq
 8004534:	1aad      	subeq	r5, r5, r2
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	bf0c      	ite	eq
 800453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004540:	2500      	movne	r5, #0
 8004542:	4293      	cmp	r3, r2
 8004544:	bfc4      	itt	gt
 8004546:	1a9b      	subgt	r3, r3, r2
 8004548:	18ed      	addgt	r5, r5, r3
 800454a:	2600      	movs	r6, #0
 800454c:	341a      	adds	r4, #26
 800454e:	42b5      	cmp	r5, r6
 8004550:	d11a      	bne.n	8004588 <_printf_common+0xc8>
 8004552:	2000      	movs	r0, #0
 8004554:	e008      	b.n	8004568 <_printf_common+0xa8>
 8004556:	2301      	movs	r3, #1
 8004558:	4652      	mov	r2, sl
 800455a:	4649      	mov	r1, r9
 800455c:	4638      	mov	r0, r7
 800455e:	47c0      	blx	r8
 8004560:	3001      	adds	r0, #1
 8004562:	d103      	bne.n	800456c <_printf_common+0xac>
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	3501      	adds	r5, #1
 800456e:	e7c6      	b.n	80044fe <_printf_common+0x3e>
 8004570:	18e1      	adds	r1, r4, r3
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	2030      	movs	r0, #48	; 0x30
 8004576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800457a:	4422      	add	r2, r4
 800457c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004584:	3302      	adds	r3, #2
 8004586:	e7c7      	b.n	8004518 <_printf_common+0x58>
 8004588:	2301      	movs	r3, #1
 800458a:	4622      	mov	r2, r4
 800458c:	4649      	mov	r1, r9
 800458e:	4638      	mov	r0, r7
 8004590:	47c0      	blx	r8
 8004592:	3001      	adds	r0, #1
 8004594:	d0e6      	beq.n	8004564 <_printf_common+0xa4>
 8004596:	3601      	adds	r6, #1
 8004598:	e7d9      	b.n	800454e <_printf_common+0x8e>
	...

0800459c <_printf_i>:
 800459c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	7e0f      	ldrb	r7, [r1, #24]
 80045a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045a4:	2f78      	cmp	r7, #120	; 0x78
 80045a6:	4691      	mov	r9, r2
 80045a8:	4680      	mov	r8, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	469a      	mov	sl, r3
 80045ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045b2:	d807      	bhi.n	80045c4 <_printf_i+0x28>
 80045b4:	2f62      	cmp	r7, #98	; 0x62
 80045b6:	d80a      	bhi.n	80045ce <_printf_i+0x32>
 80045b8:	2f00      	cmp	r7, #0
 80045ba:	f000 80d8 	beq.w	800476e <_printf_i+0x1d2>
 80045be:	2f58      	cmp	r7, #88	; 0x58
 80045c0:	f000 80a3 	beq.w	800470a <_printf_i+0x16e>
 80045c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045cc:	e03a      	b.n	8004644 <_printf_i+0xa8>
 80045ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045d2:	2b15      	cmp	r3, #21
 80045d4:	d8f6      	bhi.n	80045c4 <_printf_i+0x28>
 80045d6:	a101      	add	r1, pc, #4	; (adr r1, 80045dc <_printf_i+0x40>)
 80045d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004649 	.word	0x08004649
 80045e4:	080045c5 	.word	0x080045c5
 80045e8:	080045c5 	.word	0x080045c5
 80045ec:	080045c5 	.word	0x080045c5
 80045f0:	080045c5 	.word	0x080045c5
 80045f4:	08004649 	.word	0x08004649
 80045f8:	080045c5 	.word	0x080045c5
 80045fc:	080045c5 	.word	0x080045c5
 8004600:	080045c5 	.word	0x080045c5
 8004604:	080045c5 	.word	0x080045c5
 8004608:	08004755 	.word	0x08004755
 800460c:	08004679 	.word	0x08004679
 8004610:	08004737 	.word	0x08004737
 8004614:	080045c5 	.word	0x080045c5
 8004618:	080045c5 	.word	0x080045c5
 800461c:	08004777 	.word	0x08004777
 8004620:	080045c5 	.word	0x080045c5
 8004624:	08004679 	.word	0x08004679
 8004628:	080045c5 	.word	0x080045c5
 800462c:	080045c5 	.word	0x080045c5
 8004630:	0800473f 	.word	0x0800473f
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	602a      	str	r2, [r5, #0]
 800463c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004644:	2301      	movs	r3, #1
 8004646:	e0a3      	b.n	8004790 <_printf_i+0x1f4>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	6829      	ldr	r1, [r5, #0]
 800464c:	0606      	lsls	r6, r0, #24
 800464e:	f101 0304 	add.w	r3, r1, #4
 8004652:	d50a      	bpl.n	800466a <_printf_i+0xce>
 8004654:	680e      	ldr	r6, [r1, #0]
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	2e00      	cmp	r6, #0
 800465a:	da03      	bge.n	8004664 <_printf_i+0xc8>
 800465c:	232d      	movs	r3, #45	; 0x2d
 800465e:	4276      	negs	r6, r6
 8004660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004664:	485e      	ldr	r0, [pc, #376]	; (80047e0 <_printf_i+0x244>)
 8004666:	230a      	movs	r3, #10
 8004668:	e019      	b.n	800469e <_printf_i+0x102>
 800466a:	680e      	ldr	r6, [r1, #0]
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004672:	bf18      	it	ne
 8004674:	b236      	sxthne	r6, r6
 8004676:	e7ef      	b.n	8004658 <_printf_i+0xbc>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	6820      	ldr	r0, [r4, #0]
 800467c:	1d19      	adds	r1, r3, #4
 800467e:	6029      	str	r1, [r5, #0]
 8004680:	0601      	lsls	r1, r0, #24
 8004682:	d501      	bpl.n	8004688 <_printf_i+0xec>
 8004684:	681e      	ldr	r6, [r3, #0]
 8004686:	e002      	b.n	800468e <_printf_i+0xf2>
 8004688:	0646      	lsls	r6, r0, #25
 800468a:	d5fb      	bpl.n	8004684 <_printf_i+0xe8>
 800468c:	881e      	ldrh	r6, [r3, #0]
 800468e:	4854      	ldr	r0, [pc, #336]	; (80047e0 <_printf_i+0x244>)
 8004690:	2f6f      	cmp	r7, #111	; 0x6f
 8004692:	bf0c      	ite	eq
 8004694:	2308      	moveq	r3, #8
 8004696:	230a      	movne	r3, #10
 8004698:	2100      	movs	r1, #0
 800469a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469e:	6865      	ldr	r5, [r4, #4]
 80046a0:	60a5      	str	r5, [r4, #8]
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	bfa2      	ittt	ge
 80046a6:	6821      	ldrge	r1, [r4, #0]
 80046a8:	f021 0104 	bicge.w	r1, r1, #4
 80046ac:	6021      	strge	r1, [r4, #0]
 80046ae:	b90e      	cbnz	r6, 80046b4 <_printf_i+0x118>
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	d04d      	beq.n	8004750 <_printf_i+0x1b4>
 80046b4:	4615      	mov	r5, r2
 80046b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80046ba:	fb03 6711 	mls	r7, r3, r1, r6
 80046be:	5dc7      	ldrb	r7, [r0, r7]
 80046c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046c4:	4637      	mov	r7, r6
 80046c6:	42bb      	cmp	r3, r7
 80046c8:	460e      	mov	r6, r1
 80046ca:	d9f4      	bls.n	80046b6 <_printf_i+0x11a>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d10b      	bne.n	80046e8 <_printf_i+0x14c>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	07de      	lsls	r6, r3, #31
 80046d4:	d508      	bpl.n	80046e8 <_printf_i+0x14c>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	6861      	ldr	r1, [r4, #4]
 80046da:	4299      	cmp	r1, r3
 80046dc:	bfde      	ittt	le
 80046de:	2330      	movle	r3, #48	; 0x30
 80046e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046e8:	1b52      	subs	r2, r2, r5
 80046ea:	6122      	str	r2, [r4, #16]
 80046ec:	f8cd a000 	str.w	sl, [sp]
 80046f0:	464b      	mov	r3, r9
 80046f2:	aa03      	add	r2, sp, #12
 80046f4:	4621      	mov	r1, r4
 80046f6:	4640      	mov	r0, r8
 80046f8:	f7ff fee2 	bl	80044c0 <_printf_common>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d14c      	bne.n	800479a <_printf_i+0x1fe>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	b004      	add	sp, #16
 8004706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470a:	4835      	ldr	r0, [pc, #212]	; (80047e0 <_printf_i+0x244>)
 800470c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004710:	6829      	ldr	r1, [r5, #0]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f851 6b04 	ldr.w	r6, [r1], #4
 8004718:	6029      	str	r1, [r5, #0]
 800471a:	061d      	lsls	r5, r3, #24
 800471c:	d514      	bpl.n	8004748 <_printf_i+0x1ac>
 800471e:	07df      	lsls	r7, r3, #31
 8004720:	bf44      	itt	mi
 8004722:	f043 0320 	orrmi.w	r3, r3, #32
 8004726:	6023      	strmi	r3, [r4, #0]
 8004728:	b91e      	cbnz	r6, 8004732 <_printf_i+0x196>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	f023 0320 	bic.w	r3, r3, #32
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	2310      	movs	r3, #16
 8004734:	e7b0      	b.n	8004698 <_printf_i+0xfc>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	f043 0320 	orr.w	r3, r3, #32
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	2378      	movs	r3, #120	; 0x78
 8004740:	4828      	ldr	r0, [pc, #160]	; (80047e4 <_printf_i+0x248>)
 8004742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004746:	e7e3      	b.n	8004710 <_printf_i+0x174>
 8004748:	0659      	lsls	r1, r3, #25
 800474a:	bf48      	it	mi
 800474c:	b2b6      	uxthmi	r6, r6
 800474e:	e7e6      	b.n	800471e <_printf_i+0x182>
 8004750:	4615      	mov	r5, r2
 8004752:	e7bb      	b.n	80046cc <_printf_i+0x130>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	6826      	ldr	r6, [r4, #0]
 8004758:	6961      	ldr	r1, [r4, #20]
 800475a:	1d18      	adds	r0, r3, #4
 800475c:	6028      	str	r0, [r5, #0]
 800475e:	0635      	lsls	r5, r6, #24
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	d501      	bpl.n	8004768 <_printf_i+0x1cc>
 8004764:	6019      	str	r1, [r3, #0]
 8004766:	e002      	b.n	800476e <_printf_i+0x1d2>
 8004768:	0670      	lsls	r0, r6, #25
 800476a:	d5fb      	bpl.n	8004764 <_printf_i+0x1c8>
 800476c:	8019      	strh	r1, [r3, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	4615      	mov	r5, r2
 8004774:	e7ba      	b.n	80046ec <_printf_i+0x150>
 8004776:	682b      	ldr	r3, [r5, #0]
 8004778:	1d1a      	adds	r2, r3, #4
 800477a:	602a      	str	r2, [r5, #0]
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	2100      	movs	r1, #0
 8004782:	4628      	mov	r0, r5
 8004784:	f7fb fd64 	bl	8000250 <memchr>
 8004788:	b108      	cbz	r0, 800478e <_printf_i+0x1f2>
 800478a:	1b40      	subs	r0, r0, r5
 800478c:	6060      	str	r0, [r4, #4]
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	2300      	movs	r3, #0
 8004794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004798:	e7a8      	b.n	80046ec <_printf_i+0x150>
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	462a      	mov	r2, r5
 800479e:	4649      	mov	r1, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	47d0      	blx	sl
 80047a4:	3001      	adds	r0, #1
 80047a6:	d0ab      	beq.n	8004700 <_printf_i+0x164>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	079b      	lsls	r3, r3, #30
 80047ac:	d413      	bmi.n	80047d6 <_printf_i+0x23a>
 80047ae:	68e0      	ldr	r0, [r4, #12]
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	4298      	cmp	r0, r3
 80047b4:	bfb8      	it	lt
 80047b6:	4618      	movlt	r0, r3
 80047b8:	e7a4      	b.n	8004704 <_printf_i+0x168>
 80047ba:	2301      	movs	r3, #1
 80047bc:	4632      	mov	r2, r6
 80047be:	4649      	mov	r1, r9
 80047c0:	4640      	mov	r0, r8
 80047c2:	47d0      	blx	sl
 80047c4:	3001      	adds	r0, #1
 80047c6:	d09b      	beq.n	8004700 <_printf_i+0x164>
 80047c8:	3501      	adds	r5, #1
 80047ca:	68e3      	ldr	r3, [r4, #12]
 80047cc:	9903      	ldr	r1, [sp, #12]
 80047ce:	1a5b      	subs	r3, r3, r1
 80047d0:	42ab      	cmp	r3, r5
 80047d2:	dcf2      	bgt.n	80047ba <_printf_i+0x21e>
 80047d4:	e7eb      	b.n	80047ae <_printf_i+0x212>
 80047d6:	2500      	movs	r5, #0
 80047d8:	f104 0619 	add.w	r6, r4, #25
 80047dc:	e7f5      	b.n	80047ca <_printf_i+0x22e>
 80047de:	bf00      	nop
 80047e0:	08004af9 	.word	0x08004af9
 80047e4:	08004b0a 	.word	0x08004b0a

080047e8 <memcpy>:
 80047e8:	440a      	add	r2, r1
 80047ea:	4291      	cmp	r1, r2
 80047ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80047f0:	d100      	bne.n	80047f4 <memcpy+0xc>
 80047f2:	4770      	bx	lr
 80047f4:	b510      	push	{r4, lr}
 80047f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047fe:	4291      	cmp	r1, r2
 8004800:	d1f9      	bne.n	80047f6 <memcpy+0xe>
 8004802:	bd10      	pop	{r4, pc}

08004804 <memmove>:
 8004804:	4288      	cmp	r0, r1
 8004806:	b510      	push	{r4, lr}
 8004808:	eb01 0402 	add.w	r4, r1, r2
 800480c:	d902      	bls.n	8004814 <memmove+0x10>
 800480e:	4284      	cmp	r4, r0
 8004810:	4623      	mov	r3, r4
 8004812:	d807      	bhi.n	8004824 <memmove+0x20>
 8004814:	1e43      	subs	r3, r0, #1
 8004816:	42a1      	cmp	r1, r4
 8004818:	d008      	beq.n	800482c <memmove+0x28>
 800481a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004822:	e7f8      	b.n	8004816 <memmove+0x12>
 8004824:	4402      	add	r2, r0
 8004826:	4601      	mov	r1, r0
 8004828:	428a      	cmp	r2, r1
 800482a:	d100      	bne.n	800482e <memmove+0x2a>
 800482c:	bd10      	pop	{r4, pc}
 800482e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004836:	e7f7      	b.n	8004828 <memmove+0x24>

08004838 <_free_r>:
 8004838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800483a:	2900      	cmp	r1, #0
 800483c:	d044      	beq.n	80048c8 <_free_r+0x90>
 800483e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004842:	9001      	str	r0, [sp, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f1a1 0404 	sub.w	r4, r1, #4
 800484a:	bfb8      	it	lt
 800484c:	18e4      	addlt	r4, r4, r3
 800484e:	f000 f913 	bl	8004a78 <__malloc_lock>
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <_free_r+0x94>)
 8004854:	9801      	ldr	r0, [sp, #4]
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	b933      	cbnz	r3, 8004868 <_free_r+0x30>
 800485a:	6063      	str	r3, [r4, #4]
 800485c:	6014      	str	r4, [r2, #0]
 800485e:	b003      	add	sp, #12
 8004860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004864:	f000 b90e 	b.w	8004a84 <__malloc_unlock>
 8004868:	42a3      	cmp	r3, r4
 800486a:	d908      	bls.n	800487e <_free_r+0x46>
 800486c:	6825      	ldr	r5, [r4, #0]
 800486e:	1961      	adds	r1, r4, r5
 8004870:	428b      	cmp	r3, r1
 8004872:	bf01      	itttt	eq
 8004874:	6819      	ldreq	r1, [r3, #0]
 8004876:	685b      	ldreq	r3, [r3, #4]
 8004878:	1949      	addeq	r1, r1, r5
 800487a:	6021      	streq	r1, [r4, #0]
 800487c:	e7ed      	b.n	800485a <_free_r+0x22>
 800487e:	461a      	mov	r2, r3
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b10b      	cbz	r3, 8004888 <_free_r+0x50>
 8004884:	42a3      	cmp	r3, r4
 8004886:	d9fa      	bls.n	800487e <_free_r+0x46>
 8004888:	6811      	ldr	r1, [r2, #0]
 800488a:	1855      	adds	r5, r2, r1
 800488c:	42a5      	cmp	r5, r4
 800488e:	d10b      	bne.n	80048a8 <_free_r+0x70>
 8004890:	6824      	ldr	r4, [r4, #0]
 8004892:	4421      	add	r1, r4
 8004894:	1854      	adds	r4, r2, r1
 8004896:	42a3      	cmp	r3, r4
 8004898:	6011      	str	r1, [r2, #0]
 800489a:	d1e0      	bne.n	800485e <_free_r+0x26>
 800489c:	681c      	ldr	r4, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	6053      	str	r3, [r2, #4]
 80048a2:	4421      	add	r1, r4
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	e7da      	b.n	800485e <_free_r+0x26>
 80048a8:	d902      	bls.n	80048b0 <_free_r+0x78>
 80048aa:	230c      	movs	r3, #12
 80048ac:	6003      	str	r3, [r0, #0]
 80048ae:	e7d6      	b.n	800485e <_free_r+0x26>
 80048b0:	6825      	ldr	r5, [r4, #0]
 80048b2:	1961      	adds	r1, r4, r5
 80048b4:	428b      	cmp	r3, r1
 80048b6:	bf04      	itt	eq
 80048b8:	6819      	ldreq	r1, [r3, #0]
 80048ba:	685b      	ldreq	r3, [r3, #4]
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	bf04      	itt	eq
 80048c0:	1949      	addeq	r1, r1, r5
 80048c2:	6021      	streq	r1, [r4, #0]
 80048c4:	6054      	str	r4, [r2, #4]
 80048c6:	e7ca      	b.n	800485e <_free_r+0x26>
 80048c8:	b003      	add	sp, #12
 80048ca:	bd30      	pop	{r4, r5, pc}
 80048cc:	20000208 	.word	0x20000208

080048d0 <sbrk_aligned>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4e0e      	ldr	r6, [pc, #56]	; (800490c <sbrk_aligned+0x3c>)
 80048d4:	460c      	mov	r4, r1
 80048d6:	6831      	ldr	r1, [r6, #0]
 80048d8:	4605      	mov	r5, r0
 80048da:	b911      	cbnz	r1, 80048e2 <sbrk_aligned+0x12>
 80048dc:	f000 f8bc 	bl	8004a58 <_sbrk_r>
 80048e0:	6030      	str	r0, [r6, #0]
 80048e2:	4621      	mov	r1, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	f000 f8b7 	bl	8004a58 <_sbrk_r>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d00a      	beq.n	8004904 <sbrk_aligned+0x34>
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d007      	beq.n	8004908 <sbrk_aligned+0x38>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f8ac 	bl	8004a58 <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d101      	bne.n	8004908 <sbrk_aligned+0x38>
 8004904:	f04f 34ff 	mov.w	r4, #4294967295
 8004908:	4620      	mov	r0, r4
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	2000020c 	.word	0x2000020c

08004910 <_malloc_r>:
 8004910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004914:	1ccd      	adds	r5, r1, #3
 8004916:	f025 0503 	bic.w	r5, r5, #3
 800491a:	3508      	adds	r5, #8
 800491c:	2d0c      	cmp	r5, #12
 800491e:	bf38      	it	cc
 8004920:	250c      	movcc	r5, #12
 8004922:	2d00      	cmp	r5, #0
 8004924:	4607      	mov	r7, r0
 8004926:	db01      	blt.n	800492c <_malloc_r+0x1c>
 8004928:	42a9      	cmp	r1, r5
 800492a:	d905      	bls.n	8004938 <_malloc_r+0x28>
 800492c:	230c      	movs	r3, #12
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	2600      	movs	r6, #0
 8004932:	4630      	mov	r0, r6
 8004934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004938:	4e2e      	ldr	r6, [pc, #184]	; (80049f4 <_malloc_r+0xe4>)
 800493a:	f000 f89d 	bl	8004a78 <__malloc_lock>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	461c      	mov	r4, r3
 8004942:	bb34      	cbnz	r4, 8004992 <_malloc_r+0x82>
 8004944:	4629      	mov	r1, r5
 8004946:	4638      	mov	r0, r7
 8004948:	f7ff ffc2 	bl	80048d0 <sbrk_aligned>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	4604      	mov	r4, r0
 8004950:	d14d      	bne.n	80049ee <_malloc_r+0xde>
 8004952:	6834      	ldr	r4, [r6, #0]
 8004954:	4626      	mov	r6, r4
 8004956:	2e00      	cmp	r6, #0
 8004958:	d140      	bne.n	80049dc <_malloc_r+0xcc>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	4631      	mov	r1, r6
 800495e:	4638      	mov	r0, r7
 8004960:	eb04 0803 	add.w	r8, r4, r3
 8004964:	f000 f878 	bl	8004a58 <_sbrk_r>
 8004968:	4580      	cmp	r8, r0
 800496a:	d13a      	bne.n	80049e2 <_malloc_r+0xd2>
 800496c:	6821      	ldr	r1, [r4, #0]
 800496e:	3503      	adds	r5, #3
 8004970:	1a6d      	subs	r5, r5, r1
 8004972:	f025 0503 	bic.w	r5, r5, #3
 8004976:	3508      	adds	r5, #8
 8004978:	2d0c      	cmp	r5, #12
 800497a:	bf38      	it	cc
 800497c:	250c      	movcc	r5, #12
 800497e:	4629      	mov	r1, r5
 8004980:	4638      	mov	r0, r7
 8004982:	f7ff ffa5 	bl	80048d0 <sbrk_aligned>
 8004986:	3001      	adds	r0, #1
 8004988:	d02b      	beq.n	80049e2 <_malloc_r+0xd2>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	442b      	add	r3, r5
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	e00e      	b.n	80049b0 <_malloc_r+0xa0>
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	1b52      	subs	r2, r2, r5
 8004996:	d41e      	bmi.n	80049d6 <_malloc_r+0xc6>
 8004998:	2a0b      	cmp	r2, #11
 800499a:	d916      	bls.n	80049ca <_malloc_r+0xba>
 800499c:	1961      	adds	r1, r4, r5
 800499e:	42a3      	cmp	r3, r4
 80049a0:	6025      	str	r5, [r4, #0]
 80049a2:	bf18      	it	ne
 80049a4:	6059      	strne	r1, [r3, #4]
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	bf08      	it	eq
 80049aa:	6031      	streq	r1, [r6, #0]
 80049ac:	5162      	str	r2, [r4, r5]
 80049ae:	604b      	str	r3, [r1, #4]
 80049b0:	4638      	mov	r0, r7
 80049b2:	f104 060b 	add.w	r6, r4, #11
 80049b6:	f000 f865 	bl	8004a84 <__malloc_unlock>
 80049ba:	f026 0607 	bic.w	r6, r6, #7
 80049be:	1d23      	adds	r3, r4, #4
 80049c0:	1af2      	subs	r2, r6, r3
 80049c2:	d0b6      	beq.n	8004932 <_malloc_r+0x22>
 80049c4:	1b9b      	subs	r3, r3, r6
 80049c6:	50a3      	str	r3, [r4, r2]
 80049c8:	e7b3      	b.n	8004932 <_malloc_r+0x22>
 80049ca:	6862      	ldr	r2, [r4, #4]
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	bf0c      	ite	eq
 80049d0:	6032      	streq	r2, [r6, #0]
 80049d2:	605a      	strne	r2, [r3, #4]
 80049d4:	e7ec      	b.n	80049b0 <_malloc_r+0xa0>
 80049d6:	4623      	mov	r3, r4
 80049d8:	6864      	ldr	r4, [r4, #4]
 80049da:	e7b2      	b.n	8004942 <_malloc_r+0x32>
 80049dc:	4634      	mov	r4, r6
 80049de:	6876      	ldr	r6, [r6, #4]
 80049e0:	e7b9      	b.n	8004956 <_malloc_r+0x46>
 80049e2:	230c      	movs	r3, #12
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4638      	mov	r0, r7
 80049e8:	f000 f84c 	bl	8004a84 <__malloc_unlock>
 80049ec:	e7a1      	b.n	8004932 <_malloc_r+0x22>
 80049ee:	6025      	str	r5, [r4, #0]
 80049f0:	e7de      	b.n	80049b0 <_malloc_r+0xa0>
 80049f2:	bf00      	nop
 80049f4:	20000208 	.word	0x20000208

080049f8 <_realloc_r>:
 80049f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fc:	4680      	mov	r8, r0
 80049fe:	4614      	mov	r4, r2
 8004a00:	460e      	mov	r6, r1
 8004a02:	b921      	cbnz	r1, 8004a0e <_realloc_r+0x16>
 8004a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	4611      	mov	r1, r2
 8004a0a:	f7ff bf81 	b.w	8004910 <_malloc_r>
 8004a0e:	b92a      	cbnz	r2, 8004a1c <_realloc_r+0x24>
 8004a10:	f7ff ff12 	bl	8004838 <_free_r>
 8004a14:	4625      	mov	r5, r4
 8004a16:	4628      	mov	r0, r5
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1c:	f000 f838 	bl	8004a90 <_malloc_usable_size_r>
 8004a20:	4284      	cmp	r4, r0
 8004a22:	4607      	mov	r7, r0
 8004a24:	d802      	bhi.n	8004a2c <_realloc_r+0x34>
 8004a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a2a:	d812      	bhi.n	8004a52 <_realloc_r+0x5a>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f7ff ff6e 	bl	8004910 <_malloc_r>
 8004a34:	4605      	mov	r5, r0
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0ed      	beq.n	8004a16 <_realloc_r+0x1e>
 8004a3a:	42bc      	cmp	r4, r7
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4631      	mov	r1, r6
 8004a40:	bf28      	it	cs
 8004a42:	463a      	movcs	r2, r7
 8004a44:	f7ff fed0 	bl	80047e8 <memcpy>
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	f7ff fef4 	bl	8004838 <_free_r>
 8004a50:	e7e1      	b.n	8004a16 <_realloc_r+0x1e>
 8004a52:	4635      	mov	r5, r6
 8004a54:	e7df      	b.n	8004a16 <_realloc_r+0x1e>
	...

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d06      	ldr	r5, [pc, #24]	; (8004a74 <_sbrk_r+0x1c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7fc f8bc 	bl	8000be0 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000210 	.word	0x20000210

08004a78 <__malloc_lock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__malloc_lock+0x8>)
 8004a7a:	f000 b811 	b.w	8004aa0 <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20000214 	.word	0x20000214

08004a84 <__malloc_unlock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_unlock+0x8>)
 8004a86:	f000 b80c 	b.w	8004aa2 <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	20000214 	.word	0x20000214

08004a90 <_malloc_usable_size_r>:
 8004a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a94:	1f18      	subs	r0, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfbc      	itt	lt
 8004a9a:	580b      	ldrlt	r3, [r1, r0]
 8004a9c:	18c0      	addlt	r0, r0, r3
 8004a9e:	4770      	bx	lr

08004aa0 <__retarget_lock_acquire_recursive>:
 8004aa0:	4770      	bx	lr

08004aa2 <__retarget_lock_release_recursive>:
 8004aa2:	4770      	bx	lr

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
